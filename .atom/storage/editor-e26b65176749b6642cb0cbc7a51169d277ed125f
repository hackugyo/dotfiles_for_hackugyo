{"mode":"editor","version":1,"windowDimensions":{"x":84,"y":23,"width":1632,"height":1024},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/kwatanabe/git/uds/libraries/PagerTitleStripTest/src/jp/co/emenkyo/uds/android/ui/fragment","buffers":[{"text":"gipackage jp.co.emenkyo.uds.android.ui.fragment;\n\nimport java.util.HashMap;\n\nimport jp.co.emenkyo.uds.android.Defines;\nimport jp.co.emenkyo.uds.android.R;\nimport jp.co.emenkyo.uds.android.ServiceApplication;\nimport jp.co.emenkyo.uds.android.eventbus.AbsTranslateEvent;\nimport jp.co.emenkyo.uds.android.eventbus.BusProvider;\nimport jp.co.emenkyo.uds.android.model.json.JSONLogin;\nimport jp.co.emenkyo.uds.android.model.snappydb.LoginStatus;\nimport jp.co.emenkyo.uds.android.ui.activity.MainActivity;\nimport jp.co.emenkyo.uds.android.ui.activity.MainActivityHelper;\nimport jp.co.emenkyo.uds.android.ui.fragment.dialogfragment.PlainAlertDialogFragment;\nimport jp.co.emenkyo.uds.android.util.EditTextUtils;\nimport jp.co.emenkyo.uds.android.util.LogUtils;\nimport jp.co.emenkyo.uds.android.util.StringUtils;\nimport net.arnx.jsonic.JSON;\n\nimport org.json.JSONObject;\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.text.InputType;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.EditText;\nimport br.com.dina.ui.model.ViewItem;\nimport br.com.dina.ui.widget.UITableView;\nimport br.com.dina.ui.widget.UITableView.ClickListener;\n\nimport com.android.volley.NetworkError;\nimport com.android.volley.ParseError;\nimport com.android.volley.TimeoutError;\nimport com.android.volley.VolleyError;\nimport com.squareup.otto.Produce;\n\n/**\n * ログインフラグメント\n * \n * @author kwatanabe\n * \n */\npublic class LoginFragment extends AbsJsonApiFragment {\n\n    /** コンテナのID．フラグメントをreplaceする際に用いる */\n    @SuppressWarnings(\"unused\")\n    private int mContainerId;\n    private UITableView mLoginTableView;\n    private String mTraineeCode;\n    private String mPassword;\n\n    /***********************************************\n     * Life Cycle *\n     ***********************************************/\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View onCreateView = inflater.inflate(R.layout.fragment_login, container, false);\n        mContainerId = container.getId();\n        {\n            mLoginTableView = (UITableView) onCreateView.findViewById(R.id.login_tableView);\n            createList(inflater, mLoginTableView);\n            mLoginTableView.commit();\n            mLoginTableView.setClickListener(getLinksTableViewClickeListener());\n        }\n        return onCreateView;\n    }\n\n    @Override\n    public void onStart() {\n        super.onStart();\n        restore(mLoginTableView);\n    }\n\n    /**\n     * {@link UITableView}を利用したFragmentから画面遷移して戻ると，各childに誤った値が入ってしまうことがあるので，<br>\n     * メンバ変数に格納します．\n     * \n     * @param loginTableView\n     */\n    private void restore(UITableView loginTableView) {\n        ((EditText) loginTableView.getContainedChildAt(0).findViewById(R.id.list_row_edittext)).setText(mTraineeCode);\n        ((EditText) loginTableView.getContainedChildAt(1).findViewById(R.id.list_row_edittext)).setText(mPassword);\n    }\n\n    private void saveInstanceState() {\n        mTraineeCode = ((EditText) mLoginTableView.getContainedChildAt(0).findViewById(R.id.list_row_edittext)).getText().toString();\n        mPassword = ((EditText) mLoginTableView.getContainedChildAt(1).findViewById(R.id.list_row_edittext)).getText().toString();\n    }\n\n    /***********************************************\n     * Views\n     ***********************************************/\n    private static void createList(LayoutInflater inflater, UITableView tableView) {\n        tableView.addViewItem(getTraineeCodeItem(inflater));\n        tableView.addViewItem(getPasswordItem(inflater));\n        tableView.addViewItem(getLoginItem(inflater));\n        tableView.addBasicItem(ServiceApplication.getStringById(R.string.fragment_title_links_before_login));\n    }\n\n    private static ViewItem getTraineeCodeItem(LayoutInflater inflater) {\n        View editTextView = getEditText(inflater, \"教習生コード\", false);\n        return new ViewItem(editTextView);\n    }\n\n    private static ViewItem getPasswordItem(LayoutInflater inflater) {\n        View editTextView = getEditText(inflater, \"パスワード\", true);\n        return new ViewItem(editTextView);\n    }\n\n    private static ViewItem getLoginItem(LayoutInflater inflater) {\n        View loginView = inflater.inflate(R.layout.list_row_login, null);\n        return new ViewItem(loginView);\n    }\n\n    private static View getEditText(LayoutInflater inflater, String hint, boolean isPasswordText) {\n        View view = inflater.inflate(R.layout.list_row_edittext, null);\n        EditText editText = (EditText) view.findViewById(R.id.list_row_edittext);\n        editText.setHint(hint);\n        if (isPasswordText) {\n            editText.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);\n            editText.setFilters(EditTextUtils.createAlphaNumericInputFilter());\n        } else {\n            editText.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);\n            editText.setFilters(EditTextUtils.createNumericInputFilter());\n        }\n        return view;\n    }\n\n    /***********************************************\n     * OnClickListener *\n     ***********************************************/\n\n    private ClickListener getLinksTableViewClickeListener() {\n        return new ClickListener() {\n            @Override\n            public void onClick(int index) {\n                switch (index) {\n                    case 0:\n                        break;\n                    case 1:\n                        break;\n                    case 2:\n                        // ログイン処理 \n                        login();\n                        break;\n                    case 3:\n                        saveInstanceState();\n                        // 次のタブへ遷移\n                        translateNextFragment(LinksFragment.class);\n                        EditTextUtils.closeKeyboard(getActivitySafely(), null);\n                        break;\n                    default:\n\n                }\n            }\n        };\n    }\n\n    private void translateNextFragment(Class<?> fragmentClass) {\n        // fragmentClassが本当にFragmentになれるかどうかチェックする．\n        if (android.support.v4.app.Fragment.class.isAssignableFrom(fragmentClass) || //\n                // android.app.Fragment.class.isAssignableFrom(fragmentClass) || //\n                android.support.v4.preference.PreferenceFragment.class.isAssignableFrom(fragmentClass)) {\n            // nothing to do.\n        } else {\n            LogUtils.e(\"This is not inherited from Fragment class. \" + fragmentClass.getName());\n            return;\n        }\n        BusProvider.getInstance().post(produceButtonClickEvent(fragmentClass.getName()));\n        // 子のフラグメント側からは，親のFragmentManagerにアクセスできない．\n        // そこで，親のフラグメントにイベントを送る．\n    }\n\n    void login() {\n\n        EditText traineeCodeView = (EditText) mLoginTableView.getContainedChildAt(0).findViewById(R.id.list_row_edittext);\n        String traineeCode = traineeCodeView.getText().toString();\n\n        EditText passwordView = (EditText) mLoginTableView.getContainedChildAt(1).findViewById(R.id.list_row_edittext);\n        String password = passwordView.getText().toString();\n        if (traineeCode.isEmpty()) {\n            if (password.isEmpty()) {\n                showDialogFragment(PlainAlertDialogFragment.newInstance(null, \"教習生コード、パスワードを入力してください。\"), \"\");\n            } else {\n                showDialogFragment(PlainAlertDialogFragment.newInstance(null, \"教習生コードを入力してください。\"), \"\");\n            }\n        } else if (password.isEmpty()) {\n            showDialogFragment(PlainAlertDialogFragment.newInstance(null, \"パスワードを入力してください。\"), \"\");\n        } else {\n            postAPIAsync(Defines.API_POST_LOGIN, ServiceApplication.getStringById(R.string.message_trying_to_login));\n        }\n    }\n\n    /*****************************************\n     * API\n     *****************************************/\n    @Override\n    public HashMap<String, String> getPOSTRequestParams() {\n        EditText traineeCodeView = (EditText) mLoginTableView.getContainedChildAt(0).findViewById(R.id.list_row_edittext);\n        String traineeCode = traineeCodeView.getText().toString();\n\n        EditText passwordView = (EditText) mLoginTableView.getContainedChildAt(1).findViewById(R.id.list_row_edittext);\n        String password = passwordView.getText().toString();\n\n        HashMap<String, String> postRequestParams = super.getPOSTRequestParams();\n        postRequestParams.put(\"KyoCode\", traineeCode);\n        postRequestParams.put(\"PasCode\", password);\n        return postRequestParams;\n    }\n\n    @Override\n    public void onResponse(JSONObject response) {\n        super.onResponse(response);\n\n        JSONLogin result = null;\n        try {\n            result = JSON.decode(response.toString(), JSONLogin.class);\n        } catch (net.arnx.jsonic.JSONException e) {\n            e.printStackTrace();\n        }\n\n        // 200だがエラーだった場合の処理\n        if (result == null) {\n            LogUtils.w(response.toString());\n            showUnexpectedErrorDialogFragment();\n            return;\n        } else if (result.trainee != null && result.trainee.isValid() && !result.trainee.isOnTheSchool()) {\n            showDialogFragment(//\n                    PlainAlertDialogFragment.newInstance(null, \"ログインできません。\"), \"\");\n            return;\n        } else if (!result.isOk()) {\n            showDialogFragment(//\n                    PlainAlertDialogFragment.newInstance(null, result.resultMessage), \"\");\n            return;\n        } else {\n            if (result.isValid()) { // 200かつ文句なく成功\n                result.trainee.traineeCode = result.traineeCode;\n                result.trainee.save();\n\n                LoginStatus.setLoginStatus(true);\n                // ログイン状態をtrueにするとアプリIDが発行されるので，その後にAPIに送る．\n                sendRegistrationIdToBackEnd(getActivitySafely());\n\n                Intent i = new Intent(getActivitySafely(), MainActivity.class)//\n                        .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);\n                startActivity(i);\n                getActivitySafely().overridePendingTransition(R.anim.activity_open_enter, R.anim.activity_open_exit);\n                getActivitySafely().finish();\n            } else { // Okだから解析に入れると思ったらValidじゃなかった．\n                LogUtils.w(response.toString());\n                showUnexpectedErrorDialogFragment();\n                return;\n            }\n        }\n    }\n\n    /**\n     * すでにregistration idが存在していれば，ログイン時に送信する．\n     * \n     * @param context\n     */\n    private void sendRegistrationIdToBackEnd(Context context) {\n        final String regId = MainActivityHelper.getRegistrationId(context);\n        if (StringUtils.isPresent(regId)) {\n            MainActivityHelper.sendRegistrationIdToBackend(context, regId);\n        }\n    }\n\n    @Override\n    public void onErrorResponse(VolleyError error) {\n        super.onErrorResponse(error);\n        if (error instanceof ParseError) {\n            showUnexpectedErrorDialogFragment();\n        } else if ((error instanceof NetworkError) || (error instanceof TimeoutError) || error.networkResponse == null) {\n            showNetworkErrorDialogFragment();\n        } else {\n            showServerErrorDialogFragment(error.networkResponse.statusCode);\n        }\n    }\n\n    @Override\n    public void onAlertDialogClicked(String tag, Bundle args, int which) {\n        if (StringUtils.isSame(TAG_RETRY, tag)) {\n            postAPIAsync(Defines.API_POST_LOGIN, ServiceApplication.getStringById(R.string.message_trying_to_login));\n        }\n    }\n\n    @Override\n    public void onAlertDialogCancelled(String tag, Bundle args) {\n        // nothing to do.\n    }\n\n    /*****************************************\n     * Otto Event bus\n     *****************************************/\n    @Produce\n    public LinksTranslateEvent produceButtonClickEvent(String className) {\n        LinksTranslateEvent event = new LinksTranslateEvent();\n        event.setClassName(className);\n        return event;\n    }\n\n    /**\n     * 「その他」が選択されたときのイベント．\n     * \n     */\n    public static class LinksTranslateEvent extends AbsTranslateEvent {\n        // empty implementation.\n    }\n\n}\n","markers":{"markers":{"1":{"id":1,"range":[[249,46],[249,46]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":15,"goalBufferRange":null},"deserializer":"Marker"},"2":{"id":2,"range":[[0,0],[0,48]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"id":1,"oldParams":{"properties":{"type":"selection","editorId":15}},"newParams":{"properties":{"type":"selection","editorId":15,"goalBufferRange":null}},"deserializer":"MarkerPatch"},{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,1]],"oldText":"","newText":"g","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,1],[0,1]],"newRange":[[0,1],[0,2]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/kwatanabe/git/uds/libraries/PagerTitleStripTest/src/jp/co/emenkyo/uds/android/ui/fragment/LoginFragment.java","modifiedWhenLastPersisted":true,"digestWhenLastPersisted":"8885ef6c0c1331a8e29b867e627bc6fa2c8f8d8d","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":15,"softTabs":true,"displayBuffer":{"id":16,"softWrap":false,"editorWidthInChars":null,"scrollTop":4393,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/kwatanabe/git/uds/libraries/PagerTitleStripTest/src/jp/co/emenkyo/uds/android/ui/fragment/LoginFragment.java","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/kwatanabe/git/uds/libraries/PagerTitleStripTest/src/jp/co/emenkyo/uds/android/ui/fragment/LoginFragment.java","focused":false,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-java"],"deserializer":"Workspace"},"packageStates":{"script":{"scriptOptionsViewState":""},"fuzzy-finder":{"/Users/kwatanabe/git/uds/libraries/PagerTitleStripTest/src/jp/co/emenkyo/uds/android/ui/fragment/LoginFragment.java":1406688977711},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":389964},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/kwatanabe/git/uds/libraries/PagerTitleStripTest/src/jp/co/emenkyo/uds/android/ui/fragment/LoginFragment.java","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}