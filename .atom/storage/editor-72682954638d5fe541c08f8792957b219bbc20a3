{"mode":"editor","version":1,"windowDimensions":{"x":55,"y":22,"width":1865,"height":1058},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/util","buffers":[{"text":"<?php\n\nrequire_once APPPATH.'/../packages/apnsphp/ApnsPHP/Autoload.php';\n\nclass Util_Notification\n{\n    public static $APNS_NOTIFICATION_LIMIT = 500;\n\n    /**\n     * 指定したユーザにPush通知を即時送信します.\n     * 申込み完了など即時に送らないといけないpush通知を想定\n     *\n     * @param $user_id user_id\n     * @param $message 送信メッセージ\n     *\n     * @return sent_statu\n     */\n    public static function send_notification_immediate($user_id, $title, $message)\n    {\n        // ジョブ作成\n        $publish_at = date(\"Y-m-d H:i:s\", time());\n        $job = self::get_notification_job($publish_at, $title, $message);\n        // キュー経由で送出\n        $sent_status = self::send_queued_notifications($job, $user_id);\n        // APNSに蹴られたとしても、例外を返さない。エラーは無視する\n\n        return $sent_status[0]['sent_status'];\n    }\n    /**\n     * キューに溜めたジョブを処理し、ジョブのメッセージを送信します。\n     *\n     * @param job\n     * @return failed_messsage_ids\n     *\n     */\n    public static function send_queued_notifications($job, $user_id=null)\n    {\n        $results = array();\n\n        $job_id = $job['id'];\n\n        // 送信対象のuser_idを取得する\n        // TODO 全user_id（機能停止除く）を取得するか，単独のuserに送るようにしか作ってない\n        $target_users = ($user_id ? array(Model_Datasource_User::find_by_user_id($user_id)) : Model_Datasource_User::find_all(FALSE));\n        $target_user_count =  (self::$APNS_NOTIFICATION_LIMIT - 1 + count($target_users)) / self::$APNS_NOTIFICATION_LIMIT;\n        for ($i = 0; $i < $target_user_count; $i++)\n        {\n            $sent_status_results = array();\n\n            $notification = self::create_notification_from($job);\n            $users = array_slice($target_users, $i * self::$APNS_NOTIFICATION_LIMIT, self::$APNS_NOTIFICATION_LIMIT);\n            foreach ($users as $user)\n            {\n                $user_id = $user['user_id'];\n                $device_token = '';\n                $device_tokens = Model_Datasource_UserDeviceToken::find_by_user_id($user_id);\n                if ( ! empty($device_tokens))\n                {\n                    $device_token = $device_tokens[0]['device_token'];\n                    // メッセージをApnsPHP_Messageに変換する\n                    $notification->addRecipient($device_token);\n\n                    $sent_status_results[] = array(\n                        'user_id' => $user_id,\n                        'device_token' => $device_token,\n                        'sent_status' => Constants::$NOTIFICATION_STATUS_UNSEND,\n                    );\n                }\n                else\n                {\n                    // TODO device_tokenなし．ログ吐く？\n                }\n            }\n\n            // pushオブジェクトを作成\n            $push = self::get_apns_push();\n            // 送信先が1つもなければsendしない\n            if ($notification->getRecipientsNumber() != 0)\n            {\n                $push->add($notification);\n                $push->connect();\n                try {\n                    $push->send();\n                } catch (ApnsPHP_Push_Exception $push_exception) {\n                    // TODO ログに残す。1件もメッセージが入ってないときなどがこれにあたる\n                    throw $push_exception;\n                }\n                // $APNS_NOTIFICATION_LIMIT件送ったので接続を切る\n                $push->disconnect();\n            }\n            $an_error_queue = $push->getErrors(); // エラーになったメッセージを確認\n            // TODO エラーを確認し，invalidなものを確認．DBから腐ったデバイストークンを削除する．\n            $failed_users = self::get_failed_users_from($sent_status_results, $an_error_queue);\n            foreach ($sent_status_results as $sent_status)\n            {\n                if (self::in_array($sent_status['user_id'], $failed_users))\n                {\n                    $sent_status['sent_status'] = Constants::$NOTIFICATION_STATUS_ERROR;\n                }\n                else\n                {\n                    $sent_status['sent_status'] = Constants::$NOTIFICATION_STATUS_SENT;\n                }\n                $results[] = $sent_status;\n            }\n        }\n        Model_Logic_NotificationJob::update_published_status($job_id, Constants::$NOTIFICATION_JOB_STATUS_PUBLISHED);\n\n        return $results;\n    }\n\n    public static function get_scheduled_jobs()\n    {\n        return Model_Datasource_NotificationJob::find_to_be_published();\n    }\n\n    public static function get_notification_job($publish_at, $title, $content)\n    {\n        $job = null;\n\n        $new_data = array(\n            'title' => $title,\n            'message' => $content,\n            'publish_at' => $publish_at,\n\n        );\n        $job_id = Model_Logic_NotificationJob::create($new_data);\n        $job = Model_Datasource_NotificationJob::find_by_id($job_id);\n        return $job;\n    }\n\n    public static function get_notification_job_by_id($job_id)\n    {\n        return Model_Datasource_NotificationJob::find_by_id($job_id);\n    }\n\n    private static function create_notification_from($job)\n    {\n        $message_content = $job['message'];\n        $notification = new ApnsPHP_Message();\n        // $message->setCustomIdentifier(sprintf(\"Message-Badge-%03d\", $i));\n        // $message->setBadge(3);\n        // $notification->setTitle($message_title); // APNSにはタイトルを設定できない。\n        $notification->setText($message_content);\n\n        return $notification;\n    }\n\n    private static function get_apns_push()\n    {\n        return new ApnsPHP_Push(\n            ApnsPHP_Abstract::ENVIRONMENT_SANDBOX,\n            APPPATH.'/config/development/'.'hiroie_push_develop.pem'\n        );\n    }\n\n    /**\n    * an_error_queueには送信できなかったメッセージの番号が飛び飛びに入っている（1, 3,10,...)ため、\n    * それをもとにuser_idのうち送信できなかったものを取り出す。\n    */\n    private static function get_failed_users_from($users, $an_error_queue)\n    {\n        $failed_users = array();\n        if ( ! empty($an_error_queue))\n        {\n            foreach ($an_error_queue as $info)\n            {\n                if (isset($info['ERRORS']))\n                {\n                    foreach ($info['ERRORS'] as $error)\n                    {\n                        if (isset($error['statusMessage']) && $error['statusCode'] == '8') // Invalid Token\n                        {\n                            // 送れなかったuser\n                            $failed_user =  $users[$error['identifier'] - 1];\n                            $failed_users[]= $failed_user;\n                        }\n                    }\n                }\n            }\n        }\n        return $failed_users;\n    }\n\n    private static function in_array($user_id, $user_array)\n    {\n        foreach($user_array as $user)\n        {\n            if ($user_id === $user['user_id'])\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n\n}\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":14},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[{"patches":[{"oldRange":[[0,1],[0,2]],"newRange":[[0,1],[0,1]],"oldText":"o","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,0],[0,1]],"newRange":[[0,0],[0,0]],"oldText":"t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"properties":{"type":"selection","editorId":14,"goalBufferRange":null}},"newParams":{"properties":{"type":"selection","editorId":14}},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"}],"deserializer":"History"},"filePath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/util/notification.php","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"390962ad3e5320ece51979b1068748d98f51e8e9","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":14,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":15,"softWrap":false,"editorWidthInChars":206,"tokenizedBuffer":{"bufferPath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/util/notification.php","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/util/notification.php","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/util/notification.php":1397560046752},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":8262},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/util/notification.php","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200},"find-and-replace":{"viewState":{"findHistory":["    ","pem","    ","dista","publish_"],"replaceHistory":["\\t"],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}}}}}