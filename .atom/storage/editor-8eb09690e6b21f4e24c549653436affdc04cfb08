{"mode":"editor","version":1,"windowDimensions":{"x":781,"y":34,"width":1023,"height":1024},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop","buffers":[{"text":"<?php\n\nclass Util_Message\n{\n\n    //FIXME アプリ向けメッセージをちゃんと検討する\n    private static $error_messages = array(\n        //Account\n        'A001-E' => array('指定されたユーザ情報が存在しません。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'A002-E' => array('指定された電話番号は異なるユーザで登録済みです。',\n                          '入力された電話番号は登録済みです。入力した電話番号が正しいかお確かめください。'),\n        'A003-E' => array('指定された電話番号を持つユーザ情報は存在しません。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'A004-E' => array('指定された電話番号を持つユーザ情報が2件以上存在します。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'A005-E' => array('パスワードが一致しません。',\n                          '電話番号またはパスワードに誤りがあります。'),\n        'A006-E' => array('全ての荷物が取り出し済みでないため退会処理に失敗しました。',\n                          '退会するには全てのお荷物を取り出す必要があります。HOME画面より取り出し依頼を行ってください。'),\n        'A007-E' => array('完了していない依頼があるため退会処理に失敗しました。',\n                          '未完了の収納依頼または取り出し依頼があるため退会処理に失敗しました。全てのお荷物を引き出し済の場合は、ヒロイエ運営事務局までお問い合わせください。'),\n        'A008-E' => array('プロモーションコード再生成回数が規定以上に達しました。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'A009-E' => array('有効な認証コードが複数存在します。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'A010-E' => array('指定された電話番号は既に登録されています。',\n                          '入力された電話番号は登録済みです。入力した電話番号が正しいかお確かめください。'),\n        'A011-E' => array('認証番号が正しくありません。',\n                          '認証番号が正しくありません。認証番号をお確かめください。'),\n        'A012-E' => array('認証番号の有効期限が切れています。',\n                          '認証番号の有効期限が切れています。認証番号を再取得してください。'),\n        'A013-E' => array('認証番号の送信に失敗しました。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'A014-E' => array('会員登録時の入力エラー',\n                          '会員情報に未入力もしくは不正な項目があります。'),\n\n        //Baggage\n        'B001-E' => array('荷物情報が空です',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'B002-E' => array('荷物情報が空です。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'B003-E' => array('荷物情報の数と写真情報の数が一致しません。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'B004-E' => array('不正な依頼ステータスが指定されました。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'B005-E' => array('更新対象の荷物情報が存在しません。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'B006-E' => array('[SECURITY_ALERT]更新対象の荷物情報のユーザIDとログインユーザIDが一致しません。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'B007-E' => array('指定された荷物情報が存在しません。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'B008-E' => array('指定された依頼情報が存在しません。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'B009-E' => array('[SECURITY_ALERT]更新対象の荷物情報のユーザIDとログインユーザIDが一致しません。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'B010-E' => array('引き取り日時の値が不正です。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'B011-E' => array('[SECURITY_ALERT]更新対象の依頼情報のユーザIDとログインユーザIDが一致しません。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'B012-E' => array('お届け日時の値が不正です。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        //Campaign\n        'C001-E' => array('指定されたクーポンコードは存在しません。',\n                          '無効なクーポンです。'),\n        'C002-E' => array('クーポンコードの有効期限が切れています。',\n                          'クーポンの有効期限が切れています。'),\n        'C003-E' => array('指定されたプロモーションコードは存在しません。',\n                          '無効なクーポンです。'),\n        'C004-E' => array('プロモーションコードの有効期限が切れています。',\n                          'クーポンの有効期限が切れています。'),\n        'C005-E' => array('同じクーポンコードが複数のキャンペーンで重複しています。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'C006-E' => array('[BUG]クーポンコードの先頭文字が不正です。',\n                          '無効なクーポンです。'),\n        'C007-E' => array('[BUG]クーポンコードが指定されていません。',\n                          '無効なクーポンです。'),\n        //Charge\n        'D001-E' => array('指定された日時の税率情報が存在しません。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'D002-E' => array('指定された日時の税率情報が複数存在します。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'D003-E' => array('指定された荷物タイプの情報が存在しません。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'D004-E' => array('指定された荷物タイプの送料情報が存在しません。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'D005-E' => array('パラメータが不正です。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n\n        //Contract\n        'E001-E' => array('指定されたユーザの契約情報は存在しません。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'E002-E' => array('指定されたユーザの契約情報が2件以上存在します。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'E003-E' => array('指定されたスペースIDの収納スペース情報が存在しません。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'E004-E' => array('指定された契約IDの契約情報が存在しません。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'E005-E' => array('指定された日時の契約情報が存在しません。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'E006-E' => array('[SECURITY_ALERT]更新対象の契約情報のユーザIDとログインユーザIDが一致しません。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'E007-E' => array('パラメータが不正です。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n\n        //Paygent\n        'F001-E' => array('ペイジェントへの要求送信エラー',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'F002-E' => array('カード番号・有効期限の誤り（ハイフン等抜きの最大16桁）、限度額超えなどの理由によりカードの登録が出来ません。',\n                          'カード番号・有効期限の誤り（ハイフン等抜きの最大16桁）、限度額超えなどの理由によりカードの登録が出来ません。入力したカード情報が正しいかお確かめください。'),\n\n        //Photo\n        'G001-E' => array('指定された写真グループ情報が存在しません。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'G002-E' => array('写真情報が空のため写真情報の登録に失敗しました',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'G003-E' => array('写真ファイル名が空のため写真情報の登録に失敗しました',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'G004-E' => array('写真情報のパスが空のため写真情報の登録に失敗しました',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n\n        //Space\n        'H001-E' => array('指定されたIDの収納スペース情報は存在しません。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n\n        //Message\n        'I001-E' => array('指定されたIDのメッセージ情報は存在しません。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'I002-E' => array('不正なメッセージタイプです。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n        'I003-E' => array('[SECURITY_ALERT]更新対象のメッセージ情報のユーザIDとログインユーザIDが一致しません。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n\n        // API\n        'J001-E' => array('[SECURITY_ALERT]正規のヘッダー情報を含まないリクエストです',\n                          '正規のアプリからアクセスしてください。'),\n        'J002-E' => array('認証済みセッションが存在しません',\n                          'セッションが切れました。お手数ですが再度ログインしてください。'),\n        'J003-E' => array('不正なリクエストです。',\n                          '入力内容をご確認の上、再度お試しください。'),\n        'J004-E' => array('サーバ内部の何らかのエラーが発生しました',\n                          '大変申し訳ございませんが、何らかの事由により正常に処理が行われませんでした。時間を置いて再度お試しください。'),\n        'J005-E' => array('[SECURITY_ALERT]HTTPS通信ではありません',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n    );\n\n    private static $notify_messages = array(\n        'N001-M' => array(\n            'title'     => '契約完了',\n            'sub_title' => '',\n            'message'   => '契約が完了しました。'\n        ),\n        'N010-M' => array(\n            'title'     => 'プロモーションコード利用通知',\n            'sub_title' => '',\n            'message'   => 'あなたのプロモーションコードが誰かに使われた。'\n        ),\n        'N020-M' => array(\n            'title'     => '収納依頼:受付完了',\n            'sub_title' => '',\n            'message'   => '収納依頼を受け付けました。'\n        ),\n        'N021-M' => array(\n            'title'     => '収納依頼:日時確定',\n            'sub_title' => '',\n            'message'   => '引き取り日時を確定しました。'\n        ),\n        'N022-M' => array(\n            'title'     => '収納依頼:準備中',\n            'sub_title' => '',\n            'message'   => '予約'\n        ),\n        'N023-M' => array(\n            'title'     => '収納依頼:進行中',\n            'sub_title' => '',\n            'message'   => '予約'\n        ),\n        'N024-M' => array(\n            'title'     => '収納依頼:完了',\n            'sub_title' => '',\n            'message'   => '収納が完了しました。'\n        ),\n        'N025-M' => array(\n            'title'     => '収納依頼:キャンセル',\n            'sub_title' => '',\n            'message'   => '収納依頼をキャンセルしました。'\n        ),\n        'N026-M' => array(\n            'title'     => '収納依頼:不在通知',\n            'sub_title' => '',\n            'message'   => '引き取りに伺いましたがいませんでした。'\n        ),\n        'N027-M' => array(\n            'title'     => '収納依頼:クレジットカードエラー',\n            'sub_title' => '',\n            'message'   => 'クレジットカード処理に失敗しました。'\n        ),\n        'N030-M' => array(\n            'title'     => '取り出し依頼:受付完了',\n            'sub_title' => '',\n            'message'   => '取り出し依頼を受け付けました。'\n        ),\n        'N031-M' => array(\n            'title'     => '取り出し依頼:日時確定',\n            'sub_title' => '',\n            'message'   => 'お届け日時を確定しました。'\n        ),\n        'N032-M' => array(\n            'title'     => '取り出し依頼:準備中',\n            'sub_title' => '',\n            'message'   => '予約'\n        ),\n        'N033-M' => array(\n            'title'     => '取り出し依頼:進行中',\n            'sub_title' => '',\n            'message'   => '予約'\n        ),\n        'N034-M' => array(\n            'title'     => '取り出し依頼:完了',\n            'sub_title' => '',\n            'message'   => 'お届けが完了しました。'\n        ),\n        'N035-M' => array(\n            'title'     => '取り出し依頼:キャンセル',\n            'sub_title' => '',\n            'message'   => '取り出し依頼をキャンセルしました。'\n        ),\n        'N036-M' => array(\n            'title'     => '取り出し依頼:クレジットカードエラー',\n            'sub_title' => '',\n            'message'   => 'クレジットカード処理に失敗しました。'\n        ),\n        'N037-M' => array(\n            'title'     => '取り出し依頼:不在通知',\n            'sub_title' => '',\n            'message'   => 'お届けに伺いましたがいませんでした。'\n        ),\n    );\n\n    private static $push_messages = array(\n        'P001-M' => array(\n            'message' => ' さんがあなたの招待からヒロイエを使い始めました！',\n        ),\n        'P002-M' => array(\n            'message' => '引き取り日時を確定致しました。詳細は「お知らせ」をご確認ください',\n        ),\n        'P003-M' => array(\n            'message' => 'お届け日時を確定致しました。詳細は「お知らせ」をご確認ください',\n        ),\n        'P004-M' => array(\n            'message' => '引き取りに伺いましたがご不在でした。',\n        ),\n        'P005-M' => array(\n            'message' => 'お届けに伺いましたがご不在でした。',\n        ),\n        'P006-M' => array(\n            'message' => 'お預かりしたお荷物を倉庫に保管致しました。マイルーム画面をご確認ください。',\n        ),\n\n    );\n\n    public static function get_system_message($key)\n    {\n        return Util_Message::$error_messages[$key][0];\n    }\n\n    public static function get_app_message($key)\n    {\n        return Util_Message::$error_messages[$key][1];\n    }\n\n    public static function get_notify_message($key)\n    {\n        return Util_Message::$notify_messages[$key];\n    }\n\n    public static function get_push_message($key)\n    {\n        return Util_Message::$push_messages[$key];\n    }\n}","markers":{"markers":{"1":{"id":1,"range":[[9,16],[9,16]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":11983,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[86,0],[88,0]],"newRange":[[86,0],[86,0]],"oldText":"        'D005-E' => array('パラメータが不正です。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[100,0],[102,0]],"newRange":[[100,0],[100,0]],"oldText":"        'E007-E' => array('パラメータが不正です。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[137,0],[137,0]],"newRange":[[137,0],[140,0]],"oldText":"","newText":"\t\t\t              '大変申し訳ございませんが、何らかの事由により正常に処理が行われませんでした。時間を置いて再度お試しください。'),\n\t\t'J005-E' => array('[SECURITY_ALERT]HTTPS通信ではありません',\n\t\t\t              'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[140,0],[143,0]],"newRange":[[140,0],[140,0]],"oldText":"                          '大変申し訳ございませんが、何らかの事由により正常に処理が行われませんでした。時間を置いて再度お試しください。'),\n        'J005-E' => array('[SECURITY_ALERT]HTTPS通信ではありません',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[235,0],[257,0]],"newRange":[[235,0],[235,0]],"oldText":"    private static $push_messages = array(\n        'P001-M' => array(\n            'message' => ' さんがあなたの招待からヒロイエを使い始めました！',\n        ),\n        'P002-M' => array(\n            'message' => '引き取り日時を確定致しました。詳細は「お知らせ」をご確認ください',\n        ),\n        'P003-M' => array(\n            'message' => 'お届け日時を確定致しました。詳細は「お知らせ」をご確認ください',\n        ),\n        'P004-M' => array(\n            'message' => '引き取りに伺いましたがご不在でした。',\n        ),\n        'P005-M' => array(\n            'message' => 'お届けに伺いましたがご不在でした。',\n        ),\n        'P006-M' => array(\n            'message' => 'お預かりしたお荷物を倉庫に保管致しました。マイルーム画面をご確認ください。',\n        ),\n\n    );\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[249,0],[254,0]],"newRange":[[249,0],[249,0]],"oldText":"\n    public static function get_push_message($key)\n    {\n        return Util_Message::$push_messages[$key];\n    }\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[86,0],[86,0]],"newRange":[[86,0],[88,0]],"oldText":"","newText":"        'D005-E' => array('パラメータが不正です。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[102,0],[102,0]],"newRange":[[102,0],[104,0]],"oldText":"","newText":"        'E007-E' => array('パラメータが不正です。',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[141,0],[141,0]],"newRange":[[141,0],[144,0]],"oldText":"","newText":"                          '大変申し訳ございませんが、何らかの事由により正常に処理が行われませんでした。時間を置いて再度お試しください。'),\n        'J005-E' => array('[SECURITY_ALERT]HTTPS通信ではありません',\n                          'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[144,0],[147,0]],"newRange":[[144,0],[144,0]],"oldText":"\t\t\t              '大変申し訳ございませんが、何らかの事由により正常に処理が行われませんでした。時間を置いて再度お試しください。'),\n\t\t'J005-E' => array('[SECURITY_ALERT]HTTPS通信ではありません',\n\t\t\t              'システムエラーが発生しました。ヒロイエ運営事務局までお問い合わせください。'),\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[239,0],[239,0]],"newRange":[[239,0],[261,0]],"oldText":"","newText":"    private static $push_messages = array(\n        'P001-M' => array(\n            'message' => ' さんがあなたの招待からヒロイエを使い始めました！',\n        ),\n        'P002-M' => array(\n            'message' => '引き取り日時を確定致しました。詳細は「お知らせ」をご確認ください',\n        ),\n        'P003-M' => array(\n            'message' => 'お届け日時を確定致しました。詳細は「お知らせ」をご確認ください',\n        ),\n        'P004-M' => array(\n            'message' => '引き取りに伺いましたがご不在でした。',\n        ),\n        'P005-M' => array(\n            'message' => 'お届けに伺いましたがご不在でした。',\n        ),\n        'P006-M' => array(\n            'message' => 'お預かりしたお荷物を倉庫に保管致しました。マイルーム画面をご確認ください。',\n        ),\n\n    );\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[275,0],[275,0]],"newRange":[[275,0],[280,0]],"oldText":"","newText":"\n    public static function get_push_message($key)\n    {\n        return Util_Message::$push_messages[$key];\n    }\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/util/message.php","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"8fae06d2530ba242f6ce94154cd084975db9d864","deserializer":"TextBuffer"},{"text":"<?php\n/**\n * Controller_Api_User_Registrations class tests\n *   fuel/app/classes/controller/api/user/registrations.php\n * @group App\n * @group API\n */\nclass Test_Controller_Api_User_Registrations extends Test_Controller_Api_Base\n{\n    // override\n    protected $is_include_db_test = TRUE;\n\n    // テスト用の、実際には存在しない電話番号\n    const PHONE_NUMBER = '12311223344';\n\t// テスト用paymentID\n\tconst PAYMENT_ID = 123456789;\n\n    /**\n     * Post_index()\n     */\n    public function test_post_index_normal()\n    {\n        $expected = 200;\n\n        $json = self::get_json('registrations_normal.json');\n        $request = Request::forge(self::get_url('api/user/v1/registrations'), 'curl')\n            ->set_method('POST')\n            ->set_header('api_key', self::get_api_key())\n            ->set_header('Content-Type', 'application/json')\n            ->set_params($json);\n\n        $response = $request->execute()->response();\n\t\t$body = $response->body;\n\n        $this->assertNotNull($response);\n        $this->assertEquals($expected, $response->status);\n        $this->assertTrue(array_key_exists('user', $body));\n        $this->assertEquals(self::PHONE_NUMBER, $body['user']['phonenumber']);\n\n\t\t// レスポンスを検証（自明なものはテストしない）\n\t\t$this->assertInternalType('int', $body['user']['user_id']);\n\t\t$this->assertInternalType('int', $body['user']['space_type_id']);\n\t\t$this->assertInternalType('string', $body['user']['filled_space_size']);\n\t\t$this->assertInternalType('string', $body['user']['filled_number_of_tatami']);\n\t\t$this->assertInternalType('int', $body['user']['card_exp_year']);\n\t\t$this->assertInternalType('int', $body['user']['card_exp_month']);\n\t\t$this->assertInternalType('string', $body['user']['card_last4']);\n\n        // DBの中を確認\n        $users = Model_Datasource_User::find_by_telephone(self::PHONE_NUMBER);\n        $this->assertCount(1, $users);\n\t\t$this->assertEquals(self::PAYMENT_ID, $users[0]['customer_card_id']);\n    }\n\n    /**\n     * post_index()\n     * 電話番号を重複登録した場合\n     */\n    public function test_post_index_duplicate_phonenumber()\n    {\n        $curl = new MyCurl();\n        $json = self::get_json('registrations_duplicate.json');\n        $params = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => json_decode($json),\n        );\n        $result = $curl->post_json($params);\n        $this->assertEquals(400, $result['http_status'],  $result['output']['messages'][0]);\n    }\n\n\n    /**\n     * Post_index()\n     * 一部を空にした場合\n     */\n    public function test_post_index_normal_with_some_loss()\n    {\n        $curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params_normal =  json_decode($json, true); // trueにすると連想配列を作る\n        foreach ($params_normal as $key => $value) // 1つだけ消したバージョンを7とおりつくる\n        {\n            $params = self::copy_array($params_normal);\n            $params[$key] = '';\n            $inputs = array(\n                'url' => self::get_url('api/user/v1/registrations'),\n                'http' => $params,\n            );\n            $result = $curl->post_json($inputs);\n            $this->assertEquals(400, $result['http_status'],  $key);\n            $this->assertEquals(Util_Message::get_app_message('A014-E'), $result['output']['messages'][0]);\n\n\n            // DBの中を確認\n            $users = Model_Datasource_User::find_by_telephone(self::PHONE_NUMBER);\n            $this->assertCount(0, $users);\n        }\n    }\n\n\n    /**\n     * Post_index()\n     * クーポンがフォーマット不正の場合\n     */\n    public function test_post_index_normal_with_wrong_format_coupon()\n    {\n        $curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params =  json_decode($json, true); // trueにすると連想配列を作る\n        $params['coupon_code'] = '不正なクーポンコード';\n        $inputs = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => $params,\n        );\n        $result = $curl->post_json($inputs);\n        $this->assertEquals(400, $result['http_status']);\n        $this->assertEquals(Util_Message::get_app_message('A014-E'), $result['output']['messages'][0]);\n    }\n\n    /**\n     * Post_index()\n     * クーポンが存在しない場合\n     */\n    public function test_post_index_normal_with_wrong_coupon()\n    {\n        $curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params =  json_decode($json, true); // trueにすると連想配列を作る\n        $params['coupon_code'] = 'Cwrong';\n        $inputs = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => $params,\n        );\n        $result = $curl->post_json($inputs);\n        $this->assertEquals(400, $result['http_status']);\n        $this->assertEquals(Util_Message::get_app_message('C001-E'), $result['output']['messages'][0]);\n    }\n\n\t/**\n\t * post_index()\n\t * m_campaignのクーポンの有効期限が切れている場合\n\t */\n\tpublic function test_post_index_normal_with_expired_coupon()\n\t{\n\t\t$curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params =  json_decode($json, true); // trueにすると連想配列を作る\n        $params['coupon_code'] = 'Ceeddff';\n        $inputs = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => $params,\n        );\n        $result = $curl->post_json($inputs);\n        $this->assertEquals(400, $result['http_status']);\n        $this->assertEquals(Util_Message::get_app_message('C002-E'), $result['output']['messages'][0]);\n\t}\n\n    private static function copy_array($array)\n    {\n        $new_array = $array; // PHP way to copy array\n        return $new_array;\n    }\n\n}\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":12512,"goalBufferRange":null,"autoscroll":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[60,0],[61,0]],"newRange":[[60,0],[60,0]],"oldText":"<<<<<<< HEAD\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[61,0],[80,0]],"newRange":[[61,0],[61,0]],"oldText":"=======\n        // ユーザデータ生成\n        $now       = date('Y/m/d H:i:s', time());\n        $password  = 'fake_password';\n        $user_data = array(\n            'user_name'         => 'test_create',\n            'telephone'         => self::PHONE_NUMBER,\n            'password'          => $password,\n            'customer_card_id'        => 1000000,\n            'registered_date'   => $now,\n            'card_last4'        => mb_substr('123456789012', -4),\n            'card_expire_year'  => '2015',\n            'card_expire_month' => '11',\n        );\n        // テーブルに登録\n        Model_Datasource_User::create($user_data);\n\n        // 同じ電話番号で登録リクエストを送る\n>>>>>>> develop_api\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[19,0],[19,0]],"newRange":[[19,0],[20,0]],"oldText":"","newText":"     * @group target\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[33,0],[34,0]],"newRange":[[33,0],[33,0]],"oldText":"\t\t$body = $response->body;\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[36,0],[36,0]],"newRange":[[36,0],[41,0]],"oldText":"","newText":"        $this->assertTrue(array_key_exists('user', $response->body));\n        $this->assertEquals(self::PHONE_NUMBER, $response->body['user']['phonenumber']);\n        $this->assertEquals(1, $response->body['user']['space_type_id']);\n        $this->assertEquals('0.0', $response->body['user']['filled_space_size']);\n        $this->assertEquals('0.0', $response->body['user']['filled_number_of_tatami']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[41,0],[43,0]],"newRange":[[41,0],[41,0]],"oldText":"        $this->assertTrue(array_key_exists('user', $body));\n        $this->assertEquals(self::PHONE_NUMBER, $body['user']['phonenumber']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[42,0],[50,0]],"newRange":[[42,0],[42,0]],"oldText":"\t\t// レスポンスを検証（自明なものはテストしない）\n\t\t$this->assertInternalType('int', $body['user']['user_id']);\n\t\t$this->assertInternalType('int', $body['user']['space_type_id']);\n\t\t$this->assertInternalType('string', $body['user']['filled_space_size']);\n\t\t$this->assertInternalType('string', $body['user']['filled_number_of_tatami']);\n\t\t$this->assertInternalType('int', $body['user']['card_exp_year']);\n\t\t$this->assertInternalType('int', $body['user']['card_exp_month']);\n\t\t$this->assertInternalType('string', $body['user']['card_last4']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[19,0],[20,0]],"newRange":[[19,0],[19,0]],"oldText":"     * @group target\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[32,0],[32,0]],"newRange":[[32,0],[33,0]],"oldText":"","newText":"\t\t$body = $response->body;\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[36,0],[36,0]],"newRange":[[36,0],[38,0]],"oldText":"","newText":"        $this->assertTrue(array_key_exists('user', $body));\n        $this->assertEquals(self::PHONE_NUMBER, $body['user']['phonenumber']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[38,0],[43,0]],"newRange":[[38,0],[38,0]],"oldText":"        $this->assertTrue(array_key_exists('user', $response->body));\n        $this->assertEquals(self::PHONE_NUMBER, $response->body['user']['phonenumber']);\n        $this->assertEquals(1, $response->body['user']['space_type_id']);\n        $this->assertEquals('0.0', $response->body['user']['filled_space_size']);\n        $this->assertEquals('0.0', $response->body['user']['filled_number_of_tatami']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[39,0],[39,0]],"newRange":[[39,0],[47,0]],"oldText":"","newText":"\t\t// レスポンスを検証（自明なものはテストしない）\n\t\t$this->assertInternalType('int', $body['user']['user_id']);\n\t\t$this->assertInternalType('int', $body['user']['space_type_id']);\n\t\t$this->assertInternalType('string', $body['user']['filled_space_size']);\n\t\t$this->assertInternalType('string', $body['user']['filled_number_of_tatami']);\n\t\t$this->assertInternalType('int', $body['user']['card_exp_year']);\n\t\t$this->assertInternalType('int', $body['user']['card_exp_month']);\n\t\t$this->assertInternalType('string', $body['user']['card_last4']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[19,0],[19,0]],"newRange":[[19,0],[20,0]],"oldText":"","newText":"     * @group target\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[37,0],[37,0]],"newRange":[[37,0],[38,0]],"oldText":"","newText":"<<<<<<< HEAD\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[49,0],[49,0]],"newRange":[[49,0],[55,0]],"oldText":"","newText":"=======\n        $this->assertTrue(array_key_exists('user', $response->body));\n        $this->assertEquals(self::PHONE_NUMBER, $response->body['user']['phonenumber']);\n        $this->assertEquals(1, $response->body['user']['space_type_id']);\n        $this->assertEquals('0.0', $response->body['user']['filled_space_size']);\n        $this->assertEquals('0.0', $response->body['user']['filled_number_of_tatami']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[56,0],[56,0]],"newRange":[[56,0],[58,0]],"oldText":"","newText":">>>>>>> aef4404... テスト追加\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[37,0],[37,12]],"newRange":[[37,0],[37,0]],"oldText":"<<<<<<< HEAD","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[49,0],[49,7]],"newRange":[[49,0],[49,0]],"oldText":"=======","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[56,0],[56,24]],"newRange":[[56,0],[56,0]],"oldText":">>>>>>> aef4404... テスト追加","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[56,0],[56,0]]},"newParams":{"range":[[55,0],[56,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[55,0],[56,0]],"newRange":[[55,0],[55,0]],"oldText":"\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[56,0],[56,0]]},"newParams":{"range":[[55,0],[56,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[55,0],[56,0]],"newRange":[[55,0],[55,0]],"oldText":"\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[19,0],[20,0]],"newRange":[[19,0],[19,0]],"oldText":"     * @group target\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[36,0],[37,0]],"newRange":[[36,0],[36,0]],"oldText":"\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[48,0],[54,0]],"newRange":[[48,0],[48,0]],"oldText":"        $this->assertTrue(array_key_exists('user', $response->body));\n        $this->assertEquals(self::PHONE_NUMBER, $response->body['user']['phonenumber']);\n        $this->assertEquals(1, $response->body['user']['space_type_id']);\n        $this->assertEquals('0.0', $response->body['user']['filled_space_size']);\n        $this->assertEquals('0.0', $response->body['user']['filled_number_of_tatami']);\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[51,0],[51,0]],"newRange":[[51,0],[52,0]],"oldText":"","newText":"\t\t$this->assertEquals(self::PAYMENT_ID, $users[0]['customer_card_id']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[52,0],[53,0]],"newRange":[[52,0],[52,0]],"oldText":"\t\t$this->assertEquals(self::PAYMENT_ID, $users[0]['paygent_id']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[48,0],[48,0]],"newRange":[[48,0],[54,0]],"oldText":"","newText":"        $this->assertTrue(array_key_exists('user', $response->body));\n        $this->assertEquals(self::PHONE_NUMBER, $response->body['user']['phonenumber']);\n        $this->assertEquals(1, $response->body['user']['space_type_id']);\n        $this->assertEquals('0.0', $response->body['user']['filled_space_size']);\n        $this->assertEquals('0.0', $response->body['user']['filled_number_of_tatami']);\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[57,0],[57,0]],"newRange":[[57,0],[58,0]],"oldText":"","newText":"\t\t$this->assertEquals(self::PAYMENT_ID, $users[0]['paygent_id']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[58,0],[59,0]],"newRange":[[58,0],[58,0]],"oldText":"\t\t$this->assertEquals(self::PAYMENT_ID, $users[0]['customer_card_id']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[48,0],[54,0]],"newRange":[[48,0],[48,0]],"oldText":"        $this->assertTrue(array_key_exists('user', $response->body));\n        $this->assertEquals(self::PHONE_NUMBER, $response->body['user']['phonenumber']);\n        $this->assertEquals(1, $response->body['user']['space_type_id']);\n        $this->assertEquals('0.0', $response->body['user']['filled_space_size']);\n        $this->assertEquals('0.0', $response->body['user']['filled_number_of_tatami']);\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[51,0],[51,0]],"newRange":[[51,0],[52,0]],"oldText":"","newText":"\t\t$this->assertEquals(self::PAYMENT_ID, $users[0]['customer_card_id']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[52,0],[53,0]],"newRange":[[52,0],[52,0]],"oldText":"\t\t$this->assertEquals(self::PAYMENT_ID, $users[0]['paygent_id']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[48,0],[48,0]],"newRange":[[48,0],[54,0]],"oldText":"","newText":"        $this->assertTrue(array_key_exists('user', $response->body));\n        $this->assertEquals(self::PHONE_NUMBER, $response->body['user']['phonenumber']);\n        $this->assertEquals(1, $response->body['user']['space_type_id']);\n        $this->assertEquals('0.0', $response->body['user']['filled_space_size']);\n        $this->assertEquals('0.0', $response->body['user']['filled_number_of_tatami']);\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,0],[174,0]],"newRange":[[0,0],[0,0]],"oldText":"<?php\n/**\n * Controller_Api_User_Registrations class tests\n *   fuel/app/classes/controller/api/user/registrations.php\n * @group App\n * @group API\n */\nclass Test_Controller_Api_User_Registrations extends Test_Controller_Api_Base\n{\n    // override\n    protected $is_include_db_test = TRUE;\n\n    // テスト用の、実際には存在しない電話番号\n    const PHONE_NUMBER = '12311223344';\n\t// テスト用paymentID\n\tconst PAYMENT_ID = 123456789;\n\n    /**\n     * Post_index()\n     */\n    public function test_post_index_normal()\n    {\n        $expected = 200;\n\n        $json = self::get_json('registrations_normal.json');\n        $request = Request::forge(self::get_url('api/user/v1/registrations'), 'curl')\n            ->set_method('POST')\n            ->set_header('api_key', self::get_api_key())\n            ->set_header('Content-Type', 'application/json')\n            ->set_params($json);\n\n        $response = $request->execute()->response();\n\t\t$body = $response->body;\n\n        $this->assertNotNull($response);\n        $this->assertEquals($expected, $response->status);\n        $this->assertTrue(array_key_exists('user', $body));\n        $this->assertEquals(self::PHONE_NUMBER, $body['user']['phonenumber']);\n\n\t\t// レスポンスを検証（自明なものはテストしない）\n\t\t$this->assertInternalType('int', $body['user']['user_id']);\n\t\t$this->assertInternalType('int', $body['user']['space_type_id']);\n\t\t$this->assertInternalType('string', $body['user']['filled_space_size']);\n\t\t$this->assertInternalType('string', $body['user']['filled_number_of_tatami']);\n\t\t$this->assertInternalType('int', $body['user']['card_exp_year']);\n\t\t$this->assertInternalType('int', $body['user']['card_exp_month']);\n\t\t$this->assertInternalType('string', $body['user']['card_last4']);\n\n        $this->assertTrue(array_key_exists('user', $response->body));\n        $this->assertEquals(self::PHONE_NUMBER, $response->body['user']['phonenumber']);\n        $this->assertEquals(1, $response->body['user']['space_type_id']);\n        $this->assertEquals('0.0', $response->body['user']['filled_space_size']);\n        $this->assertEquals('0.0', $response->body['user']['filled_number_of_tatami']);\n\n        // DBの中を確認\n        $users = Model_Datasource_User::find_by_telephone(self::PHONE_NUMBER);\n        $this->assertCount(1, $users);\n\t\t$this->assertEquals(self::PAYMENT_ID, $users[0]['customer_card_id']);\n    }\n\n    /**\n     * post_index()\n     * 電話番号を重複登録した場合\n     */\n    public function test_post_index_duplicate_phonenumber()\n    {\n        $curl = new MyCurl();\n        $json = self::get_json('registrations_duplicate.json');\n        $params = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => json_decode($json),\n        );\n        $result = $curl->post_json($params);\n        $this->assertEquals(400, $result['http_status'],  $result['output']['messages'][0]);\n    }\n\n\n    /**\n     * Post_index()\n     * 一部を空にした場合\n     */\n    public function test_post_index_normal_with_some_loss()\n    {\n        $curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params_normal =  json_decode($json, true); // trueにすると連想配列を作る\n        foreach ($params_normal as $key => $value) // 1つだけ消したバージョンを7とおりつくる\n        {\n            $params = self::copy_array($params_normal);\n            $params[$key] = '';\n            $inputs = array(\n                'url' => self::get_url('api/user/v1/registrations'),\n                'http' => $params,\n            );\n            $result = $curl->post_json($inputs);\n            $this->assertEquals(400, $result['http_status'],  $key);\n            $this->assertEquals(Util_Message::get_app_message('A014-E'), $result['output']['messages'][0]);\n\n\n            // DBの中を確認\n            $users = Model_Datasource_User::find_by_telephone(self::PHONE_NUMBER);\n            $this->assertCount(0, $users);\n        }\n    }\n\n\n    /**\n     * Post_index()\n     * クーポンがフォーマット不正の場合\n     */\n    public function test_post_index_normal_with_wrong_format_coupon()\n    {\n        $curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params =  json_decode($json, true); // trueにすると連想配列を作る\n        $params['coupon_code'] = '不正なクーポンコード';\n        $inputs = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => $params,\n        );\n        $result = $curl->post_json($inputs);\n        $this->assertEquals(400, $result['http_status']);\n        $this->assertEquals(Util_Message::get_app_message('A014-E'), $result['output']['messages'][0]);\n    }\n\n    /**\n     * Post_index()\n     * クーポンが存在しない場合\n     */\n    public function test_post_index_normal_with_wrong_coupon()\n    {\n        $curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params =  json_decode($json, true); // trueにすると連想配列を作る\n        $params['coupon_code'] = 'Cwrong';\n        $inputs = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => $params,\n        );\n        $result = $curl->post_json($inputs);\n        $this->assertEquals(400, $result['http_status']);\n        $this->assertEquals(Util_Message::get_app_message('C001-E'), $result['output']['messages'][0]);\n    }\n\n\t/**\n\t * post_index()\n\t * m_campaignのクーポンの有効期限が切れている場合\n\t */\n\tpublic function test_post_index_normal_with_expired_coupon()\n\t{\n\t\t$curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params =  json_decode($json, true); // trueにすると連想配列を作る\n        $params['coupon_code'] = 'Ceeddff';\n        $inputs = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => $params,\n        );\n        $result = $curl->post_json($inputs);\n        $this->assertEquals(400, $result['http_status']);\n        $this->assertEquals(Util_Message::get_app_message('C002-E'), $result['output']['messages'][0]);\n\t}\n\n    private static function copy_array($array)\n    {\n        $new_array = $array; // PHP way to copy array\n        return $new_array;\n    }\n\n}\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[168,0]],"oldText":"","newText":"<?php\n/**\n * Controller_Api_User_Registrations class tests\n *   fuel/app/classes/controller/api/user/registrations.php\n * @group App\n * @group API\n */\nclass Test_Controller_Api_User_Registrations extends Test_Controller_Api_Base\n{\n    // override\n    protected $is_include_db_test = TRUE;\n\n    // テスト用の、実際には存在しない電話番号\n    const PHONE_NUMBER = '12311223344';\n\t// テスト用paymentID\n\tconst PAYMENT_ID = 123456789;\n\n    /**\n     * Post_index()\n     */\n    public function test_post_index_normal()\n    {\n        $expected = 200;\n\n        $json = self::get_json('registrations_normal.json');\n        $request = Request::forge(self::get_url('api/user/v1/registrations'), 'curl')\n            ->set_method('POST')\n            ->set_header('api_key', self::get_api_key())\n            ->set_header('Content-Type', 'application/json')\n            ->set_params($json);\n\n        $response = $request->execute()->response();\n\t\t$body = $response->body;\n\n        $this->assertNotNull($response);\n        $this->assertEquals($expected, $response->status);\n        $this->assertTrue(array_key_exists('user', $body));\n        $this->assertEquals(self::PHONE_NUMBER, $body['user']['phonenumber']);\n\n\t\t// レスポンスを検証（自明なものはテストしない）\n\t\t$this->assertInternalType('int', $body['user']['user_id']);\n\t\t$this->assertInternalType('int', $body['user']['space_type_id']);\n\t\t$this->assertInternalType('string', $body['user']['filled_space_size']);\n\t\t$this->assertInternalType('string', $body['user']['filled_number_of_tatami']);\n\t\t$this->assertInternalType('int', $body['user']['card_exp_year']);\n\t\t$this->assertInternalType('int', $body['user']['card_exp_month']);\n\t\t$this->assertInternalType('string', $body['user']['card_last4']);\n\n        // DBの中を確認\n        $users = Model_Datasource_User::find_by_telephone(self::PHONE_NUMBER);\n        $this->assertCount(1, $users);\n\t\t$this->assertEquals(self::PAYMENT_ID, $users[0]['customer_card_id']);\n    }\n\n    /**\n     * post_index()\n     * 電話番号を重複登録した場合\n     */\n    public function test_post_index_duplicate_phonenumber()\n    {\n        $curl = new MyCurl();\n        $json = self::get_json('registrations_duplicate.json');\n        $params = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => json_decode($json),\n        );\n        $result = $curl->post_json($params);\n        $this->assertEquals(400, $result['http_status'],  $result['output']['messages'][0]);\n    }\n\n\n    /**\n     * Post_index()\n     * 一部を空にした場合\n     */\n    public function test_post_index_normal_with_some_loss()\n    {\n        $curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params_normal =  json_decode($json, true); // trueにすると連想配列を作る\n        foreach ($params_normal as $key => $value) // 1つだけ消したバージョンを7とおりつくる\n        {\n            $params = self::copy_array($params_normal);\n            $params[$key] = '';\n            $inputs = array(\n                'url' => self::get_url('api/user/v1/registrations'),\n                'http' => $params,\n            );\n            $result = $curl->post_json($inputs);\n            $this->assertEquals(400, $result['http_status'],  $key);\n            $this->assertEquals(Util_Message::get_app_message('A014-E'), $result['output']['messages'][0]);\n\n\n            // DBの中を確認\n            $users = Model_Datasource_User::find_by_telephone(self::PHONE_NUMBER);\n            $this->assertCount(0, $users);\n        }\n    }\n\n\n    /**\n     * Post_index()\n     * クーポンがフォーマット不正の場合\n     */\n    public function test_post_index_normal_with_wrong_format_coupon()\n    {\n        $curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params =  json_decode($json, true); // trueにすると連想配列を作る\n        $params['coupon_code'] = '不正なクーポンコード';\n        $inputs = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => $params,\n        );\n        $result = $curl->post_json($inputs);\n        $this->assertEquals(400, $result['http_status']);\n        $this->assertEquals(Util_Message::get_app_message('A014-E'), $result['output']['messages'][0]);\n    }\n\n    /**\n     * Post_index()\n     * クーポンが存在しない場合\n     */\n    public function test_post_index_normal_with_wrong_coupon()\n    {\n        $curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params =  json_decode($json, true); // trueにすると連想配列を作る\n        $params['coupon_code'] = 'Cwrong';\n        $inputs = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => $params,\n        );\n        $result = $curl->post_json($inputs);\n        $this->assertEquals(400, $result['http_status']);\n        $this->assertEquals(Util_Message::get_app_message('C001-E'), $result['output']['messages'][0]);\n    }\n\n\t/**\n\t * post_index()\n\t * m_campaignのクーポンの有効期限が切れている場合\n\t */\n\tpublic function test_post_index_normal_with_expired_coupon()\n\t{\n\t\t$curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params =  json_decode($json, true); // trueにすると連想配列を作る\n        $params['coupon_code'] = 'Ceeddff';\n        $inputs = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => $params,\n        );\n        $result = $curl->post_json($inputs);\n        $this->assertEquals(400, $result['http_status']);\n        $this->assertEquals(Util_Message::get_app_message('C002-E'), $result['output']['messages'][0]);\n\t}\n\n    private static function copy_array($array)\n    {\n        $new_array = $array; // PHP way to copy array\n        return $new_array;\n    }\n\n}\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[7,0],[7,0]],"newRange":[[7,0],[8,0]],"oldText":"","newText":"class Test_Controller_Api_User_Rgistrations extends Test_Controller_Api_Base\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[8,0],[9,0]],"newRange":[[8,0],[8,0]],"oldText":"class Test_Controller_Api_User_Registrations extends Test_Controller_Api_Base\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[9,0],[9,0]],"newRange":[[9,0],[11,0]],"oldText":"","newText":"    protected $tables = array(\n    );\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[11,0],[13,0]],"newRange":[[11,0],[11,0]],"oldText":"    // override\n    protected $is_include_db_test = TRUE;\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[14,0],[16,0]],"newRange":[[14,0],[14,0]],"oldText":"\t// テスト用paymentID\n\tconst PAYMENT_ID = 123456789;\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[16,0],[16,0]],"newRange":[[16,0],[29,0]],"oldText":"","newText":"    * setup DB.\n    */\n    public function setup()\n    {\n        $this->cleanup_tables();\n    }\n\n    public function tearDown()\n    {\n        $this->cleanup_tables();\n    }\n\n    /**\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[30,0],[30,0]],"newRange":[[30,0],[32,0]],"oldText":"","newText":"     *\n     *\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[45,0],[46,0]],"newRange":[[45,0],[45,0]],"oldText":"\t\t$body = $response->body;\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[48,0],[48,0]],"newRange":[[48,0],[50,0]],"oldText":"","newText":"        $this->assertTrue(array_key_exists('user', $response->body));\n        $this->assertEquals(self::PHONE_NUMBER, $response->body['user']['phonenumber']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[50,0],[52,0]],"newRange":[[50,0],[50,0]],"oldText":"        $this->assertTrue(array_key_exists('user', $body));\n        $this->assertEquals(self::PHONE_NUMBER, $body['user']['phonenumber']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[51,0],[64,0]],"newRange":[[51,0],[51,0]],"oldText":"\t\t// レスポンスを検証（自明なものはテストしない）\n\t\t$this->assertInternalType('int', $body['user']['user_id']);\n\t\t$this->assertInternalType('int', $body['user']['space_type_id']);\n\t\t$this->assertInternalType('string', $body['user']['filled_space_size']);\n\t\t$this->assertInternalType('string', $body['user']['filled_number_of_tatami']);\n\t\t$this->assertInternalType('int', $body['user']['card_exp_year']);\n\t\t$this->assertInternalType('int', $body['user']['card_exp_month']);\n\t\t$this->assertInternalType('string', $body['user']['card_last4']);\n\n        // DBの中を確認\n        $users = Model_Datasource_User::find_by_telephone(self::PHONE_NUMBER);\n        $this->assertCount(1, $users);\n\t\t$this->assertEquals(self::PAYMENT_ID, $users[0]['customer_card_id']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[54,0],[54,0]],"newRange":[[54,0],[55,0]],"oldText":"","newText":"     * @expectedException RequestStatusException\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[55,0],[57,0]],"newRange":[[55,0],[55,0]],"oldText":"     * post_index()\n     * 電話番号を重複登録した場合\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[58,0],[58,0]],"newRange":[[58,0],[75,0]],"oldText":"","newText":"        // ユーザデータ生成\n        $now       = date('Y/m/d H:i:s', time());\n        $password  = 'fake_password';\n        $user_data = array(\n            'user_name'         => 'test_create',\n            'telephone'         => self::PHONE_NUMBER,\n            'password'          => $password,\n            'customer_card_id'        => 1000000,\n            'registered_date'   => $now,\n            'card_last4'        => mb_substr('123456789012', -4),\n            'card_expire_year'  => '2015',\n            'card_expire_month' => '11',\n        );\n        // テーブルに登録\n        Model_Datasource_User::create($user_data);\n\n        // 同じ電話番号で登録リクエストを送る\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[75,0],[76,0]],"newRange":[[75,0],[75,0]],"oldText":"        $curl = new MyCurl();\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[76,0],[76,0]],"newRange":[[76,0],[83,0]],"oldText":"","newText":"        $request = Request::forge(self::get_url('api/user/v1/registrations'), 'curl')\n            ->set_method('POST')\n            ->set_header('api_key', self::get_api_key())\n            ->set_header('Content-Type', 'application/json')\n            ->set_params($json);\n\n        $response = $request->execute()->response();\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[83,0],[89,0]],"newRange":[[83,0],[83,0]],"oldText":"        $params = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => json_decode($json),\n        );\n        $result = $curl->post_json($params);\n        $this->assertEquals(400, $result['http_status'],  $result['output']['messages'][0]);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[85,0],[86,0]],"newRange":[[85,0],[85,0]],"oldText":"\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[86,0],[86,0]],"newRange":[[86,0],[89,0]],"oldText":"","newText":"    * テスト用に投入した会員データ（電話番号がself::PHONE_NUMBERの会員）を削除するメソッド。\n    */\n    private function cleanup_tables()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[89,0],[93,0]],"newRange":[[89,0],[89,0]],"oldText":"     * Post_index()\n     * 一部を空にした場合\n     */\n    public function test_post_index_normal_with_some_loss()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[90,0],[90,0]],"newRange":[[90,0],[92,0]],"oldText":"","newText":"        $users = Model_Datasource_User::find_by_telephone(self::PHONE_NUMBER);\n        if ( ! empty($users))\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[92,0],[97,0]],"newRange":[[92,0],[92,0]],"oldText":"        $curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params_normal =  json_decode($json, true); // trueにすると連想配列を作る\n        foreach ($params_normal as $key => $value) // 1つだけ消したバージョンを7とおりつくる\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[93,0],[93,0]],"newRange":[[93,0],[105,0]],"oldText":"","newText":"            foreach ($users as $user)\n            {\n                $user_id = $user['user_id'];\n                DB::delete('t_contract_log')->execute();\n                DB::delete('t_contract')->where('user_id', $user_id)->execute();\n                DB::delete('t_request_log')->where('user_id', $user_id)->execute();\n                DB::delete('t_request')->where('user_id', $user_id)->execute();\n                DB::delete('t_message')->where('user_id', $user_id)->execute();\n                DB::delete('t_promotion')->where('user_id', $user_id)->execute();\n                DB::delete('t_sales')->where('user_id', $user_id)->execute();\n                DB::delete('t_user')->where('user_id', $user_id)->execute();\n            }\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[105,0],[119,0]],"newRange":[[105,0],[105,0]],"oldText":"            $params = self::copy_array($params_normal);\n            $params[$key] = '';\n            $inputs = array(\n                'url' => self::get_url('api/user/v1/registrations'),\n                'http' => $params,\n            );\n            $result = $curl->post_json($inputs);\n            $this->assertEquals(400, $result['http_status'],  $key);\n            $this->assertEquals(Util_Message::get_app_message('A014-E'), $result['output']['messages'][0]);\n\n\n            // DBの中を確認\n            $users = Model_Datasource_User::find_by_telephone(self::PHONE_NUMBER);\n            $this->assertCount(0, $users);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[107,0],[175,0]],"newRange":[[107,0],[107,0]],"oldText":"\n\n    /**\n     * Post_index()\n     * クーポンがフォーマット不正の場合\n     */\n    public function test_post_index_normal_with_wrong_format_coupon()\n    {\n        $curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params =  json_decode($json, true); // trueにすると連想配列を作る\n        $params['coupon_code'] = '不正なクーポンコード';\n        $inputs = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => $params,\n        );\n        $result = $curl->post_json($inputs);\n        $this->assertEquals(400, $result['http_status']);\n        $this->assertEquals(Util_Message::get_app_message('A014-E'), $result['output']['messages'][0]);\n    }\n\n    /**\n     * Post_index()\n     * クーポンが存在しない場合\n     */\n    public function test_post_index_normal_with_wrong_coupon()\n    {\n        $curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params =  json_decode($json, true); // trueにすると連想配列を作る\n        $params['coupon_code'] = 'Cwrong';\n        $inputs = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => $params,\n        );\n        $result = $curl->post_json($inputs);\n        $this->assertEquals(400, $result['http_status']);\n        $this->assertEquals(Util_Message::get_app_message('C001-E'), $result['output']['messages'][0]);\n    }\n\n\t/**\n\t * post_index()\n\t * m_campaignのクーポンの有効期限が切れている場合\n\t */\n\tpublic function test_post_index_normal_with_expired_coupon()\n\t{\n\t\t$curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params =  json_decode($json, true); // trueにすると連想配列を作る\n        $params['coupon_code'] = 'Ceeddff';\n        $inputs = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => $params,\n        );\n        $result = $curl->post_json($inputs);\n        $this->assertEquals(400, $result['http_status']);\n        $this->assertEquals(Util_Message::get_app_message('C002-E'), $result['output']['messages'][0]);\n\t}\n\n    private static function copy_array($array)\n    {\n        $new_array = $array; // PHP way to copy array\n        return $new_array;\n    }\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[7,0],[7,0]],"newRange":[[7,0],[8,0]],"oldText":"","newText":"class Test_Controller_Api_User_Registrations extends Test_Controller_Api_Base\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[8,0],[9,0]],"newRange":[[8,0],[8,0]],"oldText":"class Test_Controller_Api_User_Rgistrations extends Test_Controller_Api_Base\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[9,0],[9,0]],"newRange":[[9,0],[11,0]],"oldText":"","newText":"    // override\n    protected $is_include_db_test = TRUE;\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[11,0],[13,0]],"newRange":[[11,0],[11,0]],"oldText":"    protected $tables = array(\n    );\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[14,0],[14,0]],"newRange":[[14,0],[16,0]],"oldText":"","newText":"\t// テスト用paymentID\n\tconst PAYMENT_ID = 123456789;\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[18,0],[31,0]],"newRange":[[18,0],[18,0]],"oldText":"    * setup DB.\n    */\n    public function setup()\n    {\n        $this->cleanup_tables();\n    }\n\n    public function tearDown()\n    {\n        $this->cleanup_tables();\n    }\n\n    /**\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[19,0],[21,0]],"newRange":[[19,0],[19,0]],"oldText":"     *\n     *\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[32,0],[32,0]],"newRange":[[32,0],[33,0]],"oldText":"","newText":"\t\t$body = $response->body;\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[36,0],[36,0]],"newRange":[[36,0],[38,0]],"oldText":"","newText":"        $this->assertTrue(array_key_exists('user', $body));\n        $this->assertEquals(self::PHONE_NUMBER, $body['user']['phonenumber']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[38,0],[40,0]],"newRange":[[38,0],[38,0]],"oldText":"        $this->assertTrue(array_key_exists('user', $response->body));\n        $this->assertEquals(self::PHONE_NUMBER, $response->body['user']['phonenumber']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[39,0],[39,0]],"newRange":[[39,0],[52,0]],"oldText":"","newText":"\t\t// レスポンスを検証（自明なものはテストしない）\n\t\t$this->assertInternalType('int', $body['user']['user_id']);\n\t\t$this->assertInternalType('int', $body['user']['space_type_id']);\n\t\t$this->assertInternalType('string', $body['user']['filled_space_size']);\n\t\t$this->assertInternalType('string', $body['user']['filled_number_of_tatami']);\n\t\t$this->assertInternalType('int', $body['user']['card_exp_year']);\n\t\t$this->assertInternalType('int', $body['user']['card_exp_month']);\n\t\t$this->assertInternalType('string', $body['user']['card_last4']);\n\n        // DBの中を確認\n        $users = Model_Datasource_User::find_by_telephone(self::PHONE_NUMBER);\n        $this->assertCount(1, $users);\n\t\t$this->assertEquals(self::PAYMENT_ID, $users[0]['customer_card_id']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[55,0],[55,0]],"newRange":[[55,0],[57,0]],"oldText":"","newText":"     * post_index()\n     * 電話番号を重複登録した場合\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[57,0],[58,0]],"newRange":[[57,0],[57,0]],"oldText":"     * @expectedException RequestStatusException\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[60,0],[60,0]],"newRange":[[60,0],[65,0]],"oldText":"","newText":"        $curl = new MyCurl();\n        $json = self::get_json('registrations_duplicate.json');\n        $params = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => json_decode($json),\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[65,0],[77,0]],"newRange":[[65,0],[65,0]],"oldText":"        // ユーザデータ生成\n        $now       = date('Y/m/d H:i:s', time());\n        $password  = 'fake_password';\n        $user_data = array(\n            'user_name'         => 'test_create',\n            'telephone'         => self::PHONE_NUMBER,\n            'password'          => $password,\n            'customer_card_id'        => 1000000,\n            'registered_date'   => $now,\n            'card_last4'        => mb_substr('123456789012', -4),\n            'card_expire_year'  => '2015',\n            'card_expire_month' => '11',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[66,0],[66,0]],"newRange":[[66,0],[69,0]],"oldText":"","newText":"        $result = $curl->post_json($params);\n        $this->assertEquals(400, $result['http_status'],  $result['output']['messages'][0]);\n    }\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[69,0],[71,0]],"newRange":[[69,0],[69,0]],"oldText":"        // テーブルに登録\n        Model_Datasource_User::create($user_data);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[70,0],[77,0]],"newRange":[[70,0],[70,0]],"oldText":"        // 同じ電話番号で登録リクエストを送る\n        $json = self::get_json('registrations_duplicate.json');\n        $request = Request::forge(self::get_url('api/user/v1/registrations'), 'curl')\n            ->set_method('POST')\n            ->set_header('api_key', self::get_api_key())\n            ->set_header('Content-Type', 'application/json')\n            ->set_params($json);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[71,0],[74,0]],"newRange":[[71,0],[71,0]],"oldText":"        $response = $request->execute()->response();\n    }\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[72,0],[72,0]],"newRange":[[72,0],[76,0]],"oldText":"","newText":"     * Post_index()\n     * 一部を空にした場合\n     */\n    public function test_post_index_normal_with_some_loss()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[76,0],[79,0]],"newRange":[[76,0],[76,0]],"oldText":"    * テスト用に投入した会員データ（電話番号がself::PHONE_NUMBERの会員）を削除するメソッド。\n    */\n    private function cleanup_tables()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[77,0],[77,0]],"newRange":[[77,0],[82,0]],"oldText":"","newText":"        $curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params_normal =  json_decode($json, true); // trueにすると連想配列を作る\n        foreach ($params_normal as $key => $value) // 1つだけ消したバージョンを7とおりつくる\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[82,0],[84,0]],"newRange":[[82,0],[82,0]],"oldText":"        $users = Model_Datasource_User::find_by_telephone(self::PHONE_NUMBER);\n        if ( ! empty($users))\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[83,0],[83,0]],"newRange":[[83,0],[97,0]],"oldText":"","newText":"            $params = self::copy_array($params_normal);\n            $params[$key] = '';\n            $inputs = array(\n                'url' => self::get_url('api/user/v1/registrations'),\n                'http' => $params,\n            );\n            $result = $curl->post_json($inputs);\n            $this->assertEquals(400, $result['http_status'],  $key);\n            $this->assertEquals(Util_Message::get_app_message('A014-E'), $result['output']['messages'][0]);\n\n\n            // DBの中を確認\n            $users = Model_Datasource_User::find_by_telephone(self::PHONE_NUMBER);\n            $this->assertCount(0, $users);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[97,0],[109,0]],"newRange":[[97,0],[97,0]],"oldText":"            foreach ($users as $user)\n            {\n                $user_id = $user['user_id'];\n                DB::delete('t_contract_log')->execute();\n                DB::delete('t_contract')->where('user_id', $user_id)->execute();\n                DB::delete('t_request_log')->where('user_id', $user_id)->execute();\n                DB::delete('t_request')->where('user_id', $user_id)->execute();\n                DB::delete('t_message')->where('user_id', $user_id)->execute();\n                DB::delete('t_promotion')->where('user_id', $user_id)->execute();\n                DB::delete('t_sales')->where('user_id', $user_id)->execute();\n                DB::delete('t_user')->where('user_id', $user_id)->execute();\n            }\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[99,0],[99,0]],"newRange":[[99,0],[167,0]],"oldText":"","newText":"\n\n    /**\n     * Post_index()\n     * クーポンがフォーマット不正の場合\n     */\n    public function test_post_index_normal_with_wrong_format_coupon()\n    {\n        $curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params =  json_decode($json, true); // trueにすると連想配列を作る\n        $params['coupon_code'] = '不正なクーポンコード';\n        $inputs = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => $params,\n        );\n        $result = $curl->post_json($inputs);\n        $this->assertEquals(400, $result['http_status']);\n        $this->assertEquals(Util_Message::get_app_message('A014-E'), $result['output']['messages'][0]);\n    }\n\n    /**\n     * Post_index()\n     * クーポンが存在しない場合\n     */\n    public function test_post_index_normal_with_wrong_coupon()\n    {\n        $curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params =  json_decode($json, true); // trueにすると連想配列を作る\n        $params['coupon_code'] = 'Cwrong';\n        $inputs = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => $params,\n        );\n        $result = $curl->post_json($inputs);\n        $this->assertEquals(400, $result['http_status']);\n        $this->assertEquals(Util_Message::get_app_message('C001-E'), $result['output']['messages'][0]);\n    }\n\n\t/**\n\t * post_index()\n\t * m_campaignのクーポンの有効期限が切れている場合\n\t */\n\tpublic function test_post_index_normal_with_expired_coupon()\n\t{\n\t\t$curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params =  json_decode($json, true); // trueにすると連想配列を作る\n        $params['coupon_code'] = 'Ceeddff';\n        $inputs = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => $params,\n        );\n        $result = $curl->post_json($inputs);\n        $this->assertEquals(400, $result['http_status']);\n        $this->assertEquals(Util_Message::get_app_message('C002-E'), $result['output']['messages'][0]);\n\t}\n\n    private static function copy_array($array)\n    {\n        $new_array = $array; // PHP way to copy array\n        return $new_array;\n    }\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[7,0],[7,0]],"newRange":[[7,0],[8,0]],"oldText":"","newText":"class Test_Controller_Api_User_Rgistrations extends Test_Controller_Api_Base\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[8,0],[9,0]],"newRange":[[8,0],[8,0]],"oldText":"class Test_Controller_Api_User_Registrations extends Test_Controller_Api_Base\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[9,0],[9,0]],"newRange":[[9,0],[11,0]],"oldText":"","newText":"    protected $tables = array(\n    );\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[11,0],[13,0]],"newRange":[[11,0],[11,0]],"oldText":"    // override\n    protected $is_include_db_test = TRUE;\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[14,0],[16,0]],"newRange":[[14,0],[14,0]],"oldText":"\t// テスト用paymentID\n\tconst PAYMENT_ID = 123456789;\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[16,0],[16,0]],"newRange":[[16,0],[29,0]],"oldText":"","newText":"    * setup DB.\n    */\n    public function setup()\n    {\n        $this->cleanup_tables();\n    }\n\n    public function tearDown()\n    {\n        $this->cleanup_tables();\n    }\n\n    /**\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[30,0],[30,0]],"newRange":[[30,0],[32,0]],"oldText":"","newText":"     *\n     *\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[45,0],[46,0]],"newRange":[[45,0],[45,0]],"oldText":"\t\t$body = $response->body;\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[48,0],[48,0]],"newRange":[[48,0],[50,0]],"oldText":"","newText":"        $this->assertTrue(array_key_exists('user', $response->body));\n        $this->assertEquals(self::PHONE_NUMBER, $response->body['user']['phonenumber']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[50,0],[52,0]],"newRange":[[50,0],[50,0]],"oldText":"        $this->assertTrue(array_key_exists('user', $body));\n        $this->assertEquals(self::PHONE_NUMBER, $body['user']['phonenumber']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[51,0],[64,0]],"newRange":[[51,0],[51,0]],"oldText":"\t\t// レスポンスを検証（自明なものはテストしない）\n\t\t$this->assertInternalType('int', $body['user']['user_id']);\n\t\t$this->assertInternalType('int', $body['user']['space_type_id']);\n\t\t$this->assertInternalType('string', $body['user']['filled_space_size']);\n\t\t$this->assertInternalType('string', $body['user']['filled_number_of_tatami']);\n\t\t$this->assertInternalType('int', $body['user']['card_exp_year']);\n\t\t$this->assertInternalType('int', $body['user']['card_exp_month']);\n\t\t$this->assertInternalType('string', $body['user']['card_last4']);\n\n        // DBの中を確認\n        $users = Model_Datasource_User::find_by_telephone(self::PHONE_NUMBER);\n        $this->assertCount(1, $users);\n\t\t$this->assertEquals(self::PAYMENT_ID, $users[0]['customer_card_id']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[54,0],[54,0]],"newRange":[[54,0],[55,0]],"oldText":"","newText":"     * @expectedException RequestStatusException\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[55,0],[57,0]],"newRange":[[55,0],[55,0]],"oldText":"     * post_index()\n     * 電話番号を重複登録した場合\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[58,0],[58,0]],"newRange":[[58,0],[75,0]],"oldText":"","newText":"        // ユーザデータ生成\n        $now       = date('Y/m/d H:i:s', time());\n        $password  = 'fake_password';\n        $user_data = array(\n            'user_name'         => 'test_create',\n            'telephone'         => self::PHONE_NUMBER,\n            'password'          => $password,\n            'customer_card_id'        => 1000000,\n            'registered_date'   => $now,\n            'card_last4'        => mb_substr('123456789012', -4),\n            'card_expire_year'  => '2015',\n            'card_expire_month' => '11',\n        );\n        // テーブルに登録\n        Model_Datasource_User::create($user_data);\n\n        // 同じ電話番号で登録リクエストを送る\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[75,0],[76,0]],"newRange":[[75,0],[75,0]],"oldText":"        $curl = new MyCurl();\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[76,0],[76,0]],"newRange":[[76,0],[83,0]],"oldText":"","newText":"        $request = Request::forge(self::get_url('api/user/v1/registrations'), 'curl')\n            ->set_method('POST')\n            ->set_header('api_key', self::get_api_key())\n            ->set_header('Content-Type', 'application/json')\n            ->set_params($json);\n\n        $response = $request->execute()->response();\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[83,0],[89,0]],"newRange":[[83,0],[83,0]],"oldText":"        $params = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => json_decode($json),\n        );\n        $result = $curl->post_json($params);\n        $this->assertEquals(400, $result['http_status'],  $result['output']['messages'][0]);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[85,0],[86,0]],"newRange":[[85,0],[85,0]],"oldText":"\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[86,0],[86,0]],"newRange":[[86,0],[89,0]],"oldText":"","newText":"    * テスト用に投入した会員データ（電話番号がself::PHONE_NUMBERの会員）を削除するメソッド。\n    */\n    private function cleanup_tables()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[89,0],[93,0]],"newRange":[[89,0],[89,0]],"oldText":"     * Post_index()\n     * 一部を空にした場合\n     */\n    public function test_post_index_normal_with_some_loss()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[90,0],[90,0]],"newRange":[[90,0],[92,0]],"oldText":"","newText":"        $users = Model_Datasource_User::find_by_telephone(self::PHONE_NUMBER);\n        if ( ! empty($users))\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[92,0],[97,0]],"newRange":[[92,0],[92,0]],"oldText":"        $curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params_normal =  json_decode($json, true); // trueにすると連想配列を作る\n        foreach ($params_normal as $key => $value) // 1つだけ消したバージョンを7とおりつくる\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[93,0],[93,0]],"newRange":[[93,0],[105,0]],"oldText":"","newText":"            foreach ($users as $user)\n            {\n                $user_id = $user['user_id'];\n                DB::delete('t_contract_log')->execute();\n                DB::delete('t_contract')->where('user_id', $user_id)->execute();\n                DB::delete('t_request_log')->where('user_id', $user_id)->execute();\n                DB::delete('t_request')->where('user_id', $user_id)->execute();\n                DB::delete('t_message')->where('user_id', $user_id)->execute();\n                DB::delete('t_promotion')->where('user_id', $user_id)->execute();\n                DB::delete('t_sales')->where('user_id', $user_id)->execute();\n                DB::delete('t_user')->where('user_id', $user_id)->execute();\n            }\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[105,0],[119,0]],"newRange":[[105,0],[105,0]],"oldText":"            $params = self::copy_array($params_normal);\n            $params[$key] = '';\n            $inputs = array(\n                'url' => self::get_url('api/user/v1/registrations'),\n                'http' => $params,\n            );\n            $result = $curl->post_json($inputs);\n            $this->assertEquals(400, $result['http_status'],  $key);\n            $this->assertEquals(Util_Message::get_app_message('A014-E'), $result['output']['messages'][0]);\n\n\n            // DBの中を確認\n            $users = Model_Datasource_User::find_by_telephone(self::PHONE_NUMBER);\n            $this->assertCount(0, $users);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[107,0],[175,0]],"newRange":[[107,0],[107,0]],"oldText":"\n\n    /**\n     * Post_index()\n     * クーポンがフォーマット不正の場合\n     */\n    public function test_post_index_normal_with_wrong_format_coupon()\n    {\n        $curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params =  json_decode($json, true); // trueにすると連想配列を作る\n        $params['coupon_code'] = '不正なクーポンコード';\n        $inputs = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => $params,\n        );\n        $result = $curl->post_json($inputs);\n        $this->assertEquals(400, $result['http_status']);\n        $this->assertEquals(Util_Message::get_app_message('A014-E'), $result['output']['messages'][0]);\n    }\n\n    /**\n     * Post_index()\n     * クーポンが存在しない場合\n     */\n    public function test_post_index_normal_with_wrong_coupon()\n    {\n        $curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params =  json_decode($json, true); // trueにすると連想配列を作る\n        $params['coupon_code'] = 'Cwrong';\n        $inputs = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => $params,\n        );\n        $result = $curl->post_json($inputs);\n        $this->assertEquals(400, $result['http_status']);\n        $this->assertEquals(Util_Message::get_app_message('C001-E'), $result['output']['messages'][0]);\n    }\n\n\t/**\n\t * post_index()\n\t * m_campaignのクーポンの有効期限が切れている場合\n\t */\n\tpublic function test_post_index_normal_with_expired_coupon()\n\t{\n\t\t$curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params =  json_decode($json, true); // trueにすると連想配列を作る\n        $params['coupon_code'] = 'Ceeddff';\n        $inputs = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => $params,\n        );\n        $result = $curl->post_json($inputs);\n        $this->assertEquals(400, $result['http_status']);\n        $this->assertEquals(Util_Message::get_app_message('C002-E'), $result['output']['messages'][0]);\n\t}\n\n    private static function copy_array($array)\n    {\n        $new_array = $array; // PHP way to copy array\n        return $new_array;\n    }\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[7,0],[7,0]],"newRange":[[7,0],[8,0]],"oldText":"","newText":"class Test_Controller_Api_User_Registrations extends Test_Controller_Api_Base\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[8,0],[9,0]],"newRange":[[8,0],[8,0]],"oldText":"class Test_Controller_Api_User_Rgistrations extends Test_Controller_Api_Base\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[9,0],[9,0]],"newRange":[[9,0],[11,0]],"oldText":"","newText":"    // override\n    protected $is_include_db_test = TRUE;\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[11,0],[13,0]],"newRange":[[11,0],[11,0]],"oldText":"    protected $tables = array(\n    );\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[14,0],[14,0]],"newRange":[[14,0],[16,0]],"oldText":"","newText":"\t// テスト用paymentID\n\tconst PAYMENT_ID = 123456789;\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[18,0],[31,0]],"newRange":[[18,0],[18,0]],"oldText":"    * setup DB.\n    */\n    public function setup()\n    {\n        $this->cleanup_tables();\n    }\n\n    public function tearDown()\n    {\n        $this->cleanup_tables();\n    }\n\n    /**\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[19,0],[21,0]],"newRange":[[19,0],[19,0]],"oldText":"     *\n     *\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[32,0],[32,0]],"newRange":[[32,0],[33,0]],"oldText":"","newText":"\t\t$body = $response->body;\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[36,0],[36,0]],"newRange":[[36,0],[38,0]],"oldText":"","newText":"        $this->assertTrue(array_key_exists('user', $body));\n        $this->assertEquals(self::PHONE_NUMBER, $body['user']['phonenumber']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[38,0],[40,0]],"newRange":[[38,0],[38,0]],"oldText":"        $this->assertTrue(array_key_exists('user', $response->body));\n        $this->assertEquals(self::PHONE_NUMBER, $response->body['user']['phonenumber']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[39,0],[39,0]],"newRange":[[39,0],[52,0]],"oldText":"","newText":"\t\t// レスポンスを検証（自明なものはテストしない）\n\t\t$this->assertInternalType('int', $body['user']['user_id']);\n\t\t$this->assertInternalType('int', $body['user']['space_type_id']);\n\t\t$this->assertInternalType('string', $body['user']['filled_space_size']);\n\t\t$this->assertInternalType('string', $body['user']['filled_number_of_tatami']);\n\t\t$this->assertInternalType('int', $body['user']['card_exp_year']);\n\t\t$this->assertInternalType('int', $body['user']['card_exp_month']);\n\t\t$this->assertInternalType('string', $body['user']['card_last4']);\n\n        // DBの中を確認\n        $users = Model_Datasource_User::find_by_telephone(self::PHONE_NUMBER);\n        $this->assertCount(1, $users);\n\t\t$this->assertEquals(self::PAYMENT_ID, $users[0]['customer_card_id']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[55,0],[55,0]],"newRange":[[55,0],[57,0]],"oldText":"","newText":"     * post_index()\n     * 電話番号を重複登録した場合\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[57,0],[58,0]],"newRange":[[57,0],[57,0]],"oldText":"     * @expectedException RequestStatusException\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[60,0],[60,0]],"newRange":[[60,0],[65,0]],"oldText":"","newText":"        $curl = new MyCurl();\n        $json = self::get_json('registrations_duplicate.json');\n        $params = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => json_decode($json),\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[65,0],[77,0]],"newRange":[[65,0],[65,0]],"oldText":"        // ユーザデータ生成\n        $now       = date('Y/m/d H:i:s', time());\n        $password  = 'fake_password';\n        $user_data = array(\n            'user_name'         => 'test_create',\n            'telephone'         => self::PHONE_NUMBER,\n            'password'          => $password,\n            'customer_card_id'        => 1000000,\n            'registered_date'   => $now,\n            'card_last4'        => mb_substr('123456789012', -4),\n            'card_expire_year'  => '2015',\n            'card_expire_month' => '11',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[66,0],[66,0]],"newRange":[[66,0],[69,0]],"oldText":"","newText":"        $result = $curl->post_json($params);\n        $this->assertEquals(400, $result['http_status'],  $result['output']['messages'][0]);\n    }\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[69,0],[71,0]],"newRange":[[69,0],[69,0]],"oldText":"        // テーブルに登録\n        Model_Datasource_User::create($user_data);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[70,0],[77,0]],"newRange":[[70,0],[70,0]],"oldText":"        // 同じ電話番号で登録リクエストを送る\n        $json = self::get_json('registrations_duplicate.json');\n        $request = Request::forge(self::get_url('api/user/v1/registrations'), 'curl')\n            ->set_method('POST')\n            ->set_header('api_key', self::get_api_key())\n            ->set_header('Content-Type', 'application/json')\n            ->set_params($json);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[71,0],[74,0]],"newRange":[[71,0],[71,0]],"oldText":"        $response = $request->execute()->response();\n    }\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[72,0],[72,0]],"newRange":[[72,0],[76,0]],"oldText":"","newText":"     * Post_index()\n     * 一部を空にした場合\n     */\n    public function test_post_index_normal_with_some_loss()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[76,0],[79,0]],"newRange":[[76,0],[76,0]],"oldText":"    * テスト用に投入した会員データ（電話番号がself::PHONE_NUMBERの会員）を削除するメソッド。\n    */\n    private function cleanup_tables()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[77,0],[77,0]],"newRange":[[77,0],[82,0]],"oldText":"","newText":"        $curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params_normal =  json_decode($json, true); // trueにすると連想配列を作る\n        foreach ($params_normal as $key => $value) // 1つだけ消したバージョンを7とおりつくる\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[82,0],[84,0]],"newRange":[[82,0],[82,0]],"oldText":"        $users = Model_Datasource_User::find_by_telephone(self::PHONE_NUMBER);\n        if ( ! empty($users))\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[83,0],[83,0]],"newRange":[[83,0],[97,0]],"oldText":"","newText":"            $params = self::copy_array($params_normal);\n            $params[$key] = '';\n            $inputs = array(\n                'url' => self::get_url('api/user/v1/registrations'),\n                'http' => $params,\n            );\n            $result = $curl->post_json($inputs);\n            $this->assertEquals(400, $result['http_status'],  $key);\n            $this->assertEquals(Util_Message::get_app_message('A014-E'), $result['output']['messages'][0]);\n\n\n            // DBの中を確認\n            $users = Model_Datasource_User::find_by_telephone(self::PHONE_NUMBER);\n            $this->assertCount(0, $users);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[97,0],[109,0]],"newRange":[[97,0],[97,0]],"oldText":"            foreach ($users as $user)\n            {\n                $user_id = $user['user_id'];\n                DB::delete('t_contract_log')->execute();\n                DB::delete('t_contract')->where('user_id', $user_id)->execute();\n                DB::delete('t_request_log')->where('user_id', $user_id)->execute();\n                DB::delete('t_request')->where('user_id', $user_id)->execute();\n                DB::delete('t_message')->where('user_id', $user_id)->execute();\n                DB::delete('t_promotion')->where('user_id', $user_id)->execute();\n                DB::delete('t_sales')->where('user_id', $user_id)->execute();\n                DB::delete('t_user')->where('user_id', $user_id)->execute();\n            }\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[99,0],[99,0]],"newRange":[[99,0],[167,0]],"oldText":"","newText":"\n\n    /**\n     * Post_index()\n     * クーポンがフォーマット不正の場合\n     */\n    public function test_post_index_normal_with_wrong_format_coupon()\n    {\n        $curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params =  json_decode($json, true); // trueにすると連想配列を作る\n        $params['coupon_code'] = '不正なクーポンコード';\n        $inputs = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => $params,\n        );\n        $result = $curl->post_json($inputs);\n        $this->assertEquals(400, $result['http_status']);\n        $this->assertEquals(Util_Message::get_app_message('A014-E'), $result['output']['messages'][0]);\n    }\n\n    /**\n     * Post_index()\n     * クーポンが存在しない場合\n     */\n    public function test_post_index_normal_with_wrong_coupon()\n    {\n        $curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params =  json_decode($json, true); // trueにすると連想配列を作る\n        $params['coupon_code'] = 'Cwrong';\n        $inputs = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => $params,\n        );\n        $result = $curl->post_json($inputs);\n        $this->assertEquals(400, $result['http_status']);\n        $this->assertEquals(Util_Message::get_app_message('C001-E'), $result['output']['messages'][0]);\n    }\n\n\t/**\n\t * post_index()\n\t * m_campaignのクーポンの有効期限が切れている場合\n\t */\n\tpublic function test_post_index_normal_with_expired_coupon()\n\t{\n\t\t$curl = new MyCurl();\n        $json = self::get_json('registrations_normal.json');\n\n        $params =  json_decode($json, true); // trueにすると連想配列を作る\n        $params['coupon_code'] = 'Ceeddff';\n        $inputs = array(\n            'url' => self::get_url('api/user/v1/registrations'),\n            'http' => $params,\n        );\n        $result = $curl->post_json($inputs);\n        $this->assertEquals(400, $result['http_status']);\n        $this->assertEquals(Util_Message::get_app_message('C002-E'), $result['output']['messages'][0]);\n\t}\n\n    private static function copy_array($array)\n    {\n        $new_array = $array; // PHP way to copy array\n        return $new_array;\n    }\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[60,0],[60,0]],"newRange":[[60,0],[61,0]],"oldText":"","newText":"<<<<<<< HEAD\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[62,0],[62,0]],"newRange":[[62,0],[81,0]],"oldText":"","newText":"=======\n        // ユーザデータ生成\n        $now       = date('Y/m/d H:i:s', time());\n        $password  = 'fake_password';\n        $user_data = array(\n            'user_name'         => 'test_create',\n            'telephone'         => self::PHONE_NUMBER,\n            'password'          => $password,\n            'customer_card_id'        => 1000000,\n            'registered_date'   => $now,\n            'card_last4'        => mb_substr('123456789012', -4),\n            'card_expire_year'  => '2015',\n            'card_expire_month' => '11',\n        );\n        // テーブルに登録\n        Model_Datasource_User::create($user_data);\n\n        // 同じ電話番号で登録リクエストを送る\n>>>>>>> develop_api\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[60,0],[61,0]],"newRange":[[60,0],[60,0]],"oldText":"<<<<<<< HEAD\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[61,0],[80,0]],"newRange":[[61,0],[61,0]],"oldText":"=======\n        // ユーザデータ生成\n        $now       = date('Y/m/d H:i:s', time());\n        $password  = 'fake_password';\n        $user_data = array(\n            'user_name'         => 'test_create',\n            'telephone'         => self::PHONE_NUMBER,\n            'password'          => $password,\n            'customer_card_id'        => 1000000,\n            'registered_date'   => $now,\n            'card_last4'        => mb_substr('123456789012', -4),\n            'card_expire_year'  => '2015',\n            'card_expire_month' => '11',\n        );\n        // テーブルに登録\n        Model_Datasource_User::create($user_data);\n\n        // 同じ電話番号で登録リクエストを送る\n>>>>>>> develop_api\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[60,0],[60,0]],"newRange":[[60,0],[61,0]],"oldText":"","newText":"<<<<<<< HEAD\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[62,0],[62,0]],"newRange":[[62,0],[81,0]],"oldText":"","newText":"=======\n        // ユーザデータ生成\n        $now       = date('Y/m/d H:i:s', time());\n        $password  = 'fake_password';\n        $user_data = array(\n            'user_name'         => 'test_create',\n            'telephone'         => self::PHONE_NUMBER,\n            'password'          => $password,\n            'customer_card_id'        => 1000000,\n            'registered_date'   => $now,\n            'card_last4'        => mb_substr('123456789012', -4),\n            'card_expire_year'  => '2015',\n            'card_expire_month' => '11',\n        );\n        // テーブルに登録\n        Model_Datasource_User::create($user_data);\n\n        // 同じ電話番号で登録リクエストを送る\n>>>>>>> d9eeb65\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[60,0],[61,0]],"newRange":[[60,0],[60,0]],"oldText":"<<<<<<< HEAD\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[61,0],[80,0]],"newRange":[[61,0],[61,0]],"oldText":"=======\n        // ユーザデータ生成\n        $now       = date('Y/m/d H:i:s', time());\n        $password  = 'fake_password';\n        $user_data = array(\n            'user_name'         => 'test_create',\n            'telephone'         => self::PHONE_NUMBER,\n            'password'          => $password,\n            'customer_card_id'        => 1000000,\n            'registered_date'   => $now,\n            'card_last4'        => mb_substr('123456789012', -4),\n            'card_expire_year'  => '2015',\n            'card_expire_month' => '11',\n        );\n        // テーブルに登録\n        Model_Datasource_User::create($user_data);\n\n        // 同じ電話番号で登録リクエストを送る\n>>>>>>> d9eeb65\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[48,0],[48,0]],"newRange":[[48,0],[54,0]],"oldText":"","newText":"        $this->assertTrue(array_key_exists('user', $response->body));\n        $this->assertEquals(self::PHONE_NUMBER, $response->body['user']['phonenumber']);\n        $this->assertEquals(1, $response->body['user']['space_type_id']);\n        $this->assertEquals('0.0', $response->body['user']['filled_space_size']);\n        $this->assertEquals('0.0', $response->body['user']['filled_number_of_tatami']);\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[48,0],[54,0]],"newRange":[[48,0],[48,0]],"oldText":"        $this->assertTrue(array_key_exists('user', $response->body));\n        $this->assertEquals(self::PHONE_NUMBER, $response->body['user']['phonenumber']);\n        $this->assertEquals(1, $response->body['user']['space_type_id']);\n        $this->assertEquals('0.0', $response->body['user']['filled_space_size']);\n        $this->assertEquals('0.0', $response->body['user']['filled_number_of_tatami']);\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[48,0],[48,0]],"newRange":[[48,0],[54,0]],"oldText":"","newText":"        $this->assertTrue(array_key_exists('user', $response->body));\n        $this->assertEquals(self::PHONE_NUMBER, $response->body['user']['phonenumber']);\n        $this->assertEquals(1, $response->body['user']['space_type_id']);\n        $this->assertEquals('0.0', $response->body['user']['filled_space_size']);\n        $this->assertEquals('0.0', $response->body['user']['filled_number_of_tatami']);\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[48,0],[54,0]],"newRange":[[48,0],[48,0]],"oldText":"        $this->assertTrue(array_key_exists('user', $response->body));\n        $this->assertEquals(self::PHONE_NUMBER, $response->body['user']['phonenumber']);\n        $this->assertEquals(1, $response->body['user']['space_type_id']);\n        $this->assertEquals('0.0', $response->body['user']['filled_space_size']);\n        $this->assertEquals('0.0', $response->body['user']['filled_number_of_tatami']);\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/tests/controller/api/user/registrations.php","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"3ec1bfc693d5016646a06f00d821424299ad82fd","deserializer":"TextBuffer"},{"text":"<?php\n/**\n * Controller_Api_User_Detail class tests\n *   fuel/app/classes/controller/api/user/detail.php\n * @group App\n * @group API\n */\nrequire_once APPPATH . 'classes/util/password.php';\n\nclass Test_Controller_Api_User_Detail extends Test_Controller_Api_Base\n{\n\n    protected $is_include_db_test = TRUE;\n\n    private static $USER_ID       = 161300000;\n    private static $CONTRACT_ID   = null;\n    private static $BAGGAGE_ID    = null;\n    private static $USER_DATA     = array(\n        'user_name' => '広家 太郎',\n        'telephone' => null,\n        'password'  => '$2y$10$RtYNwe2jRfRZ4vnWDGOsZ.e/HW0R26NlGm8yNyRqMsmkcQjjlkPYa', // '012345678'\n\n    );\n    private static $SPACE_TYPE_ID = 4;\n    private static $PAYMENT_DATA  = array(\n        'card_number'       => '1111222233334444',\n        'card_expire_year'  => '2015',\n        'card_expire_month' => '11',\n    );\n    private static $FILLED_SPACE_SIZE = 0;\n    private static $FILLED_NUMBER_OF_TATAMI = 0;\n\n    /**\n     * 会員情報更新APIのactionメソッドのテスト\n     * セッションがないため, 401を返す\n     * Controller_Api_User_Detail::post_index()\n     *\n     */\n    public function test_post_index_セッションがないため失敗()\n    {\n        $curl = new MyCurl();\n\n        // ログインしない\n        // $curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n        // 詳細更新\n        $params = array(\n            'url' => self::get_url('api/user/v1/detail'),\n            'http' => $this->mock_input(),\n        );\n        $result = $curl->post_json($params);\n        $http_status = $result['http_status'];\n        $response_body = $result['output'];\n        $this->assertEquals(401, $http_status);\n\n    }\n\n    /**\n     * 会員情報取得APIのactionメソッドのテスト\n     * セッションがないため, 401を返す\n     * Controller_Api_User_Detail::get_index()\n     *\n     */\n    public function test_get_index_セッションがないため例外()\n    {\n\n        $curl = new MyCurl();\n        // 詳細取得\n        $params = array(\n            'url' => self::get_url('api/user/v1/detail'),\n            'http' => $this->mock_input(),\n        );\n        $result = $curl->post_json($params);\n        $http_status = $result['http_status'];\n        $this->assertEquals(401, $http_status);\n    }\n\n    /**\n     * 会員情報更新APIでPOSTされたデータのValidationを扱うprivateなメソッドをテスト\n     * Controller_Api_User_Detail::is_valid()\n     *\n     * 正常系\n     */\n    public function test_is_valid_正常系()\n    {\n        // 対象コントローラクラスのインスタンスを作成\n        $request = Request::forge(self::get_url('api/user/v1/users/detail'));\n        $target_instance = new Controller_Api_User_Detail($request);\n        // インスタンスをもとにメソッドを生成して呼び出し\n        $method = self::getMethod('Controller_Api_User_Detail', 'is_valid');\n        $validation = $method->invoke($target_instance);\n        $params = $this->mock_input();\n        $is_valid = $validation->run($params);\n        $input = $validation->input();\n        $this->assertTrue($is_valid);\n        foreach ($params as $key => $value)\n        {\n            $this->assertArrayHasKey($key, $input);\n        }\n    }\n\n    public function test_post_index_正常系()\n    {\n\n        $curl = new MyCurl();\n        // ログイン\n        $curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n\n        // 詳細更新\n        $input = $this->mock_input();\n        $params = array(\n            'url' => self::get_url('api/user/v1/detail'),\n            'http' => $input,\n        );\n        $result = $curl->post_json($params);\n        $http_status = $result['http_status'];\n        $this->assertEquals(200, $http_status);\n        $response_body = $result['output'];\n\n        $user_data = $response_body['user'];\n        $this->assertEquals($input['name'], $user_data['name']);\n        $this->assertEquals(strval($input['phonenumber']), strval($user_data['phonenumber']));\n        $this->assertEquals(intval($input['space_type_id']), intval($user_data['space_type_id']));\n        $this->assertEquals(mb_substr($input['card_number'], -4), $user_data['card_last4']);\n        $this->assertEquals($input['card_exp_year'], $user_data['card_exp_year']);\n        $this->assertEquals($input['card_exp_month'], $user_data['card_exp_month']);\n    }\n\n    public function test_post_index_非必須項目が空文字の場合はその項目を更新しない()\n    {\n        $curl = new MyCurl();\n        // ログイン\n        $curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n\n        // 詳細更新\n        $input = $this->mock_input();\n        $input['name'] = \"\";\n        $params = array(\n            'url' => self::get_url('api/user/v1/detail'),\n            'http' => $input,\n        );\n        $result = $curl->post_json($params);\n        $http_status = $result['http_status'];\n        $this->assertEquals(200, $http_status);\n        $response_body = $result['output'];\n\n        $user_data = $response_body['user'];\n        $this->assertEquals('広家 太郎', $user_data['name']);\n        $this->assertEquals(strval($input['phonenumber']), strval($user_data['phonenumber']));\n        $this->assertEquals(intval($input['space_type_id']), intval($user_data['space_type_id']));\n        $this->assertEquals(mb_substr($input['card_number'], -4), $user_data['card_last4']);\n        $this->assertEquals($input['card_exp_year'], $user_data['card_exp_year']);\n        $this->assertEquals($input['card_exp_month'], $user_data['card_exp_month']);\n    }\n\n    public function test_db_initialized()\n    {\n        $user = Model_Datasource_User::find_by_user_id(self::$USER_ID);\n        $this->assertTrue(array_key_exists('user_id', $user));\n        $this->assertEquals(self::$USER_DATA['user_name'], $user['user_name']);\n    }\n\n\n    private function mock_input()\n    {\n       $phonenumber_new = Util_Utility::get_random_number(11);\n        return array(\n            'name'\t\t\t=> 'テストユーザ名前変更後',\n            'phonenumber'\t=> $phonenumber_new,\n            'new_password'\t=> 'passwordnew',\n            'space_type_id' => 5,\n            'card_exp_year' => 2016,\n            'card_exp_month'=> 4,\n            'card_number'   => '1111222233335555',\n        );\n    }\n\n}\n","markers":{"markers":{"1":{"id":1,"range":[[134,5],[134,5]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":12660,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[99,0],[99,0]],"newRange":[[99,0],[100,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[100,0],[100,0]],"newRange":[[100,0],[100,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[100,0],[100,0]],"newRange":[[100,0],[100,4]],"oldText":"","newText":"    ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[100,4],[100,4]],"newRange":[[100,4],[100,5]],"oldText":"","newText":"/","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[100,5],[100,5]],"newRange":[[100,5],[100,6]],"oldText":"","newText":"*","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[100,6],[100,6]],"newRange":[[100,6],[100,7]],"oldText":"","newText":"*","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[100,7],[100,7]],"newRange":[[100,7],[101,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[101,0],[101,0]],"newRange":[[101,0],[101,4]],"oldText":"","newText":"    ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[101,4],[101,4]],"newRange":[[101,4],[101,5]],"oldText":"","newText":"*","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[101,5],[101,5]],"newRange":[[101,5],[102,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[102,0],[102,0]],"newRange":[[102,0],[102,4]],"oldText":"","newText":"    ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[102,4],[102,4]],"newRange":[[102,4],[102,5]],"oldText":"","newText":"*","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[102,5],[102,5]],"newRange":[[102,5],[102,6]],"oldText":"","newText":"/","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[101,5],[101,5]],"newRange":[[101,5],[101,6]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[101,6],[101,6]],"newRange":[[101,6],[101,7]],"oldText":"","newText":"@","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[101,7],[101,7]],"newRange":[[101,7],[101,8]],"oldText":"","newText":"g","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[101,8],[101,8]],"newRange":[[101,8],[101,9]],"oldText":"","newText":"r","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[101,9],[101,9]],"newRange":[[101,9],[101,10]],"oldText":"","newText":"o","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[101,10],[101,10]],"newRange":[[101,10],[101,11]],"oldText":"","newText":"u","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[101,11],[101,11]],"newRange":[[101,11],[101,12]],"oldText":"","newText":"p","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[101,12],[101,12]],"newRange":[[101,12],[101,13]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[101,13],[101,13]],"newRange":[[101,13],[101,14]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[101,14],[101,14]],"newRange":[[101,14],[101,15]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[101,15],[101,15]],"newRange":[[101,15],[101,16]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[101,16],[101,16]],"newRange":[[101,16],[101,17]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[101,17],[101,17]]},"newParams":{"reversed":true,"range":[[101,16],[101,17]]},"deserializer":"MarkerPatch"},{"oldRange":[[101,16],[101,17]],"newRange":[[101,16],[101,16]],"oldText":"t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[101,16],[101,16]]},"newParams":{"range":[[101,15],[101,16]]},"deserializer":"MarkerPatch"},{"oldRange":[[101,15],[101,16]],"newRange":[[101,15],[101,15]],"oldText":"s","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[101,15],[101,15]]},"newParams":{"range":[[101,14],[101,15]]},"deserializer":"MarkerPatch"},{"oldRange":[[101,14],[101,15]],"newRange":[[101,14],[101,14]],"oldText":"e","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[101,14],[101,14]]},"newParams":{"range":[[101,13],[101,14]]},"deserializer":"MarkerPatch"},{"oldRange":[[101,13],[101,14]],"newRange":[[101,13],[101,13]],"oldText":"t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[101,13],[101,13]],"newRange":[[101,13],[101,14]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[101,14],[101,14]],"newRange":[[101,14],[101,15]],"oldText":"","newText":"a","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[101,15],[101,15]],"newRange":[[101,15],[101,16]],"oldText":"","newText":"r","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[101,16],[101,16]],"newRange":[[101,16],[101,17]],"oldText":"","newText":"g","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[101,17],[101,17]],"newRange":[[101,17],[101,18]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[101,18],[101,18]],"newRange":[[101,18],[101,19]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[135,0],[135,0]],"newRange":[[135,0],[136,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[136,0],[136,0]],"newRange":[[136,0],[136,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[136,0],[136,0]],"newRange":[[136,0],[138,2]],"oldText":"","newText":"/**\n* @group target\n*/","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[136,0],[136,0]],"newRange":[[136,0],[136,4]],"oldText":"","newText":"    ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[137,0],[137,0]],"newRange":[[137,0],[137,4]],"oldText":"","newText":"    ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[138,0],[138,0]],"newRange":[[138,0],[138,4]],"oldText":"","newText":"    ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[100,0],[103,0]],"newRange":[[100,0],[100,0]],"oldText":"    /**\n    * @group target\n    */\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[133,0],[136,0]],"newRange":[[133,0],[133,0]],"oldText":"    /**\n    * @group target\n    */\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[125,0],[131,0]],"newRange":[[125,0],[125,0]],"oldText":"\n\n        // DBの中を確認\n        $users = Model_Datasource_User::find_by_telephone(strval($input['phonenumber']));\n        $this->assertCount(1, $users);\n        $this->assertEquals(0, $users[0]['paygent_id'], $users[0]['user_id'].'のpaygent_idが更新されていません '.$users[0]['paygent_id']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[125,0],[125,0]],"newRange":[[125,0],[131,0]],"oldText":"","newText":"\n\n        // DBの中を確認\n        $users = Model_Datasource_User::find_by_telephone(strval($input['phonenumber']));\n        $this->assertCount(1, $users);\n        $this->assertEquals(0, $users[0]['paygent_id'], $users[0]['user_id'].'のpaygent_idが更新されていません '.$users[0]['paygent_id']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[125,0],[131,0]],"newRange":[[125,0],[125,0]],"oldText":"\n\n        // DBの中を確認\n        $users = Model_Datasource_User::find_by_telephone(strval($input['phonenumber']));\n        $this->assertCount(1, $users);\n        $this->assertEquals(0, $users[0]['paygent_id'], $users[0]['user_id'].'のpaygent_idが更新されていません '.$users[0]['paygent_id']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[125,0],[125,0]],"newRange":[[125,0],[131,0]],"oldText":"","newText":"\n\n        // DBの中を確認\n        $users = Model_Datasource_User::find_by_telephone(strval($input['phonenumber']));\n        $this->assertCount(1, $users);\n        $this->assertEquals(0, $users[0]['paygent_id'], $users[0]['user_id'].'のpaygent_idが更新されていません '.$users[0]['paygent_id']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[100,0],[100,0]],"newRange":[[100,0],[103,0]],"oldText":"","newText":"    /**\n    * @group target\n    */\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[136,0],[136,0]],"newRange":[[136,0],[139,0]],"oldText":"","newText":"    /**\n    * @group target\n    */\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[133,52],[133,52]]},"newParams":{"range":[[133,51],[133,52]]},"deserializer":"MarkerPatch"},{"oldRange":[[133,51],[133,52]],"newRange":[[133,51],[133,51]],"oldText":"d","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[133,51],[133,51]]},"newParams":{"range":[[133,50],[133,51]]},"deserializer":"MarkerPatch"},{"oldRange":[[133,50],[133,51]],"newRange":[[133,50],[133,50]],"oldText":"i","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[133,50],[133,50]]},"newParams":{"range":[[133,49],[133,50]]},"deserializer":"MarkerPatch"},{"oldRange":[[133,49],[133,50]],"newRange":[[133,49],[133,49]],"oldText":"_","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[133,49],[133,49]]},"newParams":{"range":[[133,48],[133,49]]},"deserializer":"MarkerPatch"},{"oldRange":[[133,48],[133,49]],"newRange":[[133,48],[133,48]],"oldText":"t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[133,48],[133,48]]},"newParams":{"range":[[133,47],[133,48]]},"deserializer":"MarkerPatch"},{"oldRange":[[133,47],[133,48]],"newRange":[[133,47],[133,47]],"oldText":"n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[133,47],[133,47]]},"newParams":{"range":[[133,46],[133,47]]},"deserializer":"MarkerPatch"},{"oldRange":[[133,46],[133,47]],"newRange":[[133,46],[133,46]],"oldText":"e","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[133,46],[133,46]]},"newParams":{"range":[[133,45],[133,46]]},"deserializer":"MarkerPatch"},{"oldRange":[[133,45],[133,46]],"newRange":[[133,45],[133,45]],"oldText":"g","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[133,45],[133,45]]},"newParams":{"range":[[133,44],[133,45]]},"deserializer":"MarkerPatch"},{"oldRange":[[133,44],[133,45]],"newRange":[[133,44],[133,44]],"oldText":"y","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[133,44],[133,44]]},"newParams":{"range":[[133,43],[133,44]]},"deserializer":"MarkerPatch"},{"oldRange":[[133,43],[133,44]],"newRange":[[133,43],[133,43]],"oldText":"a","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[133,43],[133,43]]},"newParams":{"range":[[133,42],[133,43]]},"deserializer":"MarkerPatch"},{"oldRange":[[133,42],[133,43]],"newRange":[[133,42],[133,42]],"oldText":"p","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,42],[133,42]],"newRange":[[133,42],[133,43]],"oldText":"","newText":"c","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,43],[133,43]],"newRange":[[133,43],[133,44]],"oldText":"","newText":"u","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,44],[133,44]],"newRange":[[133,44],[133,45]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,45],[133,45]],"newRange":[[133,45],[133,46]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,46],[133,46]],"newRange":[[133,46],[133,47]],"oldText":"","newText":"o","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,47],[133,47]],"newRange":[[133,47],[133,48]],"oldText":"","newText":"m","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,48],[133,48]],"newRange":[[133,48],[133,49]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,49],[133,49]],"newRange":[[133,49],[133,50]],"oldText":"","newText":"r","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,50],[133,50]],"newRange":[[133,50],[133,51]],"oldText":"","newText":"_","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,51],[133,51]],"newRange":[[133,51],[133,52]],"oldText":"","newText":"c","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,52],[133,52]],"newRange":[[133,52],[133,53]],"oldText":"","newText":"a","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,53],[133,53]],"newRange":[[133,53],[133,54]],"oldText":"","newText":"r","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,54],[133,54]],"newRange":[[133,54],[133,55]],"oldText":"","newText":"d","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,55],[133,55]],"newRange":[[133,55],[133,56]],"oldText":"","newText":"_","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,56],[133,56]],"newRange":[[133,56],[133,57]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,57],[133,57]],"newRange":[[133,57],[133,58]],"oldText":"","newText":"d","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[133,119],[133,130]]},"newParams":{"tailed":false,"range":[[133,119],[133,119]]},"deserializer":"MarkerPatch"},{"oldRange":[[133,119],[133,130]],"newRange":[[133,119],[133,120]],"oldText":"paygent_id'","newText":"c","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"range":[[133,119],[133,119]]},"newParams":{"range":[[133,120],[133,120]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,120],[133,120]],"newRange":[[133,120],[133,121]],"oldText":"","newText":"u","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,121],[133,121]],"newRange":[[133,121],[133,122]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,122],[133,122]],"newRange":[[133,122],[133,123]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,123],[133,123]],"newRange":[[133,123],[133,124]],"oldText":"","newText":"o","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,124],[133,124]],"newRange":[[133,124],[133,125]],"oldText":"","newText":"m","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,125],[133,125]],"newRange":[[133,125],[133,126]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,126],[133,126]],"newRange":[[133,126],[133,127]],"oldText":"","newText":"r","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,127],[133,127]],"newRange":[[133,127],[133,128]],"oldText":"","newText":"_","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,128],[133,128]],"newRange":[[133,128],[133,129]],"oldText":"","newText":"u","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,129],[133,129]],"newRange":[[133,129],[133,130]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,130],[133,130]],"newRange":[[133,130],[133,131]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,131],[133,131]],"newRange":[[133,131],[133,132]],"oldText":"","newText":"r","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,132],[133,132]],"newRange":[[133,132],[133,133]],"oldText":"","newText":"_","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[133,133],[133,133]]},"newParams":{"range":[[133,132],[133,133]]},"deserializer":"MarkerPatch"},{"oldRange":[[133,132],[133,133]],"newRange":[[133,132],[133,132]],"oldText":"_","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[133,132],[133,132]]},"newParams":{"range":[[133,131],[133,132]]},"deserializer":"MarkerPatch"},{"oldRange":[[133,131],[133,132]],"newRange":[[133,131],[133,131]],"oldText":"r","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[133,131],[133,131]]},"newParams":{"range":[[133,130],[133,131]]},"deserializer":"MarkerPatch"},{"oldRange":[[133,130],[133,131]],"newRange":[[133,130],[133,130]],"oldText":"e","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[133,130],[133,130]]},"newParams":{"range":[[133,129],[133,130]]},"deserializer":"MarkerPatch"},{"oldRange":[[133,129],[133,130]],"newRange":[[133,129],[133,129]],"oldText":"s","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[133,129],[133,129]]},"newParams":{"range":[[133,128],[133,129]]},"deserializer":"MarkerPatch"},{"oldRange":[[133,128],[133,129]],"newRange":[[133,128],[133,128]],"oldText":"u","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,128],[133,128]],"newRange":[[133,128],[133,129]],"oldText":"","newText":"c","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,129],[133,129]],"newRange":[[133,129],[133,130]],"oldText":"","newText":"a","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,130],[133,130]],"newRange":[[133,130],[133,131]],"oldText":"","newText":"r","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,131],[133,131]],"newRange":[[133,131],[133,132]],"oldText":"","newText":"_","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[133,132],[133,132]]},"newParams":{"range":[[133,131],[133,132]]},"deserializer":"MarkerPatch"},{"oldRange":[[133,131],[133,132]],"newRange":[[133,131],[133,131]],"oldText":"_","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,131],[133,131]],"newRange":[[133,131],[133,132]],"oldText":"","newText":"d","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,132],[133,132]],"newRange":[[133,132],[133,133]],"oldText":"","newText":"_","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,133],[133,133]],"newRange":[[133,133],[133,134]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,134],[133,134]],"newRange":[[133,134],[133,135]],"oldText":"","newText":"d","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,135],[133,135]],"newRange":[[133,135],[133,136]],"oldText":"","newText":"'","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[100,0],[103,0]],"newRange":[[100,0],[100,0]],"oldText":"    /**\n    * @group target\n    */\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[133,0],[136,0]],"newRange":[[133,0],[133,0]],"oldText":"    /**\n    * @group target\n    */\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[125,0],[131,0]],"newRange":[[125,0],[125,0]],"oldText":"\n\n        // DBの中を確認\n        $users = Model_Datasource_User::find_by_telephone(strval($input['phonenumber']));\n        $this->assertCount(1, $users);\n        $this->assertEquals(0, $users[0]['customer_card_id'], $users[0]['user_id'].'のpaygent_idが更新されていません '.$users[0]['customer_card_id']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[11,0],[11,0]],"newRange":[[11,0],[12,0]],"oldText":"","newText":"    private static $USER_ID       = null;\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[12,0],[16,0]],"newRange":[[12,0],[12,0]],"oldText":"\n    protected $is_include_db_test = TRUE;\n\n    private static $USER_ID       = 161300000;\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[15,0],[15,0]],"newRange":[[15,0],[16,0]],"oldText":"","newText":"        'user_name' => 'テストユーザ名前',\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[16,0],[17,0]],"newRange":[[16,0],[16,0]],"oldText":"        'user_name' => '広家 太郎',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[17,0],[17,0]],"newRange":[[17,0],[18,0]],"oldText":"","newText":"        'password'  => '1',\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[18,0],[20,0]],"newRange":[[18,0],[18,0]],"oldText":"        'password'  => '$2y$10$RtYNwe2jRfRZ4vnWDGOsZ.e/HW0R26NlGm8yNyRqMsmkcQjjlkPYa', // '012345678'\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[28,0],[28,0]],"newRange":[[28,0],[39,0]],"oldText":"","newText":"    public function setup()\n    {\n        $this->cleanup_tables();\n        $this->prepare_tables();\n    }\n\n    public function tearDown()\n    {\n        $this->cleanup_tables();\n    }\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[43,0],[43,0]],"newRange":[[43,0],[45,0]],"oldText":"","newText":"     * \n     * @expectedException RequestStatusException\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[45,0],[46,0]],"newRange":[[45,0],[45,0]],"oldText":"     *\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[46,0],[46,0]],"newRange":[[46,0],[47,0]],"oldText":"","newText":"    public function test_post_index_セッションがないため例外()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[47,0],[48,0]],"newRange":[[47,0],[47,0]],"oldText":"    public function test_post_index_セッションがないため失敗()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[48,0],[48,0]],"newRange":[[48,0],[55,0]],"oldText":"","newText":"        $param = $this->mock_input();\n        $response = Request::forge(self::get_url('api/user/v1/users/detail'), 'curl')\n            ->set_method('POST')\n            ->set_header('api_key', self::get_api_key())\n            ->set_params($param)\n            ->execute()\n            ->response();\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[55,0],[69,0]],"newRange":[[55,0],[55,0]],"oldText":"        $curl = new MyCurl();\n\n        // ログインしない\n        // $curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n        // 詳細更新\n        $params = array(\n            'url' => self::get_url('api/user/v1/detail'),\n            'http' => $this->mock_input(),\n        );\n        $result = $curl->post_json($params);\n        $http_status = $result['http_status'];\n        $response_body = $result['output'];\n        $this->assertEquals(401, $http_status);\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[61,0],[61,0]],"newRange":[[61,0],[63,0]],"oldText":"","newText":"     * \n     * @expectedException RequestStatusException\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[63,0],[64,0]],"newRange":[[63,0],[63,0]],"oldText":"     *\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[66,0],[66,0]],"newRange":[[66,0],[71,0]],"oldText":"","newText":"        $response = Request::forge(self::get_url('api/user/v1/users/detail'), 'curl')\n            ->set_method('GET')\n            ->set_header('api_key', self::get_api_key())\n            ->execute()\n            ->response();\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[71,0],[81,0]],"newRange":[[71,0],[71,0]],"oldText":"\n        $curl = new MyCurl();\n        // 詳細取得\n        $params = array(\n            'url' => self::get_url('api/user/v1/detail'),\n            'http' => $this->mock_input(),\n        );\n        $result = $curl->post_json($params);\n        $http_status = $result['http_status'];\n        $this->assertEquals(401, $http_status);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[97,0],[97,0]],"newRange":[[97,0],[105,0]],"oldText":"","newText":"    /**\n     * 会員情報更新APIでモデルメソッドを取り扱うprivateなメソッドをテスト\n     * Controller_Api_User_Detail::update_data()\n     * Model_Logic_Account::update($user_id, $user_data, $payment_data, $contract_data);\n     *\n     * 正常系\n     */\n    public function test_update_data_正常系()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[105,0],[106,0]],"newRange":[[105,0],[105,0]],"oldText":"    public function test_post_index_正常系()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[106,0],[106,0]],"newRange":[[106,0],[113,0]],"oldText":"","newText":"        // 対象コントローラクラスのインスタンスを作成\n        $request = Request::forge(self::get_url('api/user/v1/users/detail'));\n        $target_instance = new Controller_Api_User_Detail($request);\n        // インスタンスをもとにメソッドを生成して呼び出し\n        $method = self::getMethod('Controller_Api_User_Detail', 'update_data');\n        $input  = $this->mock_input();\n        $method->invokeArgs($target_instance, array($input, self::$USER_ID));\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[114,0],[114,0]],"newRange":[[114,0],[125,0]],"oldText":"","newText":"        $user_data = Model_Logic_Account::find_by_user_id(self::$USER_ID);\n        $contracts = Model_Datasource_Contract::find_by_user_id(self::$USER_ID);\n        $contract  = $contracts[0];\n        $this->assertEquals($input['name'], $user_data['user_name']);\n        $this->assertEquals(strval($input['phonenumber']), strval($user_data['telephone']));\n        $this->assertNotNull(password_verify($input['new_password'], $user_data['password']));\n        $this->assertEquals(intval($input['space_type_id']), intval($contract['space_id']));\n        $this->assertEquals(mb_substr($input['card_number'], -4), $user_data['card_last4']);\n        $this->assertEquals($input['card_exp_year'], $user_data['card_expire_year']);\n        $this->assertEquals($input['card_exp_month'], $user_data['card_expire_month']);\n    }\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[125,0],[128,0]],"newRange":[[125,0],[125,0]],"oldText":"        $curl = new MyCurl();\n        // ログイン\n        $curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[126,0],[126,0]],"newRange":[[126,0],[143,0]],"oldText":"","newText":"    /**\n     * 会員情報更新APIでモデルメソッドを取り扱うprivateなメソッドをテスト\n     * Controller_Api_User_Detail::update_data()\n     * Model_Logic_Account::update($user_id, $user_data, $payment_data, $contract_data);\n     *\n     * 非必須の項目がバリデーションに抵触する際はその項目を更新しない.\n     */\n    public function test_update_data_非必須項目が空文字の場合はその項目を更新しない()\n    {\n        // 対象コントローラクラスのインスタンスを作成\n        $request = Request::forge(self::get_url('api/user/v1/users/detail'));\n        $target_instance = new Controller_Api_User_Detail($request);\n        // インスタンスをもとにメソッドを生成して呼び出し\n        $method = self::getMethod('Controller_Api_User_Detail', 'update_data');\n        $input  = $this->mock_input();\n        $input['name'] = \"\";\n        $method->invokeArgs($target_instance, array($input, self::$USER_ID));\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[143,0],[153,0]],"newRange":[[143,0],[143,0]],"oldText":"        // 詳細更新\n        $input = $this->mock_input();\n        $params = array(\n            'url' => self::get_url('api/user/v1/detail'),\n            'http' => $input,\n        );\n        $result = $curl->post_json($params);\n        $http_status = $result['http_status'];\n        $this->assertEquals(200, $http_status);\n        $response_body = $result['output'];\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[144,0],[144,0]],"newRange":[[144,0],[146,0]],"oldText":"","newText":"        $user_data = Model_Logic_Account::find_by_user_id(self::$USER_ID);\n        $this->assertEquals(self::$USER_DATA['user_name'], $user_data['user_name']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[146,0],[153,0]],"newRange":[[146,0],[146,0]],"oldText":"        $user_data = $response_body['user'];\n        $this->assertEquals($input['name'], $user_data['name']);\n        $this->assertEquals(strval($input['phonenumber']), strval($user_data['phonenumber']));\n        $this->assertEquals(intval($input['space_type_id']), intval($user_data['space_type_id']));\n        $this->assertEquals(mb_substr($input['card_number'], -4), $user_data['card_last4']);\n        $this->assertEquals($input['card_exp_year'], $user_data['card_exp_year']);\n        $this->assertEquals($input['card_exp_month'], $user_data['card_exp_month']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[148,0],[148,0]],"newRange":[[148,0],[155,0]],"oldText":"","newText":"    /**\n     * 会員情報取得API, 会員情報更新APIで最新の会員情報を取得し適切な形に成形するprivateなメソッドをテスト\n     * Controller_Api_User_Detail::make_response_data()\n     *\n     * 正常系\n     */\n    public function test_make_response_data_正常系()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[155,0],[156,0]],"newRange":[[155,0],[155,0]],"oldText":"    public function test_post_index_非必須項目が空文字の場合はその項目を更新しない()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[156,0],[156,0]],"newRange":[[156,0],[163,0]],"oldText":"","newText":"        // 対象コントローラクラスのインスタンスを作成\n        $request = Request::forge(self::get_url('api/user/v1/users/detail'));\n        $target_instance = new Controller_Api_User_Detail($request);\n        // インスタンスをもとにメソッドを生成して呼び出し\n        $method = self::getMethod('Controller_Api_User_Detail', 'make_response_data');\n        $result = $method->invokeArgs($target_instance, array(self::$USER_ID));\n        $user   =  $result['user'];\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[163,0],[166,0]],"newRange":[[163,0],[163,0]],"oldText":"        $curl = new MyCurl();\n        // ログイン\n        $curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[164,0],[164,0]],"newRange":[[164,0],[169,0]],"oldText":"","newText":"        $this->assertNotNull($result, 'make_response_data($user_id)の結果がnullでない');\n        $this->assertNotNull($user, '$result[\"user\"]がnullでない');\n        $this->assertEquals($user['user_id'], self::$USER_ID);\n        $this->assertEquals($user['name'], self::$USER_DATA['user_name']);\n        $this->assertEquals($user['phonenumber'], self::$USER_DATA['telephone']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[169,0],[180,0]],"newRange":[[169,0],[169,0]],"oldText":"        // 詳細更新\n        $input = $this->mock_input();\n        $input['name'] = \"\";\n        $params = array(\n            'url' => self::get_url('api/user/v1/detail'),\n            'http' => $input,\n        );\n        $result = $curl->post_json($params);\n        $http_status = $result['http_status'];\n        $this->assertEquals(200, $http_status);\n        $response_body = $result['output'];\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[170,0],[170,0]],"newRange":[[170,0],[186,0]],"oldText":"","newText":"        // contract\n        $this->assertEquals($user['space_type_id'], self::$SPACE_TYPE_ID);\n        $this->assertEquals($user['filled_space_size'], self::$FILLED_SPACE_SIZE);\n        $this->assertEquals($user['filled_number_of_tatami'], self::$FILLED_NUMBER_OF_TATAMI);\n\n        // card\n        $this->assertEquals($user['card_last4'], mb_substr(self::$PAYMENT_DATA['card_number'], -4));\n        $this->assertEquals($user['card_exp_year'], self::$PAYMENT_DATA['card_expire_year']);\n        $this->assertEquals($user['card_exp_month'], self::$PAYMENT_DATA['card_expire_month']);\n\n        // promotion\n        $promotions = Model_Logic_Campaign::find_promotion_code_by_user_id(self::$USER_ID);\n        $promotion = $promotions[0];\n        $this->assertEquals($user['promotion_code'], $promotion['promotion_code']);\n        $this->assertEquals($user['promotion_description'], $promotion['description']);\n        $this->assertEquals($user['promotion_share_body'], $promotion['message']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[186,0],[193,0]],"newRange":[[186,0],[186,0]],"oldText":"        $user_data = $response_body['user'];\n        $this->assertEquals('広家 太郎', $user_data['name']);\n        $this->assertEquals(strval($input['phonenumber']), strval($user_data['phonenumber']));\n        $this->assertEquals(intval($input['space_type_id']), intval($user_data['space_type_id']));\n        $this->assertEquals(mb_substr($input['card_number'], -4), $user_data['card_last4']);\n        $this->assertEquals($input['card_exp_year'], $user_data['card_exp_year']);\n        $this->assertEquals($input['card_exp_month'], $user_data['card_exp_month']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[188,0],[188,0]],"newRange":[[188,0],[193,0]],"oldText":"","newText":"    /**\n     * データの削除\n     *\n     */\n    private function cleanup_tables()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[193,0],[194,0]],"newRange":[[193,0],[193,0]],"oldText":"    public function test_db_initialized()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[194,0],[194,0]],"newRange":[[194,0],[221,0]],"oldText":"","newText":"        if (self::$BAGGAGE_ID)\n        {\n            // t_baggage\n\t\t\tDB::delete('t_baggage')->where('baggage_id', self::$BAGGAGE_ID)->execute();\n        }\n\t\tif (self::$CONTRACT_ID)\n\t\t{\n            // t_contract_log\n            DB::delete('t_contract_log')->where('contract_id', self::$CONTRACT_ID)->execute();\n            // t_contract\n\t\t\tDB::delete('t_contract')->where('contract_id', self::$CONTRACT_ID)->execute();\n\t\t}\n\t\tif (self::$USER_ID)\n\t\t{\n            // t_request_log\n            DB::delete('t_request_log')->where('user_id', self::$USER_ID)->execute();\n            // t_request\n\t\t\tDB::delete('t_request')->where('user_id', self::$USER_ID)->execute();\n            // t_message\n            DB::delete('t_message')->where('user_id', self::$USER_ID)->execute();\n            // t_promotion\n            DB::delete('t_promotion')->where('user_id', self::$USER_ID)->execute();\n            // t_sales\n            DB::delete('t_sales')->where('user_id', self::$USER_ID)->execute();\n            // t_user\n            DB::delete('t_user')->where('user_id', self::$USER_ID)->execute();\n\t\t}\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[221,0],[224,0]],"newRange":[[221,0],[221,0]],"oldText":"        $user = Model_Datasource_User::find_by_user_id(self::$USER_ID);\n        $this->assertTrue(array_key_exists('user_id', $user));\n        $this->assertEquals(self::$USER_DATA['user_name'], $user['user_name']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[223,0],[223,0]],"newRange":[[223,0],[237,0]],"oldText":"","newText":"    /**\n     * テストデータの準備\n     *\n     */\n    private function prepare_tables()\n    {\n        // ユーザデータ作成\n        self::$USER_DATA['telephone'] = Util_Utility::get_random_number(11);\n        $user_data       = self::$USER_DATA;\n\t\t$payment_data    = self::$PAYMENT_DATA + array('coupon' => '');\n\t\t$contract_data   = array('space_id' => self::$SPACE_TYPE_ID);\n\t\t$result          = Model_Logic_Contract::contract($user_data, $payment_data, $contract_data);\n\t\tself::$USER_ID = $result['user_id'];\n        self::$CONTRACT_ID = $result['contract_id'];\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[238,0],[238,0]],"newRange":[[238,0],[258,0]],"oldText":"","newText":"        // 荷物データ登録（使用状況をゼロ以外に）\n        $baggage_type_id = 10000030;\n        $baggage_data = array(\n            'warehouse_id'    => Constants::$WAREHOUSE_DEFAULT, \n            'user_id'         => self::$USER_ID,\n            'baggage_type_id' => $baggage_type_id,\n            'photo_group_id'  => null,\n            'status'          => Constants::$BAGGAGE_STATUS_STORED,\n            'title'           => 'テスト荷物',\n            'description'     => 'テスト荷物説明',\n            'code'            => null,\n        );\n\n        list($baggage_id, $rows_affected) = Model_Datasource_Baggage::create($baggage_data);\n        $baggage_type = Model_Datasource_BaggageType::find_by_baggage_type_id($baggage_type_id);\n        self::$FILLED_SPACE_SIZE = $baggage_type['space_size'];\n        self::$FILLED_NUMBER_OF_TATAMI = Model_Logic_Space::get_filled_area(self::$SPACE_TYPE_ID, self::$FILLED_SPACE_SIZE);\n        self::$BAGGAGE_ID = $baggage_id;\n    }\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[262,0],[262,0]],"newRange":[[262,0],[265,0]],"oldText":"","newText":"            'name' => 'テストユーザ名前変更後',\n            'phonenumber' => $phonenumber_new,\n            'new_password' => 'password_new',\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[265,0],[268,0]],"newRange":[[265,0],[265,0]],"oldText":"            'name'\t\t\t=> 'テストユーザ名前変更後',\n            'phonenumber'\t=> $phonenumber_new,\n            'new_password'\t=> 'password_new',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[267,0],[267,0]],"newRange":[[267,0],[269,0]],"oldText":"","newText":"            'card_exp_month' => 4,\n            'card_number'       => '1111222233335555',\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[269,0],[271,0]],"newRange":[[269,0],[269,0]],"oldText":"            'card_exp_month'=> 4,\n            'card_number'   => '1111222233335555',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[272,0],[272,0]],"newRange":[[272,0],[272,1]],"oldText":"","newText":"}","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[272,1],[273,0]],"newRange":[[272,1],[272,1]],"oldText":"}\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[11,0],[11,0]],"newRange":[[11,0],[15,0]],"oldText":"","newText":"\n    protected $is_include_db_test = TRUE;\n\n    private static $USER_ID       = 161300000;\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[15,0],[16,0]],"newRange":[[15,0],[15,0]],"oldText":"    private static $USER_ID       = null;\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[18,0],[18,0]],"newRange":[[18,0],[19,0]],"oldText":"","newText":"        'user_name' => '広家 太郎',\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[19,0],[20,0]],"newRange":[[19,0],[19,0]],"oldText":"        'user_name' => 'テストユーザ名前',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[20,0],[20,0]],"newRange":[[20,0],[22,0]],"oldText":"","newText":"        'password'  => '$2y$10$RtYNwe2jRfRZ4vnWDGOsZ.e/HW0R26NlGm8yNyRqMsmkcQjjlkPYa', // '012345678'\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[22,0],[23,0]],"newRange":[[22,0],[22,0]],"oldText":"        'password'  => '1',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[32,0],[43,0]],"newRange":[[32,0],[32,0]],"oldText":"    public function setup()\n    {\n        $this->cleanup_tables();\n        $this->prepare_tables();\n    }\n\n    public function tearDown()\n    {\n        $this->cleanup_tables();\n    }\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[36,0],[36,0]],"newRange":[[36,0],[37,0]],"oldText":"","newText":"     *\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[37,0],[39,0]],"newRange":[[37,0],[37,0]],"oldText":"     * \n     * @expectedException RequestStatusException\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[38,0],[38,0]],"newRange":[[38,0],[39,0]],"oldText":"","newText":"    public function test_post_index_セッションがないため失敗()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[39,0],[40,0]],"newRange":[[39,0],[39,0]],"oldText":"    public function test_post_index_セッションがないため例外()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[40,0],[40,0]],"newRange":[[40,0],[54,0]],"oldText":"","newText":"        $curl = new MyCurl();\n\n        // ログインしない\n        // $curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n        // 詳細更新\n        $params = array(\n            'url' => self::get_url('api/user/v1/detail'),\n            'http' => $this->mock_input(),\n        );\n        $result = $curl->post_json($params);\n        $http_status = $result['http_status'];\n        $response_body = $result['output'];\n        $this->assertEquals(401, $http_status);\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[54,0],[61,0]],"newRange":[[54,0],[54,0]],"oldText":"        $param = $this->mock_input();\n        $response = Request::forge(self::get_url('api/user/v1/users/detail'), 'curl')\n            ->set_method('POST')\n            ->set_header('api_key', self::get_api_key())\n            ->set_params($param)\n            ->execute()\n            ->response();\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[60,0],[60,0]],"newRange":[[60,0],[61,0]],"oldText":"","newText":"     *\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[61,0],[63,0]],"newRange":[[61,0],[61,0]],"oldText":"     * \n     * @expectedException RequestStatusException\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[64,0],[64,0]],"newRange":[[64,0],[74,0]],"oldText":"","newText":"\n        $curl = new MyCurl();\n        // 詳細取得\n        $params = array(\n            'url' => self::get_url('api/user/v1/detail'),\n            'http' => $this->mock_input(),\n        );\n        $result = $curl->post_json($params);\n        $http_status = $result['http_status'];\n        $this->assertEquals(401, $http_status);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[74,0],[79,0]],"newRange":[[74,0],[74,0]],"oldText":"        $response = Request::forge(self::get_url('api/user/v1/users/detail'), 'curl')\n            ->set_method('GET')\n            ->set_header('api_key', self::get_api_key())\n            ->execute()\n            ->response();\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[100,0],[100,0]],"newRange":[[100,0],[101,0]],"oldText":"","newText":"    public function test_post_index_正常系()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[101,0],[109,0]],"newRange":[[101,0],[101,0]],"oldText":"    /**\n     * 会員情報更新APIでモデルメソッドを取り扱うprivateなメソッドをテスト\n     * Controller_Api_User_Detail::update_data()\n     * Model_Logic_Account::update($user_id, $user_data, $payment_data, $contract_data);\n     *\n     * 正常系\n     */\n    public function test_update_data_正常系()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[102,0],[109,0]],"newRange":[[102,0],[102,0]],"oldText":"        // 対象コントローラクラスのインスタンスを作成\n        $request = Request::forge(self::get_url('api/user/v1/users/detail'));\n        $target_instance = new Controller_Api_User_Detail($request);\n        // インスタンスをもとにメソッドを生成して呼び出し\n        $method = self::getMethod('Controller_Api_User_Detail', 'update_data');\n        $input  = $this->mock_input();\n        $method->invokeArgs($target_instance, array($input, self::$USER_ID));\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[103,0],[103,0]],"newRange":[[103,0],[106,0]],"oldText":"","newText":"        $curl = new MyCurl();\n        // ログイン\n        $curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[106,0],[117,0]],"newRange":[[106,0],[106,0]],"oldText":"        $user_data = Model_Logic_Account::find_by_user_id(self::$USER_ID);\n        $contracts = Model_Datasource_Contract::find_by_user_id(self::$USER_ID);\n        $contract  = $contracts[0];\n        $this->assertEquals($input['name'], $user_data['user_name']);\n        $this->assertEquals(strval($input['phonenumber']), strval($user_data['telephone']));\n        $this->assertNotNull(password_verify($input['new_password'], $user_data['password']));\n        $this->assertEquals(intval($input['space_type_id']), intval($contract['space_id']));\n        $this->assertEquals(mb_substr($input['card_number'], -4), $user_data['card_last4']);\n        $this->assertEquals($input['card_exp_year'], $user_data['card_expire_year']);\n        $this->assertEquals($input['card_exp_month'], $user_data['card_expire_month']);\n    }\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[107,0],[107,0]],"newRange":[[107,0],[117,0]],"oldText":"","newText":"        // 詳細更新\n        $input = $this->mock_input();\n        $params = array(\n            'url' => self::get_url('api/user/v1/detail'),\n            'http' => $input,\n        );\n        $result = $curl->post_json($params);\n        $http_status = $result['http_status'];\n        $this->assertEquals(200, $http_status);\n        $response_body = $result['output'];\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[117,0],[134,0]],"newRange":[[117,0],[117,0]],"oldText":"    /**\n     * 会員情報更新APIでモデルメソッドを取り扱うprivateなメソッドをテスト\n     * Controller_Api_User_Detail::update_data()\n     * Model_Logic_Account::update($user_id, $user_data, $payment_data, $contract_data);\n     *\n     * 非必須の項目がバリデーションに抵触する際はその項目を更新しない.\n     */\n    public function test_update_data_非必須項目が空文字の場合はその項目を更新しない()\n    {\n        // 対象コントローラクラスのインスタンスを作成\n        $request = Request::forge(self::get_url('api/user/v1/users/detail'));\n        $target_instance = new Controller_Api_User_Detail($request);\n        // インスタンスをもとにメソッドを生成して呼び出し\n        $method = self::getMethod('Controller_Api_User_Detail', 'update_data');\n        $input  = $this->mock_input();\n        $input['name'] = \"\";\n        $method->invokeArgs($target_instance, array($input, self::$USER_ID));\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[118,0],[118,0]],"newRange":[[118,0],[125,0]],"oldText":"","newText":"        $user_data = $response_body['user'];\n        $this->assertEquals($input['name'], $user_data['name']);\n        $this->assertEquals(strval($input['phonenumber']), strval($user_data['phonenumber']));\n        $this->assertEquals(intval($input['space_type_id']), intval($user_data['space_type_id']));\n        $this->assertEquals(mb_substr($input['card_number'], -4), $user_data['card_last4']);\n        $this->assertEquals($input['card_exp_year'], $user_data['card_exp_year']);\n        $this->assertEquals($input['card_exp_month'], $user_data['card_exp_month']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[125,0],[127,0]],"newRange":[[125,0],[125,0]],"oldText":"        $user_data = Model_Logic_Account::find_by_user_id(self::$USER_ID);\n        $this->assertEquals(self::$USER_DATA['user_name'], $user_data['user_name']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[127,0],[127,0]],"newRange":[[127,0],[128,0]],"oldText":"","newText":"    public function test_post_index_非必須項目が空文字の場合はその項目を更新しない()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[128,0],[135,0]],"newRange":[[128,0],[128,0]],"oldText":"    /**\n     * 会員情報取得API, 会員情報更新APIで最新の会員情報を取得し適切な形に成形するprivateなメソッドをテスト\n     * Controller_Api_User_Detail::make_response_data()\n     *\n     * 正常系\n     */\n    public function test_make_response_data_正常系()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[129,0],[129,0]],"newRange":[[129,0],[132,0]],"oldText":"","newText":"        $curl = new MyCurl();\n        // ログイン\n        $curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[132,0],[139,0]],"newRange":[[132,0],[132,0]],"oldText":"        // 対象コントローラクラスのインスタンスを作成\n        $request = Request::forge(self::get_url('api/user/v1/users/detail'));\n        $target_instance = new Controller_Api_User_Detail($request);\n        // インスタンスをもとにメソッドを生成して呼び出し\n        $method = self::getMethod('Controller_Api_User_Detail', 'make_response_data');\n        $result = $method->invokeArgs($target_instance, array(self::$USER_ID));\n        $user   =  $result['user'];\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[133,0],[133,0]],"newRange":[[133,0],[144,0]],"oldText":"","newText":"        // 詳細更新\n        $input = $this->mock_input();\n        $input['name'] = \"\";\n        $params = array(\n            'url' => self::get_url('api/user/v1/detail'),\n            'http' => $input,\n        );\n        $result = $curl->post_json($params);\n        $http_status = $result['http_status'];\n        $this->assertEquals(200, $http_status);\n        $response_body = $result['output'];\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[144,0],[149,0]],"newRange":[[144,0],[144,0]],"oldText":"        $this->assertNotNull($result, 'make_response_data($user_id)の結果がnullでない');\n        $this->assertNotNull($user, '$result[\"user\"]がnullでない');\n        $this->assertEquals($user['user_id'], self::$USER_ID);\n        $this->assertEquals($user['name'], self::$USER_DATA['user_name']);\n        $this->assertEquals($user['phonenumber'], self::$USER_DATA['telephone']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[145,0],[145,0]],"newRange":[[145,0],[152,0]],"oldText":"","newText":"        $user_data = $response_body['user'];\n        $this->assertEquals('広家 太郎', $user_data['name']);\n        $this->assertEquals(strval($input['phonenumber']), strval($user_data['phonenumber']));\n        $this->assertEquals(intval($input['space_type_id']), intval($user_data['space_type_id']));\n        $this->assertEquals(mb_substr($input['card_number'], -4), $user_data['card_last4']);\n        $this->assertEquals($input['card_exp_year'], $user_data['card_exp_year']);\n        $this->assertEquals($input['card_exp_month'], $user_data['card_exp_month']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[152,0],[168,0]],"newRange":[[152,0],[152,0]],"oldText":"        // contract\n        $this->assertEquals($user['space_type_id'], self::$SPACE_TYPE_ID);\n        $this->assertEquals($user['filled_space_size'], self::$FILLED_SPACE_SIZE);\n        $this->assertEquals($user['filled_number_of_tatami'], self::$FILLED_NUMBER_OF_TATAMI);\n\n        // card\n        $this->assertEquals($user['card_last4'], mb_substr(self::$PAYMENT_DATA['card_number'], -4));\n        $this->assertEquals($user['card_exp_year'], self::$PAYMENT_DATA['card_expire_year']);\n        $this->assertEquals($user['card_exp_month'], self::$PAYMENT_DATA['card_expire_month']);\n\n        // promotion\n        $promotions = Model_Logic_Campaign::find_promotion_code_by_user_id(self::$USER_ID);\n        $promotion = $promotions[0];\n        $this->assertEquals($user['promotion_code'], $promotion['promotion_code']);\n        $this->assertEquals($user['promotion_description'], $promotion['description']);\n        $this->assertEquals($user['promotion_share_body'], $promotion['message']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[154,0],[154,0]],"newRange":[[154,0],[155,0]],"oldText":"","newText":"    public function test_db_initialized()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[155,0],[160,0]],"newRange":[[155,0],[155,0]],"oldText":"    /**\n     * データの削除\n     *\n     */\n    private function cleanup_tables()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[156,0],[156,0]],"newRange":[[156,0],[159,0]],"oldText":"","newText":"        $user = Model_Datasource_User::find_by_user_id(self::$USER_ID);\n        $this->assertTrue(array_key_exists('user_id', $user));\n        $this->assertEquals(self::$USER_DATA['user_name'], $user['user_name']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[159,0],[186,0]],"newRange":[[159,0],[159,0]],"oldText":"        if (self::$BAGGAGE_ID)\n        {\n            // t_baggage\n\t\t\tDB::delete('t_baggage')->where('baggage_id', self::$BAGGAGE_ID)->execute();\n        }\n\t\tif (self::$CONTRACT_ID)\n\t\t{\n            // t_contract_log\n            DB::delete('t_contract_log')->where('contract_id', self::$CONTRACT_ID)->execute();\n            // t_contract\n\t\t\tDB::delete('t_contract')->where('contract_id', self::$CONTRACT_ID)->execute();\n\t\t}\n\t\tif (self::$USER_ID)\n\t\t{\n            // t_request_log\n            DB::delete('t_request_log')->where('user_id', self::$USER_ID)->execute();\n            // t_request\n\t\t\tDB::delete('t_request')->where('user_id', self::$USER_ID)->execute();\n            // t_message\n            DB::delete('t_message')->where('user_id', self::$USER_ID)->execute();\n            // t_promotion\n            DB::delete('t_promotion')->where('user_id', self::$USER_ID)->execute();\n            // t_sales\n            DB::delete('t_sales')->where('user_id', self::$USER_ID)->execute();\n            // t_user\n            DB::delete('t_user')->where('user_id', self::$USER_ID)->execute();\n\t\t}\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[161,0],[175,0]],"newRange":[[161,0],[161,0]],"oldText":"    /**\n     * テストデータの準備\n     *\n     */\n    private function prepare_tables()\n    {\n        // ユーザデータ作成\n        self::$USER_DATA['telephone'] = Util_Utility::get_random_number(11);\n        $user_data       = self::$USER_DATA;\n\t\t$payment_data    = self::$PAYMENT_DATA + array('coupon' => '');\n\t\t$contract_data   = array('space_id' => self::$SPACE_TYPE_ID);\n\t\t$result          = Model_Logic_Contract::contract($user_data, $payment_data, $contract_data);\n\t\tself::$USER_ID = $result['user_id'];\n        self::$CONTRACT_ID = $result['contract_id'];\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[162,0],[182,0]],"newRange":[[162,0],[162,0]],"oldText":"        // 荷物データ登録（使用状況をゼロ以外に）\n        $baggage_type_id = 10000030;\n        $baggage_data = array(\n            'warehouse_id'    => Constants::$WAREHOUSE_DEFAULT, \n            'user_id'         => self::$USER_ID,\n            'baggage_type_id' => $baggage_type_id,\n            'photo_group_id'  => null,\n            'status'          => Constants::$BAGGAGE_STATUS_STORED,\n            'title'           => 'テスト荷物',\n            'description'     => 'テスト荷物説明',\n            'code'            => null,\n        );\n\n        list($baggage_id, $rows_affected) = Model_Datasource_Baggage::create($baggage_data);\n        $baggage_type = Model_Datasource_BaggageType::find_by_baggage_type_id($baggage_type_id);\n        self::$FILLED_SPACE_SIZE = $baggage_type['space_size'];\n        self::$FILLED_NUMBER_OF_TATAMI = Model_Logic_Space::get_filled_area(self::$SPACE_TYPE_ID, self::$FILLED_SPACE_SIZE);\n        self::$BAGGAGE_ID = $baggage_id;\n    }\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[166,0],[166,0]],"newRange":[[166,0],[169,0]],"oldText":"","newText":"            'name'\t\t\t=> 'テストユーザ名前変更後',\n            'phonenumber'\t=> $phonenumber_new,\n            'new_password'\t=> 'password_new',\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[169,0],[172,0]],"newRange":[[169,0],[169,0]],"oldText":"            'name' => 'テストユーザ名前変更後',\n            'phonenumber' => $phonenumber_new,\n            'new_password' => 'password_new',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[171,0],[171,0]],"newRange":[[171,0],[173,0]],"oldText":"","newText":"            'card_exp_month'=> 4,\n            'card_number'   => '1111222233335555',\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[173,0],[175,0]],"newRange":[[173,0],[173,0]],"oldText":"            'card_exp_month' => 4,\n            'card_number'       => '1111222233335555',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[176,0],[176,0]],"newRange":[[176,0],[177,0]],"oldText":"","newText":"}\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[177,0],[177,1]],"newRange":[[177,0],[177,0]],"oldText":"}","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[168,0],[168,0]],"newRange":[[168,0],[169,0]],"oldText":"","newText":"            'new_password'\t=> 'passwordnew',\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[169,0],[170,0]],"newRange":[[169,0],[169,0]],"oldText":"            'new_password'\t=> 'password_new',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[11,0],[11,0]],"newRange":[[11,0],[12,0]],"oldText":"","newText":"    private static $USER_ID       = null;\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[12,0],[16,0]],"newRange":[[12,0],[12,0]],"oldText":"\n    protected $is_include_db_test = TRUE;\n\n    private static $USER_ID       = 161300000;\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[15,0],[15,0]],"newRange":[[15,0],[16,0]],"oldText":"","newText":"        'user_name' => 'テストユーザ名前',\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[16,0],[17,0]],"newRange":[[16,0],[16,0]],"oldText":"        'user_name' => '広家 太郎',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[17,0],[17,0]],"newRange":[[17,0],[18,0]],"oldText":"","newText":"        'password'  => '1',\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[18,0],[20,0]],"newRange":[[18,0],[18,0]],"oldText":"        'password'  => '$2y$10$RtYNwe2jRfRZ4vnWDGOsZ.e/HW0R26NlGm8yNyRqMsmkcQjjlkPYa', // '012345678'\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[28,0],[28,0]],"newRange":[[28,0],[39,0]],"oldText":"","newText":"    public function setup()\n    {\n        $this->cleanup_tables();\n        $this->prepare_tables();\n    }\n\n    public function tearDown()\n    {\n        $this->cleanup_tables();\n    }\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[43,0],[43,0]],"newRange":[[43,0],[45,0]],"oldText":"","newText":"     * \n     * @expectedException RequestStatusException\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[45,0],[46,0]],"newRange":[[45,0],[45,0]],"oldText":"     *\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[46,0],[46,0]],"newRange":[[46,0],[47,0]],"oldText":"","newText":"    public function test_post_index_セッションがないため例外()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[47,0],[48,0]],"newRange":[[47,0],[47,0]],"oldText":"    public function test_post_index_セッションがないため失敗()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[48,0],[48,0]],"newRange":[[48,0],[55,0]],"oldText":"","newText":"        $param = $this->mock_input();\n        $response = Request::forge(self::get_url('api/user/v1/users/detail'), 'curl')\n            ->set_method('POST')\n            ->set_header('api_key', self::get_api_key())\n            ->set_params($param)\n            ->execute()\n            ->response();\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[55,0],[69,0]],"newRange":[[55,0],[55,0]],"oldText":"        $curl = new MyCurl();\n\n        // ログインしない\n        // $curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n        // 詳細更新\n        $params = array(\n            'url' => self::get_url('api/user/v1/detail'),\n            'http' => $this->mock_input(),\n        );\n        $result = $curl->post_json($params);\n        $http_status = $result['http_status'];\n        $response_body = $result['output'];\n        $this->assertEquals(401, $http_status);\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[61,0],[61,0]],"newRange":[[61,0],[63,0]],"oldText":"","newText":"     * \n     * @expectedException RequestStatusException\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[63,0],[64,0]],"newRange":[[63,0],[63,0]],"oldText":"     *\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[66,0],[66,0]],"newRange":[[66,0],[71,0]],"oldText":"","newText":"        $response = Request::forge(self::get_url('api/user/v1/users/detail'), 'curl')\n            ->set_method('GET')\n            ->set_header('api_key', self::get_api_key())\n            ->execute()\n            ->response();\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[71,0],[81,0]],"newRange":[[71,0],[71,0]],"oldText":"\n        $curl = new MyCurl();\n        // 詳細取得\n        $params = array(\n            'url' => self::get_url('api/user/v1/detail'),\n            'http' => $this->mock_input(),\n        );\n        $result = $curl->post_json($params);\n        $http_status = $result['http_status'];\n        $this->assertEquals(401, $http_status);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[97,0],[97,0]],"newRange":[[97,0],[105,0]],"oldText":"","newText":"    /**\n     * 会員情報更新APIでモデルメソッドを取り扱うprivateなメソッドをテスト\n     * Controller_Api_User_Detail::update_data()\n     * Model_Logic_Account::update($user_id, $user_data, $payment_data, $contract_data);\n     *\n     * 正常系\n     */\n    public function test_update_data_正常系()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[105,0],[106,0]],"newRange":[[105,0],[105,0]],"oldText":"    public function test_post_index_正常系()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[106,0],[106,0]],"newRange":[[106,0],[113,0]],"oldText":"","newText":"        // 対象コントローラクラスのインスタンスを作成\n        $request = Request::forge(self::get_url('api/user/v1/users/detail'));\n        $target_instance = new Controller_Api_User_Detail($request);\n        // インスタンスをもとにメソッドを生成して呼び出し\n        $method = self::getMethod('Controller_Api_User_Detail', 'update_data');\n        $input  = $this->mock_input();\n        $method->invokeArgs($target_instance, array($input, self::$USER_ID));\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[114,0],[114,0]],"newRange":[[114,0],[125,0]],"oldText":"","newText":"        $user_data = Model_Logic_Account::find_by_user_id(self::$USER_ID);\n        $contracts = Model_Datasource_Contract::find_by_user_id(self::$USER_ID);\n        $contract  = $contracts[0];\n        $this->assertEquals($input['name'], $user_data['user_name']);\n        $this->assertEquals(strval($input['phonenumber']), strval($user_data['telephone']));\n        $this->assertNotNull(password_verify($input['new_password'], $user_data['password']));\n        $this->assertEquals(intval($input['space_type_id']), intval($contract['space_id']));\n        $this->assertEquals(mb_substr($input['card_number'], -4), $user_data['card_last4']);\n        $this->assertEquals($input['card_exp_year'], $user_data['card_expire_year']);\n        $this->assertEquals($input['card_exp_month'], $user_data['card_expire_month']);\n    }\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[125,0],[128,0]],"newRange":[[125,0],[125,0]],"oldText":"        $curl = new MyCurl();\n        // ログイン\n        $curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[126,0],[126,0]],"newRange":[[126,0],[143,0]],"oldText":"","newText":"    /**\n     * 会員情報更新APIでモデルメソッドを取り扱うprivateなメソッドをテスト\n     * Controller_Api_User_Detail::update_data()\n     * Model_Logic_Account::update($user_id, $user_data, $payment_data, $contract_data);\n     *\n     * 非必須の項目がバリデーションに抵触する際はその項目を更新しない.\n     */\n    public function test_update_data_非必須項目が空文字の場合はその項目を更新しない()\n    {\n        // 対象コントローラクラスのインスタンスを作成\n        $request = Request::forge(self::get_url('api/user/v1/users/detail'));\n        $target_instance = new Controller_Api_User_Detail($request);\n        // インスタンスをもとにメソッドを生成して呼び出し\n        $method = self::getMethod('Controller_Api_User_Detail', 'update_data');\n        $input  = $this->mock_input();\n        $input['name'] = \"\";\n        $method->invokeArgs($target_instance, array($input, self::$USER_ID));\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[143,0],[153,0]],"newRange":[[143,0],[143,0]],"oldText":"        // 詳細更新\n        $input = $this->mock_input();\n        $params = array(\n            'url' => self::get_url('api/user/v1/detail'),\n            'http' => $input,\n        );\n        $result = $curl->post_json($params);\n        $http_status = $result['http_status'];\n        $this->assertEquals(200, $http_status);\n        $response_body = $result['output'];\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[144,0],[144,0]],"newRange":[[144,0],[146,0]],"oldText":"","newText":"        $user_data = Model_Logic_Account::find_by_user_id(self::$USER_ID);\n        $this->assertEquals(self::$USER_DATA['user_name'], $user_data['user_name']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[146,0],[153,0]],"newRange":[[146,0],[146,0]],"oldText":"        $user_data = $response_body['user'];\n        $this->assertEquals($input['name'], $user_data['name']);\n        $this->assertEquals(strval($input['phonenumber']), strval($user_data['phonenumber']));\n        $this->assertEquals(intval($input['space_type_id']), intval($user_data['space_type_id']));\n        $this->assertEquals(mb_substr($input['card_number'], -4), $user_data['card_last4']);\n        $this->assertEquals($input['card_exp_year'], $user_data['card_exp_year']);\n        $this->assertEquals($input['card_exp_month'], $user_data['card_exp_month']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[148,0],[148,0]],"newRange":[[148,0],[155,0]],"oldText":"","newText":"    /**\n     * 会員情報取得API, 会員情報更新APIで最新の会員情報を取得し適切な形に成形するprivateなメソッドをテスト\n     * Controller_Api_User_Detail::make_response_data()\n     *\n     * 正常系\n     */\n    public function test_make_response_data_正常系()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[155,0],[156,0]],"newRange":[[155,0],[155,0]],"oldText":"    public function test_post_index_非必須項目が空文字の場合はその項目を更新しない()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[156,0],[156,0]],"newRange":[[156,0],[163,0]],"oldText":"","newText":"        // 対象コントローラクラスのインスタンスを作成\n        $request = Request::forge(self::get_url('api/user/v1/users/detail'));\n        $target_instance = new Controller_Api_User_Detail($request);\n        // インスタンスをもとにメソッドを生成して呼び出し\n        $method = self::getMethod('Controller_Api_User_Detail', 'make_response_data');\n        $result = $method->invokeArgs($target_instance, array(self::$USER_ID));\n        $user   =  $result['user'];\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[163,0],[166,0]],"newRange":[[163,0],[163,0]],"oldText":"        $curl = new MyCurl();\n        // ログイン\n        $curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[164,0],[164,0]],"newRange":[[164,0],[169,0]],"oldText":"","newText":"        $this->assertNotNull($result, 'make_response_data($user_id)の結果がnullでない');\n        $this->assertNotNull($user, '$result[\"user\"]がnullでない');\n        $this->assertEquals($user['user_id'], self::$USER_ID);\n        $this->assertEquals($user['name'], self::$USER_DATA['user_name']);\n        $this->assertEquals($user['phonenumber'], self::$USER_DATA['telephone']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[169,0],[180,0]],"newRange":[[169,0],[169,0]],"oldText":"        // 詳細更新\n        $input = $this->mock_input();\n        $input['name'] = \"\";\n        $params = array(\n            'url' => self::get_url('api/user/v1/detail'),\n            'http' => $input,\n        );\n        $result = $curl->post_json($params);\n        $http_status = $result['http_status'];\n        $this->assertEquals(200, $http_status);\n        $response_body = $result['output'];\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[170,0],[170,0]],"newRange":[[170,0],[186,0]],"oldText":"","newText":"        // contract\n        $this->assertEquals($user['space_type_id'], self::$SPACE_TYPE_ID);\n        $this->assertEquals($user['filled_space_size'], self::$FILLED_SPACE_SIZE);\n        $this->assertEquals($user['filled_number_of_tatami'], self::$FILLED_NUMBER_OF_TATAMI);\n\n        // card\n        $this->assertEquals($user['card_last4'], mb_substr(self::$PAYMENT_DATA['card_number'], -4));\n        $this->assertEquals($user['card_exp_year'], self::$PAYMENT_DATA['card_expire_year']);\n        $this->assertEquals($user['card_exp_month'], self::$PAYMENT_DATA['card_expire_month']);\n\n        // promotion\n        $promotions = Model_Logic_Campaign::find_promotion_code_by_user_id(self::$USER_ID);\n        $promotion = $promotions[0];\n        $this->assertEquals($user['promotion_code'], $promotion['promotion_code']);\n        $this->assertEquals($user['promotion_description'], $promotion['description']);\n        $this->assertEquals($user['promotion_share_body'], $promotion['message']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[186,0],[193,0]],"newRange":[[186,0],[186,0]],"oldText":"        $user_data = $response_body['user'];\n        $this->assertEquals('広家 太郎', $user_data['name']);\n        $this->assertEquals(strval($input['phonenumber']), strval($user_data['phonenumber']));\n        $this->assertEquals(intval($input['space_type_id']), intval($user_data['space_type_id']));\n        $this->assertEquals(mb_substr($input['card_number'], -4), $user_data['card_last4']);\n        $this->assertEquals($input['card_exp_year'], $user_data['card_exp_year']);\n        $this->assertEquals($input['card_exp_month'], $user_data['card_exp_month']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[188,0],[188,0]],"newRange":[[188,0],[193,0]],"oldText":"","newText":"    /**\n     * データの削除\n     *\n     */\n    private function cleanup_tables()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[193,0],[194,0]],"newRange":[[193,0],[193,0]],"oldText":"    public function test_db_initialized()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[194,0],[194,0]],"newRange":[[194,0],[221,0]],"oldText":"","newText":"        if (self::$BAGGAGE_ID)\n        {\n            // t_baggage\n\t\t\tDB::delete('t_baggage')->where('baggage_id', self::$BAGGAGE_ID)->execute();\n        }\n\t\tif (self::$CONTRACT_ID)\n\t\t{\n            // t_contract_log\n            DB::delete('t_contract_log')->where('contract_id', self::$CONTRACT_ID)->execute();\n            // t_contract\n\t\t\tDB::delete('t_contract')->where('contract_id', self::$CONTRACT_ID)->execute();\n\t\t}\n\t\tif (self::$USER_ID)\n\t\t{\n            // t_request_log\n            DB::delete('t_request_log')->where('user_id', self::$USER_ID)->execute();\n            // t_request\n\t\t\tDB::delete('t_request')->where('user_id', self::$USER_ID)->execute();\n            // t_message\n            DB::delete('t_message')->where('user_id', self::$USER_ID)->execute();\n            // t_promotion\n            DB::delete('t_promotion')->where('user_id', self::$USER_ID)->execute();\n            // t_sales\n            DB::delete('t_sales')->where('user_id', self::$USER_ID)->execute();\n            // t_user\n            DB::delete('t_user')->where('user_id', self::$USER_ID)->execute();\n\t\t}\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[221,0],[224,0]],"newRange":[[221,0],[221,0]],"oldText":"        $user = Model_Datasource_User::find_by_user_id(self::$USER_ID);\n        $this->assertTrue(array_key_exists('user_id', $user));\n        $this->assertEquals(self::$USER_DATA['user_name'], $user['user_name']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[223,0],[223,0]],"newRange":[[223,0],[237,0]],"oldText":"","newText":"    /**\n     * テストデータの準備\n     *\n     */\n    private function prepare_tables()\n    {\n        // ユーザデータ作成\n        self::$USER_DATA['telephone'] = Util_Utility::get_random_number(11);\n        $user_data       = self::$USER_DATA;\n\t\t$payment_data    = self::$PAYMENT_DATA + array('coupon' => '');\n\t\t$contract_data   = array('space_id' => self::$SPACE_TYPE_ID);\n\t\t$result          = Model_Logic_Contract::contract($user_data, $payment_data, $contract_data);\n\t\tself::$USER_ID = $result['user_id'];\n        self::$CONTRACT_ID = $result['contract_id'];\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[238,0],[238,0]],"newRange":[[238,0],[258,0]],"oldText":"","newText":"        // 荷物データ登録（使用状況をゼロ以外に）\n        $baggage_type_id = 10000030;\n        $baggage_data = array(\n            'warehouse_id'    => Constants::$WAREHOUSE_DEFAULT, \n            'user_id'         => self::$USER_ID,\n            'baggage_type_id' => $baggage_type_id,\n            'photo_group_id'  => null,\n            'status'          => Constants::$BAGGAGE_STATUS_STORED,\n            'title'           => 'テスト荷物',\n            'description'     => 'テスト荷物説明',\n            'code'            => null,\n        );\n\n        list($baggage_id, $rows_affected) = Model_Datasource_Baggage::create($baggage_data);\n        $baggage_type = Model_Datasource_BaggageType::find_by_baggage_type_id($baggage_type_id);\n        self::$FILLED_SPACE_SIZE = $baggage_type['space_size'];\n        self::$FILLED_NUMBER_OF_TATAMI = Model_Logic_Space::get_filled_area(self::$SPACE_TYPE_ID, self::$FILLED_SPACE_SIZE);\n        self::$BAGGAGE_ID = $baggage_id;\n    }\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[262,0],[262,0]],"newRange":[[262,0],[265,0]],"oldText":"","newText":"            'name' => 'テストユーザ名前変更後',\n            'phonenumber' => $phonenumber_new,\n            'new_password' => 'password_new',\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[265,0],[268,0]],"newRange":[[265,0],[265,0]],"oldText":"            'name'\t\t\t=> 'テストユーザ名前変更後',\n            'phonenumber'\t=> $phonenumber_new,\n            'new_password'\t=> 'passwordnew',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[267,0],[267,0]],"newRange":[[267,0],[269,0]],"oldText":"","newText":"            'card_exp_month' => 4,\n            'card_number'       => '1111222233335555',\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[269,0],[271,0]],"newRange":[[269,0],[269,0]],"oldText":"            'card_exp_month'=> 4,\n            'card_number'   => '1111222233335555',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[272,0],[272,0]],"newRange":[[272,0],[272,1]],"oldText":"","newText":"}","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[272,1],[273,0]],"newRange":[[272,1],[272,1]],"oldText":"}\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[11,0],[11,0]],"newRange":[[11,0],[15,0]],"oldText":"","newText":"\n    protected $is_include_db_test = TRUE;\n\n    private static $USER_ID       = 161300000;\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[15,0],[16,0]],"newRange":[[15,0],[15,0]],"oldText":"    private static $USER_ID       = null;\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[18,0],[18,0]],"newRange":[[18,0],[19,0]],"oldText":"","newText":"        'user_name' => '広家 太郎',\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[19,0],[20,0]],"newRange":[[19,0],[19,0]],"oldText":"        'user_name' => 'テストユーザ名前',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[20,0],[20,0]],"newRange":[[20,0],[22,0]],"oldText":"","newText":"        'password'  => '$2y$10$RtYNwe2jRfRZ4vnWDGOsZ.e/HW0R26NlGm8yNyRqMsmkcQjjlkPYa', // '012345678'\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[22,0],[23,0]],"newRange":[[22,0],[22,0]],"oldText":"        'password'  => '1',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[32,0],[43,0]],"newRange":[[32,0],[32,0]],"oldText":"    public function setup()\n    {\n        $this->cleanup_tables();\n        $this->prepare_tables();\n    }\n\n    public function tearDown()\n    {\n        $this->cleanup_tables();\n    }\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[36,0],[36,0]],"newRange":[[36,0],[37,0]],"oldText":"","newText":"     *\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[37,0],[39,0]],"newRange":[[37,0],[37,0]],"oldText":"     * \n     * @expectedException RequestStatusException\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[38,0],[38,0]],"newRange":[[38,0],[39,0]],"oldText":"","newText":"    public function test_post_index_セッションがないため失敗()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[39,0],[40,0]],"newRange":[[39,0],[39,0]],"oldText":"    public function test_post_index_セッションがないため例外()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[40,0],[40,0]],"newRange":[[40,0],[54,0]],"oldText":"","newText":"        $curl = new MyCurl();\n\n        // ログインしない\n        // $curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n        // 詳細更新\n        $params = array(\n            'url' => self::get_url('api/user/v1/detail'),\n            'http' => $this->mock_input(),\n        );\n        $result = $curl->post_json($params);\n        $http_status = $result['http_status'];\n        $response_body = $result['output'];\n        $this->assertEquals(401, $http_status);\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[54,0],[61,0]],"newRange":[[54,0],[54,0]],"oldText":"        $param = $this->mock_input();\n        $response = Request::forge(self::get_url('api/user/v1/users/detail'), 'curl')\n            ->set_method('POST')\n            ->set_header('api_key', self::get_api_key())\n            ->set_params($param)\n            ->execute()\n            ->response();\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[60,0],[60,0]],"newRange":[[60,0],[61,0]],"oldText":"","newText":"     *\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[61,0],[63,0]],"newRange":[[61,0],[61,0]],"oldText":"     * \n     * @expectedException RequestStatusException\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[64,0],[64,0]],"newRange":[[64,0],[74,0]],"oldText":"","newText":"\n        $curl = new MyCurl();\n        // 詳細取得\n        $params = array(\n            'url' => self::get_url('api/user/v1/detail'),\n            'http' => $this->mock_input(),\n        );\n        $result = $curl->post_json($params);\n        $http_status = $result['http_status'];\n        $this->assertEquals(401, $http_status);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[74,0],[79,0]],"newRange":[[74,0],[74,0]],"oldText":"        $response = Request::forge(self::get_url('api/user/v1/users/detail'), 'curl')\n            ->set_method('GET')\n            ->set_header('api_key', self::get_api_key())\n            ->execute()\n            ->response();\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[100,0],[100,0]],"newRange":[[100,0],[101,0]],"oldText":"","newText":"    public function test_post_index_正常系()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[101,0],[109,0]],"newRange":[[101,0],[101,0]],"oldText":"    /**\n     * 会員情報更新APIでモデルメソッドを取り扱うprivateなメソッドをテスト\n     * Controller_Api_User_Detail::update_data()\n     * Model_Logic_Account::update($user_id, $user_data, $payment_data, $contract_data);\n     *\n     * 正常系\n     */\n    public function test_update_data_正常系()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[102,0],[109,0]],"newRange":[[102,0],[102,0]],"oldText":"        // 対象コントローラクラスのインスタンスを作成\n        $request = Request::forge(self::get_url('api/user/v1/users/detail'));\n        $target_instance = new Controller_Api_User_Detail($request);\n        // インスタンスをもとにメソッドを生成して呼び出し\n        $method = self::getMethod('Controller_Api_User_Detail', 'update_data');\n        $input  = $this->mock_input();\n        $method->invokeArgs($target_instance, array($input, self::$USER_ID));\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[103,0],[103,0]],"newRange":[[103,0],[106,0]],"oldText":"","newText":"        $curl = new MyCurl();\n        // ログイン\n        $curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[106,0],[117,0]],"newRange":[[106,0],[106,0]],"oldText":"        $user_data = Model_Logic_Account::find_by_user_id(self::$USER_ID);\n        $contracts = Model_Datasource_Contract::find_by_user_id(self::$USER_ID);\n        $contract  = $contracts[0];\n        $this->assertEquals($input['name'], $user_data['user_name']);\n        $this->assertEquals(strval($input['phonenumber']), strval($user_data['telephone']));\n        $this->assertNotNull(password_verify($input['new_password'], $user_data['password']));\n        $this->assertEquals(intval($input['space_type_id']), intval($contract['space_id']));\n        $this->assertEquals(mb_substr($input['card_number'], -4), $user_data['card_last4']);\n        $this->assertEquals($input['card_exp_year'], $user_data['card_expire_year']);\n        $this->assertEquals($input['card_exp_month'], $user_data['card_expire_month']);\n    }\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[107,0],[107,0]],"newRange":[[107,0],[117,0]],"oldText":"","newText":"        // 詳細更新\n        $input = $this->mock_input();\n        $params = array(\n            'url' => self::get_url('api/user/v1/detail'),\n            'http' => $input,\n        );\n        $result = $curl->post_json($params);\n        $http_status = $result['http_status'];\n        $this->assertEquals(200, $http_status);\n        $response_body = $result['output'];\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[117,0],[134,0]],"newRange":[[117,0],[117,0]],"oldText":"    /**\n     * 会員情報更新APIでモデルメソッドを取り扱うprivateなメソッドをテスト\n     * Controller_Api_User_Detail::update_data()\n     * Model_Logic_Account::update($user_id, $user_data, $payment_data, $contract_data);\n     *\n     * 非必須の項目がバリデーションに抵触する際はその項目を更新しない.\n     */\n    public function test_update_data_非必須項目が空文字の場合はその項目を更新しない()\n    {\n        // 対象コントローラクラスのインスタンスを作成\n        $request = Request::forge(self::get_url('api/user/v1/users/detail'));\n        $target_instance = new Controller_Api_User_Detail($request);\n        // インスタンスをもとにメソッドを生成して呼び出し\n        $method = self::getMethod('Controller_Api_User_Detail', 'update_data');\n        $input  = $this->mock_input();\n        $input['name'] = \"\";\n        $method->invokeArgs($target_instance, array($input, self::$USER_ID));\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[118,0],[118,0]],"newRange":[[118,0],[125,0]],"oldText":"","newText":"        $user_data = $response_body['user'];\n        $this->assertEquals($input['name'], $user_data['name']);\n        $this->assertEquals(strval($input['phonenumber']), strval($user_data['phonenumber']));\n        $this->assertEquals(intval($input['space_type_id']), intval($user_data['space_type_id']));\n        $this->assertEquals(mb_substr($input['card_number'], -4), $user_data['card_last4']);\n        $this->assertEquals($input['card_exp_year'], $user_data['card_exp_year']);\n        $this->assertEquals($input['card_exp_month'], $user_data['card_exp_month']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[125,0],[127,0]],"newRange":[[125,0],[125,0]],"oldText":"        $user_data = Model_Logic_Account::find_by_user_id(self::$USER_ID);\n        $this->assertEquals(self::$USER_DATA['user_name'], $user_data['user_name']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[127,0],[127,0]],"newRange":[[127,0],[128,0]],"oldText":"","newText":"    public function test_post_index_非必須項目が空文字の場合はその項目を更新しない()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[128,0],[135,0]],"newRange":[[128,0],[128,0]],"oldText":"    /**\n     * 会員情報取得API, 会員情報更新APIで最新の会員情報を取得し適切な形に成形するprivateなメソッドをテスト\n     * Controller_Api_User_Detail::make_response_data()\n     *\n     * 正常系\n     */\n    public function test_make_response_data_正常系()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[129,0],[129,0]],"newRange":[[129,0],[132,0]],"oldText":"","newText":"        $curl = new MyCurl();\n        // ログイン\n        $curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[132,0],[139,0]],"newRange":[[132,0],[132,0]],"oldText":"        // 対象コントローラクラスのインスタンスを作成\n        $request = Request::forge(self::get_url('api/user/v1/users/detail'));\n        $target_instance = new Controller_Api_User_Detail($request);\n        // インスタンスをもとにメソッドを生成して呼び出し\n        $method = self::getMethod('Controller_Api_User_Detail', 'make_response_data');\n        $result = $method->invokeArgs($target_instance, array(self::$USER_ID));\n        $user   =  $result['user'];\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[133,0],[133,0]],"newRange":[[133,0],[144,0]],"oldText":"","newText":"        // 詳細更新\n        $input = $this->mock_input();\n        $input['name'] = \"\";\n        $params = array(\n            'url' => self::get_url('api/user/v1/detail'),\n            'http' => $input,\n        );\n        $result = $curl->post_json($params);\n        $http_status = $result['http_status'];\n        $this->assertEquals(200, $http_status);\n        $response_body = $result['output'];\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[144,0],[149,0]],"newRange":[[144,0],[144,0]],"oldText":"        $this->assertNotNull($result, 'make_response_data($user_id)の結果がnullでない');\n        $this->assertNotNull($user, '$result[\"user\"]がnullでない');\n        $this->assertEquals($user['user_id'], self::$USER_ID);\n        $this->assertEquals($user['name'], self::$USER_DATA['user_name']);\n        $this->assertEquals($user['phonenumber'], self::$USER_DATA['telephone']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[145,0],[145,0]],"newRange":[[145,0],[152,0]],"oldText":"","newText":"        $user_data = $response_body['user'];\n        $this->assertEquals('広家 太郎', $user_data['name']);\n        $this->assertEquals(strval($input['phonenumber']), strval($user_data['phonenumber']));\n        $this->assertEquals(intval($input['space_type_id']), intval($user_data['space_type_id']));\n        $this->assertEquals(mb_substr($input['card_number'], -4), $user_data['card_last4']);\n        $this->assertEquals($input['card_exp_year'], $user_data['card_exp_year']);\n        $this->assertEquals($input['card_exp_month'], $user_data['card_exp_month']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[152,0],[168,0]],"newRange":[[152,0],[152,0]],"oldText":"        // contract\n        $this->assertEquals($user['space_type_id'], self::$SPACE_TYPE_ID);\n        $this->assertEquals($user['filled_space_size'], self::$FILLED_SPACE_SIZE);\n        $this->assertEquals($user['filled_number_of_tatami'], self::$FILLED_NUMBER_OF_TATAMI);\n\n        // card\n        $this->assertEquals($user['card_last4'], mb_substr(self::$PAYMENT_DATA['card_number'], -4));\n        $this->assertEquals($user['card_exp_year'], self::$PAYMENT_DATA['card_expire_year']);\n        $this->assertEquals($user['card_exp_month'], self::$PAYMENT_DATA['card_expire_month']);\n\n        // promotion\n        $promotions = Model_Logic_Campaign::find_promotion_code_by_user_id(self::$USER_ID);\n        $promotion = $promotions[0];\n        $this->assertEquals($user['promotion_code'], $promotion['promotion_code']);\n        $this->assertEquals($user['promotion_description'], $promotion['description']);\n        $this->assertEquals($user['promotion_share_body'], $promotion['message']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[154,0],[154,0]],"newRange":[[154,0],[155,0]],"oldText":"","newText":"    public function test_db_initialized()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[155,0],[160,0]],"newRange":[[155,0],[155,0]],"oldText":"    /**\n     * データの削除\n     *\n     */\n    private function cleanup_tables()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[156,0],[156,0]],"newRange":[[156,0],[159,0]],"oldText":"","newText":"        $user = Model_Datasource_User::find_by_user_id(self::$USER_ID);\n        $this->assertTrue(array_key_exists('user_id', $user));\n        $this->assertEquals(self::$USER_DATA['user_name'], $user['user_name']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[159,0],[186,0]],"newRange":[[159,0],[159,0]],"oldText":"        if (self::$BAGGAGE_ID)\n        {\n            // t_baggage\n\t\t\tDB::delete('t_baggage')->where('baggage_id', self::$BAGGAGE_ID)->execute();\n        }\n\t\tif (self::$CONTRACT_ID)\n\t\t{\n            // t_contract_log\n            DB::delete('t_contract_log')->where('contract_id', self::$CONTRACT_ID)->execute();\n            // t_contract\n\t\t\tDB::delete('t_contract')->where('contract_id', self::$CONTRACT_ID)->execute();\n\t\t}\n\t\tif (self::$USER_ID)\n\t\t{\n            // t_request_log\n            DB::delete('t_request_log')->where('user_id', self::$USER_ID)->execute();\n            // t_request\n\t\t\tDB::delete('t_request')->where('user_id', self::$USER_ID)->execute();\n            // t_message\n            DB::delete('t_message')->where('user_id', self::$USER_ID)->execute();\n            // t_promotion\n            DB::delete('t_promotion')->where('user_id', self::$USER_ID)->execute();\n            // t_sales\n            DB::delete('t_sales')->where('user_id', self::$USER_ID)->execute();\n            // t_user\n            DB::delete('t_user')->where('user_id', self::$USER_ID)->execute();\n\t\t}\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[161,0],[175,0]],"newRange":[[161,0],[161,0]],"oldText":"    /**\n     * テストデータの準備\n     *\n     */\n    private function prepare_tables()\n    {\n        // ユーザデータ作成\n        self::$USER_DATA['telephone'] = Util_Utility::get_random_number(11);\n        $user_data       = self::$USER_DATA;\n\t\t$payment_data    = self::$PAYMENT_DATA + array('coupon' => '');\n\t\t$contract_data   = array('space_id' => self::$SPACE_TYPE_ID);\n\t\t$result          = Model_Logic_Contract::contract($user_data, $payment_data, $contract_data);\n\t\tself::$USER_ID = $result['user_id'];\n        self::$CONTRACT_ID = $result['contract_id'];\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[162,0],[182,0]],"newRange":[[162,0],[162,0]],"oldText":"        // 荷物データ登録（使用状況をゼロ以外に）\n        $baggage_type_id = 10000030;\n        $baggage_data = array(\n            'warehouse_id'    => Constants::$WAREHOUSE_DEFAULT, \n            'user_id'         => self::$USER_ID,\n            'baggage_type_id' => $baggage_type_id,\n            'photo_group_id'  => null,\n            'status'          => Constants::$BAGGAGE_STATUS_STORED,\n            'title'           => 'テスト荷物',\n            'description'     => 'テスト荷物説明',\n            'code'            => null,\n        );\n\n        list($baggage_id, $rows_affected) = Model_Datasource_Baggage::create($baggage_data);\n        $baggage_type = Model_Datasource_BaggageType::find_by_baggage_type_id($baggage_type_id);\n        self::$FILLED_SPACE_SIZE = $baggage_type['space_size'];\n        self::$FILLED_NUMBER_OF_TATAMI = Model_Logic_Space::get_filled_area(self::$SPACE_TYPE_ID, self::$FILLED_SPACE_SIZE);\n        self::$BAGGAGE_ID = $baggage_id;\n    }\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[166,0],[166,0]],"newRange":[[166,0],[169,0]],"oldText":"","newText":"            'name'\t\t\t=> 'テストユーザ名前変更後',\n            'phonenumber'\t=> $phonenumber_new,\n            'new_password'\t=> 'passwordnew',\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[169,0],[172,0]],"newRange":[[169,0],[169,0]],"oldText":"            'name' => 'テストユーザ名前変更後',\n            'phonenumber' => $phonenumber_new,\n            'new_password' => 'password_new',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[171,0],[171,0]],"newRange":[[171,0],[173,0]],"oldText":"","newText":"            'card_exp_month'=> 4,\n            'card_number'   => '1111222233335555',\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[173,0],[175,0]],"newRange":[[173,0],[173,0]],"oldText":"            'card_exp_month' => 4,\n            'card_number'       => '1111222233335555',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[176,0],[176,0]],"newRange":[[176,0],[177,0]],"oldText":"","newText":"}\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[177,0],[177,1]],"newRange":[[177,0],[177,0]],"oldText":"}","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[125,0],[125,0]],"newRange":[[125,0],[131,0]],"oldText":"","newText":"\n\n        // DBの中を確認\n        $users = Model_Datasource_User::find_by_telephone(strval($input['phonenumber']));\n        $this->assertCount(1, $users);\n        $this->assertEquals(0, $users[0]['customer_card_id'], $users[0]['user_id'].'のpaygent_idが更新されていません '.$users[0]['customer_card_id']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[174,0],[174,0]],"newRange":[[174,0],[175,0]],"oldText":"","newText":"            'new_password'\t=> 'password_new',\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[175,0],[176,0]],"newRange":[[175,0],[175,0]],"oldText":"            'new_password'\t=> 'passwordnew',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[125,0],[131,0]],"newRange":[[125,0],[125,0]],"oldText":"\n\n        // DBの中を確認\n        $users = Model_Datasource_User::find_by_telephone(strval($input['phonenumber']));\n        $this->assertCount(1, $users);\n        $this->assertEquals(0, $users[0]['customer_card_id'], $users[0]['user_id'].'のpaygent_idが更新されていません '.$users[0]['customer_card_id']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[168,0],[168,0]],"newRange":[[168,0],[169,0]],"oldText":"","newText":"            'new_password'\t=> 'passwordnew',\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[169,0],[170,0]],"newRange":[[169,0],[169,0]],"oldText":"            'new_password'\t=> 'password_new',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[125,0],[125,0]],"newRange":[[125,0],[131,0]],"oldText":"","newText":"\n\n        // DBの中を確認\n        $users = Model_Datasource_User::find_by_telephone(strval($input['phonenumber']));\n        $this->assertCount(1, $users);\n        $this->assertEquals(0, $users[0]['paygent_id'], $users[0]['user_id'].'のpaygent_idが更新されていません '.$users[0]['paygent_id']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,0],[130,0]],"newRange":[[130,0],[131,0]],"oldText":"","newText":"        $this->assertEquals(0, $users[0]['customer_card_id'], $users[0]['user_id'].'のpaygent_idが更新されていません '.$users[0]['customer_card_id']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[131,0],[132,0]],"newRange":[[131,0],[131,0]],"oldText":"        $this->assertEquals(0, $users[0]['paygent_id'], $users[0]['user_id'].'のpaygent_idが更新されていません '.$users[0]['paygent_id']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[125,0],[131,0]],"newRange":[[125,0],[125,0]],"oldText":"\n\n        // DBの中を確認\n        $users = Model_Datasource_User::find_by_telephone(strval($input['phonenumber']));\n        $this->assertCount(1, $users);\n        $this->assertEquals(0, $users[0]['customer_card_id'], $users[0]['user_id'].'のpaygent_idが更新されていません '.$users[0]['customer_card_id']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/tests/controller/api/user/detail.php","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"9e12432fde931ade0acb0e3e2d06eba7df7c3b13","deserializer":"TextBuffer"},{"text":"<?php\n/**\n * Controller_Api_User_Picking class tests\n *   fuel/app/classes/controller/api/user/picking.php\n * @group App\n * @group API\n */\nclass Test_Controller_Api_User_Picking extends Test_Controller_Api_Base\n{\n    // override\n    protected $is_include_db_test = TRUE;\n\n    private static $USER_ID = 161300000;\n\n    public function test_post_index()\n    {\n        $curl = new MyCurl();\n        $login_params = MyCurl::get_login_params(self::get_url('api/user/v1/login'));\n        $curl->login($login_params);\n\n        // 取り出し依頼\n\t\t$input = $this->mock_input();\n        $params = array(\n            'url' => self::get_url('api/user/v1/picking_requests'),\n            'http' => $input,\n        );\n        $result = $curl->post_json($params);\n        $this->assertEquals(200, $result['http_status'], $result['output']['messages'][0]);\n        $this->assertNull($result['output']);\n\n        // DBの中を確認する\n\t\t$baggage_ids = array(1, 2, 11);\n\t\tforeach ($baggage_ids as $baggage_id)\n\t\t{\n\t\t\t$baggage = Model_Datasource_Baggage::find_by_baggage_id($baggage_id);\n\t\t\t$expected_status = in_array($baggage_id, $input['baggage_ids'])\n\t\t\t\t? Constants::$BAGGAGE_STATUS_PREPARE_SHIP : Constants::$BAGGAGE_STATUS_STORED;\n\t\t\t$this->assertEquals($expected_status, $baggage['status']);\n\t\t}\n    }\n\n    public function test_post_index_他人の荷物は取り出せない()\n    {\n        $curl = new MyCurl();\n        $login_params = MyCurl::get_login_params(self::get_url('api/user/v1/login'));\n        $curl->login($login_params);\n\n        // 取り出し依頼\n        $input = $this->mock_input();\n        $input['baggage_ids'] = array(52);\n        $params = array(\n            'url' => self::get_url('api/user/v1/picking_requests'),\n            'http' => $input,\n        );\n        $result = $curl->post_json($params);\n        $this->assertEquals(400, $result['http_status'], $result['output']['messages'][0]);\n    }\n\n    public function test_post_index_空文字で送ると失敗する()\n    {\n        $curl = new MyCurl();\n        $login_params = MyCurl::get_login_params(self::get_url('api/user/v1/login'));\n        $login_params['http']['phonenumber'] = '09012345672'; // まだ依頼がない会員\n        $curl->login($login_params);\n\n        // 取り出し依頼\n        $params = array(\n            'url' => self::get_url('api/user/v1/picking_requests'),\n            'http' => $this->mock_input(),\n        );\n        $params['http']['street'] = ''; // 番地を空文字にする\n        $result = $curl->post_json($params);\n        $this->assertEquals(400, $result['http_status'], $result['output']['messages'][0]);\n\n        // DBをのぞき見る\n        $status = Constants::$REQUEST_STATUS_COLLECT_REQ;\n        $requests = Model_Datasource_Request::find_by_user_id(161300002, $status);\n        $this->assertCount(0, $requests);\n    }\n\n\tpublic function test_post_index_不正な時間帯IDを入力すると失敗して400を返す()\n\t{\n\t\t// 引数を作成\n\t\t$input = $this->mock_input();\n\t\t$input['timeperiod'] = 9999;\n\t\t// ログイン\n\t\t$curl = new MyCurl();\n\t\t$curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n\t\t$params = array(\n\t\t\t'url' => self::get_url('api/user/v1/picking_requests'),\n\t\t\t'http' => $input,\n\t\t);\n\t\t$result = $curl->post_json($params);\n\n\t\t$expected_status = 400;\n\t\t$this->assertEquals($expected_status, $result['http_status'], 'statusが400でない');\n\n\t\t// DBを覗き見る\n        $status = Constants::$REQUEST_STATUS_COLLECT_REQ;\n        $requests = Model_Datasource_Request::find_by_user_id(161300002, $status);\n        $this->assertCount(0, $requests, '不正な時間帯を入力した場合にt_requestレコードが生成されてしまう');\n\t}\n\n\tpublic function test_post_index_不正な日付を入力すると失敗して400を返す()\n\t{\n\t\t// 引数を作成\n\t\t$input = $this->mock_input();\n\t\t$input['date'] = '0000-22-44';\n\t\t// ログイン\n\t\t$curl = new MyCurl();\n\t\t$curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n\t\t$params = array(\n\t\t\t'url' => self::get_url('api/user/v1/picking_requests'),\n\t\t\t'http' => $input,\n\t\t);\n\t\t$result = $curl->post_json($params);\n\n\t\t$expected_status = 400;\n\t\t$this->assertEquals($expected_status, $result['http_status'], 'statusが400でない');\n\n\t\t// DBを覗き見る\n        $status = Constants::$REQUEST_STATUS_COLLECT_REQ;\n        $requests = Model_Datasource_Request::find_by_user_id(161300002, $status);\n        $this->assertCount(0, $requests, '不正な日付を入力した場合にt_requestレコードが生成されてしまう');\n\t}\n\n\tpublic function test_post_index_過去の日付を入力すると失敗して400を返す()\n\t{\n\t\t// 引数を作成\n\t\t$input = $this->mock_input();\n\t\t$input['date'] = '2013-01-01';\n\t\t// ログイン\n\t\t$curl = new MyCurl();\n\t\t$curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n\t\t$params = array(\n\t\t\t'url' => self::get_url('api/user/v1/picking_requests'),\n\t\t\t'http' => $input,\n\t\t);\n\t\t$result = $curl->post_json($params);\n\n\t\t$expected_status = 400;\n\t\t$this->assertEquals($expected_status, $result['http_status'], 'statusが400でない');\n\n\t\t// DBを覗き見る\n        $status = Constants::$REQUEST_STATUS_COLLECT_REQ;\n        $requests = Model_Datasource_Request::find_by_user_id(161300002, $status);\n        $this->assertCount(0, $requests, '過去の日付を入力した場合にt_requestレコードが生成されてしまう');\n\t}\n\n    private function mock_input()\n    {\n        return array(\n            'baggage_ids' => array(1,11),\n            'date' => '2014-12-01',\n            'timeperiod' => 1,\n            'name'  => 'テストユーザ名前',\n            'name_furigana'  => 'テストユーザカナ',\n            'zipcode'    => '0600000',\n            'prefecture' => '北海道',\n            'city'       => '札幌市中央区',\n            'street'       => '1丁目',\n        );\n    }\n}\n","markers":{"markers":{"1":{"id":1,"range":[[17,22],[17,22]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":12664,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[13,0],[13,0]],"newRange":[[13,0],[14,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[14,0],[14,0]],"newRange":[[14,0],[14,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[14,0],[14,0]],"newRange":[[14,0],[16,2]],"oldText":"","newText":"/**\n* @group target\n*/","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[14,0],[14,0]],"newRange":[[14,0],[14,4]],"oldText":"","newText":"    ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[15,0],[15,0]],"newRange":[[15,0],[15,4]],"oldText":"","newText":"    ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[16,0],[16,0]],"newRange":[[16,0],[16,4]],"oldText":"","newText":"    ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[14,0],[17,0]],"newRange":[[14,0],[14,0]],"oldText":"    /**\n    * @group target\n    */\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[14,0],[14,0]],"newRange":[[14,0],[17,0]],"oldText":"","newText":"    /**\n    * @group target\n    */\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[14,0],[17,0]],"newRange":[[14,0],[14,0]],"oldText":"    /**\n    * @group target\n    */\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,0],[9,0]],"newRange":[[9,0],[21,0]],"oldText":"","newText":"    private static $USER_ID = null;\n    private static $CONTRACT_ID = null;\n    private static $REQUEST_ID = null;\n    private static $BAGGAGE_LIST_COUNT = 5;\n    private static $BAGGAGE_IDS = array();\n    \n    public function setup()\n    {\n        $this->cleanup_tables();\n        $this->contract();\n        $this->prepare_tables();\n    }\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[21,0],[23,0]],"newRange":[[21,0],[21,0]],"oldText":"    // override\n    protected $is_include_db_test = TRUE;\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[22,0],[22,0]],"newRange":[[22,0],[26,0]],"oldText":"","newText":"    public function tearDown()\n    {\n        $this->cleanup_tables();\n    }\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[26,0],[27,0]],"newRange":[[26,0],[26,0]],"oldText":"    private static $USER_ID = 161300000;\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[27,0],[27,0]],"newRange":[[27,0],[32,0]],"oldText":"","newText":"    /**\n     * post_index()\n     * 実質モデルのテスト\n     * Model_Logic_Baggage::request_ship() の正常系\n     */\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[34,0],[34,0]],"newRange":[[34,0],[44,0]],"oldText":"","newText":"        $data = $this->mock_make_request_data();\n        $args = array(self::$BAGGAGE_IDS, $data);\n        \n        // 呼び出しインスタンス作成\n        $request = Request::forge(self::get_url('api/user/v1/picking_requests'));\n        $target_instance = new Controller_Api_User_Picking($request);\n        // メソッドを生成して呼び出し\n        $method = self::getMethod('Controller_Api_User_Picking', 'request_picking');\n        $request_id = $method->invokeArgs($target_instance, $args);\n        self::$REQUEST_ID = $request_id;\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[44,0],[47,0]],"newRange":[[44,0],[44,0]],"oldText":"        $curl = new MyCurl();\n        $login_params = MyCurl::get_login_params(self::get_url('api/user/v1/login'));\n        $curl->login($login_params);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[45,0],[45,0]],"newRange":[[45,0],[71,0]],"oldText":"","newText":"        $request_baggages = Model_Datasource_RequestBaggage::find_by_request_id($request_id);\n        $this->assertNotNull($request_id, 'request_idがnullでない');\n        $this->assertNotNull($request_baggages, 'request_baggagesがnullでない');\n        $this->assertEquals(self::$BAGGAGE_LIST_COUNT, count($request_baggages));\n        foreach ($request_baggages as $request_baggage)\n        {\n            $baggage_id = $request_baggage['baggage_id'];\n            $user_id = $request_baggage['user_id'];\n            $baggage = Model_Logic_Baggage::find_by_baggage_id($baggage_id);\n            $this->assertTrue(in_array($baggage['baggage_id'], self::$BAGGAGE_IDS));\n            $this->assertEquals(Constants::$BAGGAGE_STATUS_PREPARE_SHIP, $baggage['status']);\n        }\n    }\n\n    private function mock_make_request_data()\n    {\n        return array(\n            'user_id'    => self::$USER_ID,\n            'user_name'  => 'テストユーザ名前',\n            'user_kana'  => 'テストユーザかな',\n            'zipcode'    => '0600000',\n            'prefecture' => '北海道',\n            'city'       => '札幌市中央区',\n            'town'       => '',\n            'visit_date' => '2014-12-01',\n            'visit_time' => 1,\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[71,0],[76,0]],"newRange":[[71,0],[71,0]],"oldText":"        // 取り出し依頼\n\t\t$input = $this->mock_input();\n        $params = array(\n            'url' => self::get_url('api/user/v1/picking_requests'),\n            'http' => $input,\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[72,0],[72,0]],"newRange":[[72,0],[73,0]],"oldText":"","newText":"    }\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[73,0],[76,0]],"newRange":[[73,0],[73,0]],"oldText":"        $result = $curl->post_json($params);\n        $this->assertEquals(200, $result['http_status'], $result['output']['messages'][0]);\n        $this->assertNull($result['output']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[74,0],[74,0]],"newRange":[[74,0],[88,0]],"oldText":"","newText":"    /**\n     * データの削除\n     *\n     */\n    private function cleanup_tables()\n    {\n        // t_request_baggage\n        if (self::$REQUEST_ID)\n        {\n            DB::delete('t_request_baggage')->where('request_id', self::$REQUEST_ID)->execute();\n        }\n\t\tDB::start_transaction();\n        DB::delete('t_sales_details_baggage')->execute();\n\t\tforeach (self::$BAGGAGE_IDS as $baggage_id)\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[88,0],[91,0]],"newRange":[[88,0],[88,0]],"oldText":"        // DBの中を確認する\n\t\t$baggage_ids = array(1, 2, 11);\n\t\tforeach ($baggage_ids as $baggage_id)\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[89,0],[89,0]],"newRange":[[89,0],[91,0]],"oldText":"","newText":"            // t_baggage\n\t\t\tDB::delete('t_baggage')->where('baggage_id', $baggage_id)->execute();\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[91,0],[95,0]],"newRange":[[91,0],[91,0]],"oldText":"\t\t\t$baggage = Model_Datasource_Baggage::find_by_baggage_id($baggage_id);\n\t\t\t$expected_status = in_array($baggage_id, $input['baggage_ids'])\n\t\t\t\t? Constants::$BAGGAGE_STATUS_PREPARE_SHIP : Constants::$BAGGAGE_STATUS_STORED;\n\t\t\t$this->assertEquals($expected_status, $baggage['status']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[92,0],[92,0]],"newRange":[[92,0],[116,0]],"oldText":"","newText":"\t\tDB::commit_transaction();\n\n        // t_contract_log\n        DB::delete('t_contract_log')->execute();\n\t\tif (self::$CONTRACT_ID)\n\t\t{\n            // t_contract\n\t\t\tDB::delete('t_contract')->where('contract_id', self::$CONTRACT_ID)->execute();\n\t\t}\n\t\tif (self::$USER_ID)\n\t\t{\n            // t_request_log\n            DB::delete('t_request_log')->where('user_id', self::$USER_ID)->execute();\n            // t_request\n\t\t\tDB::delete('t_request')->where('user_id', self::$USER_ID)->execute();\n            // t_message\n            DB::delete('t_message')->where('user_id', self::$USER_ID)->execute();\n            // t_promotion\n            DB::delete('t_promotion')->where('user_id', self::$USER_ID)->execute();\n            // t_sales\n            DB::delete('t_sales')->where('user_id', self::$USER_ID)->execute();\n            // t_user\n            DB::delete('t_user')->where('user_id', self::$USER_ID)->execute();\n\t\t}\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[118,0],[118,0]],"newRange":[[118,0],[119,0]],"oldText":"","newText":"    private function prepare_tables()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[119,0],[120,0]],"newRange":[[119,0],[119,0]],"oldText":"    public function test_post_index_他人の荷物は取り出せない()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[120,0],[120,0]],"newRange":[[120,0],[125,0]],"oldText":"","newText":"        for ($i = 0; $i < self::$BAGGAGE_LIST_COUNT; $i++)\n        {\n            $baggage_id = $this->set_baggage($i);\n            array_push(self::$BAGGAGE_IDS, $baggage_id);\n        }\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[125,0],[138,0]],"newRange":[[125,0],[125,0]],"oldText":"        $curl = new MyCurl();\n        $login_params = MyCurl::get_login_params(self::get_url('api/user/v1/login'));\n        $curl->login($login_params);\n\n        // 取り出し依頼\n        $input = $this->mock_input();\n        $input['baggage_ids'] = array(52);\n        $params = array(\n            'url' => self::get_url('api/user/v1/picking_requests'),\n            'http' => $input,\n        );\n        $result = $curl->post_json($params);\n        $this->assertEquals(400, $result['http_status'], $result['output']['messages'][0]);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[127,0],[127,0]],"newRange":[[127,0],[128,0]],"oldText":"","newText":"    private function set_baggage($i)\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[128,0],[129,0]],"newRange":[[128,0],[128,0]],"oldText":"    public function test_post_index_空文字で送ると失敗する()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[129,0],[129,0]],"newRange":[[129,0],[138,0]],"oldText":"","newText":"        $baggage_data = array(\n            'warehouse_id'    => Constants::$WAREHOUSE_DEFAULT, \n            'user_id'         => self::$USER_ID,\n            'baggage_type_id' => 10000030,\n            'photo_group_id'  => null,\n            'status'          => Constants::$BAGGAGE_STATUS_STORED,\n            'title'           => 'テスト荷物' . $i,\n            'description'     => 'テスト荷物説明' . $i,\n            'code'            => null,\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[138,0],[147,0]],"newRange":[[138,0],[138,0]],"oldText":"        $curl = new MyCurl();\n        $login_params = MyCurl::get_login_params(self::get_url('api/user/v1/login'));\n        $login_params['http']['phonenumber'] = '09012345672'; // まだ依頼がない会員\n        $curl->login($login_params);\n\n        // 取り出し依頼\n        $params = array(\n            'url' => self::get_url('api/user/v1/picking_requests'),\n            'http' => $this->mock_input(),\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[139,0],[142,0]],"newRange":[[139,0],[139,0]],"oldText":"        $params['http']['street'] = ''; // 番地を空文字にする\n        $result = $curl->post_json($params);\n        $this->assertEquals(400, $result['http_status'], $result['output']['messages'][0]);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[140,0],[140,0]],"newRange":[[140,0],[142,0]],"oldText":"","newText":"        list($baggage_id, $rows_affected) = Model_Datasource_Baggage::create($baggage_data);\n        return $baggage_id;\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[142,0],[146,0]],"newRange":[[142,0],[142,0]],"oldText":"        // DBをのぞき見る\n        $status = Constants::$REQUEST_STATUS_COLLECT_REQ;\n        $requests = Model_Datasource_Request::find_by_user_id(161300002, $status);\n        $this->assertCount(0, $requests);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[144,0],[144,0]],"newRange":[[144,0],[145,0]],"oldText":"","newText":"    private function contract()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[145,0],[146,0]],"newRange":[[145,0],[145,0]],"oldText":"\tpublic function test_post_index_不正な時間帯IDを入力すると失敗して400を返す()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[146,0],[146,0]],"newRange":[[146,0],[151,0]],"oldText":"","newText":"\t\t$telephone = Util_Utility::get_random_number(11);\n\t\t$user_data       = array(\n\t\t\t'user_name' => 'test_baggage',\n\t\t\t'telephone' => $telephone,\n\t\t\t'password'  => 'password',\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[151,0],[160,0]],"newRange":[[151,0],[151,0]],"oldText":"\t\t// 引数を作成\n\t\t$input = $this->mock_input();\n\t\t$input['timeperiod'] = 9999;\n\t\t// ログイン\n\t\t$curl = new MyCurl();\n\t\t$curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n\t\t$params = array(\n\t\t\t'url' => self::get_url('api/user/v1/picking_requests'),\n\t\t\t'http' => $input,\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[152,0],[152,0]],"newRange":[[152,0],[157,0]],"oldText":"","newText":"\t\t$payment_data    = array(\n\t\t\t'card_number'       => '1111222233334444',\n\t\t\t'card_expire_year'  => '2015',\n\t\t\t'card_expire_month' => '11',\n\t\t\t'coupon'            => '',\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[157,0],[179,0]],"newRange":[[157,0],[157,0]],"oldText":"\t\t$result = $curl->post_json($params);\n\n\t\t$expected_status = 400;\n\t\t$this->assertEquals($expected_status, $result['http_status'], 'statusが400でない');\n\n\t\t// DBを覗き見る\n        $status = Constants::$REQUEST_STATUS_COLLECT_REQ;\n        $requests = Model_Datasource_Request::find_by_user_id(161300002, $status);\n        $this->assertCount(0, $requests, '不正な時間帯を入力した場合にt_requestレコードが生成されてしまう');\n\t}\n\n\tpublic function test_post_index_不正な日付を入力すると失敗して400を返す()\n\t{\n\t\t// 引数を作成\n\t\t$input = $this->mock_input();\n\t\t$input['date'] = '0000-22-44';\n\t\t// ログイン\n\t\t$curl = new MyCurl();\n\t\t$curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n\t\t$params = array(\n\t\t\t'url' => self::get_url('api/user/v1/picking_requests'),\n\t\t\t'http' => $input,\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[158,0],[158,0]],"newRange":[[158,0],[163,0]],"oldText":"","newText":"\t\t$space_id        = 4;\n\t\t$contract_data   = array('space_id' => $space_id);\n\t\t$result          = Model_Logic_Contract::contract($user_data, $payment_data, $contract_data);\n\t\tself::$USER_ID = $result['user_id'];\n        self::$CONTRACT_ID = $result['contract_id'];\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[163,0],[172,0]],"newRange":[[163,0],[163,0]],"oldText":"\t\t$result = $curl->post_json($params);\n\n\t\t$expected_status = 400;\n\t\t$this->assertEquals($expected_status, $result['http_status'], 'statusが400でない');\n\n\t\t// DBを覗き見る\n        $status = Constants::$REQUEST_STATUS_COLLECT_REQ;\n        $requests = Model_Datasource_Request::find_by_user_id(161300002, $status);\n        $this->assertCount(0, $requests, '不正な日付を入力した場合にt_requestレコードが生成されてしまう');\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[164,0],[164,0]],"newRange":[[164,0],[164,1]],"oldText":"","newText":"}","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[164,1],[203,0]],"newRange":[[164,1],[164,1]],"oldText":"\n\tpublic function test_post_index_過去の日付を入力すると失敗して400を返す()\n\t{\n\t\t// 引数を作成\n\t\t$input = $this->mock_input();\n\t\t$input['date'] = '2013-01-01';\n\t\t// ログイン\n\t\t$curl = new MyCurl();\n\t\t$curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n\t\t$params = array(\n\t\t\t'url' => self::get_url('api/user/v1/picking_requests'),\n\t\t\t'http' => $input,\n\t\t);\n\t\t$result = $curl->post_json($params);\n\n\t\t$expected_status = 400;\n\t\t$this->assertEquals($expected_status, $result['http_status'], 'statusが400でない');\n\n\t\t// DBを覗き見る\n        $status = Constants::$REQUEST_STATUS_COLLECT_REQ;\n        $requests = Model_Datasource_Request::find_by_user_id(161300002, $status);\n        $this->assertCount(0, $requests, '過去の日付を入力した場合にt_requestレコードが生成されてしまう');\n\t}\n\n    private function mock_input()\n    {\n        return array(\n            'baggage_ids' => array(1,11),\n            'date' => '2014-12-01',\n            'timeperiod' => 1,\n            'name'  => 'テストユーザ名前',\n            'name_furigana'  => 'テストユーザカナ',\n            'zipcode'    => '0600000',\n            'prefecture' => '北海道',\n            'city'       => '札幌市中央区',\n            'street'       => '1丁目',\n        );\n    }\n}\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,0],[9,0]],"newRange":[[9,0],[11,0]],"oldText":"","newText":"    // override\n    protected $is_include_db_test = TRUE;\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[11,0],[23,0]],"newRange":[[11,0],[11,0]],"oldText":"    private static $USER_ID = null;\n    private static $CONTRACT_ID = null;\n    private static $REQUEST_ID = null;\n    private static $BAGGAGE_LIST_COUNT = 5;\n    private static $BAGGAGE_IDS = array();\n    \n    public function setup()\n    {\n        $this->cleanup_tables();\n        $this->contract();\n        $this->prepare_tables();\n    }\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[12,0],[12,0]],"newRange":[[12,0],[13,0]],"oldText":"","newText":"    private static $USER_ID = 161300000;\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[13,0],[17,0]],"newRange":[[13,0],[13,0]],"oldText":"    public function tearDown()\n    {\n        $this->cleanup_tables();\n    }\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[14,0],[19,0]],"newRange":[[14,0],[14,0]],"oldText":"    /**\n     * post_index()\n     * 実質モデルのテスト\n     * Model_Logic_Baggage::request_ship() の正常系\n     */\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[16,0],[16,0]],"newRange":[[16,0],[19,0]],"oldText":"","newText":"        $curl = new MyCurl();\n        $login_params = MyCurl::get_login_params(self::get_url('api/user/v1/login'));\n        $curl->login($login_params);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[19,0],[29,0]],"newRange":[[19,0],[19,0]],"oldText":"        $data = $this->mock_make_request_data();\n        $args = array(self::$BAGGAGE_IDS, $data);\n        \n        // 呼び出しインスタンス作成\n        $request = Request::forge(self::get_url('api/user/v1/picking_requests'));\n        $target_instance = new Controller_Api_User_Picking($request);\n        // メソッドを生成して呼び出し\n        $method = self::getMethod('Controller_Api_User_Picking', 'request_picking');\n        $request_id = $method->invokeArgs($target_instance, $args);\n        self::$REQUEST_ID = $request_id;\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[20,0],[20,0]],"newRange":[[20,0],[25,0]],"oldText":"","newText":"        // 取り出し依頼\n\t\t$input = $this->mock_input();\n        $params = array(\n            'url' => self::get_url('api/user/v1/picking_requests'),\n            'http' => $input,\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[25,0],[51,0]],"newRange":[[25,0],[25,0]],"oldText":"        $request_baggages = Model_Datasource_RequestBaggage::find_by_request_id($request_id);\n        $this->assertNotNull($request_id, 'request_idがnullでない');\n        $this->assertNotNull($request_baggages, 'request_baggagesがnullでない');\n        $this->assertEquals(self::$BAGGAGE_LIST_COUNT, count($request_baggages));\n        foreach ($request_baggages as $request_baggage)\n        {\n            $baggage_id = $request_baggage['baggage_id'];\n            $user_id = $request_baggage['user_id'];\n            $baggage = Model_Logic_Baggage::find_by_baggage_id($baggage_id);\n            $this->assertTrue(in_array($baggage['baggage_id'], self::$BAGGAGE_IDS));\n            $this->assertEquals(Constants::$BAGGAGE_STATUS_PREPARE_SHIP, $baggage['status']);\n        }\n    }\n\n    private function mock_make_request_data()\n    {\n        return array(\n            'user_id'    => self::$USER_ID,\n            'user_name'  => 'テストユーザ名前',\n            'user_kana'  => 'テストユーザかな',\n            'zipcode'    => '0600000',\n            'prefecture' => '北海道',\n            'city'       => '札幌市中央区',\n            'town'       => '',\n            'visit_date' => '2014-12-01',\n            'visit_time' => 1,\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[26,0],[26,0]],"newRange":[[26,0],[29,0]],"oldText":"","newText":"        $result = $curl->post_json($params);\n        $this->assertEquals(200, $result['http_status'], $result['output']['messages'][0]);\n        $this->assertNull($result['output']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[29,0],[30,0]],"newRange":[[29,0],[29,0]],"oldText":"    }\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[30,0],[30,0]],"newRange":[[30,0],[33,0]],"oldText":"","newText":"        // DBの中を確認する\n\t\t$baggage_ids = array(1, 2, 11);\n\t\tforeach ($baggage_ids as $baggage_id)\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[33,0],[47,0]],"newRange":[[33,0],[33,0]],"oldText":"    /**\n     * データの削除\n     *\n     */\n    private function cleanup_tables()\n    {\n        // t_request_baggage\n        if (self::$REQUEST_ID)\n        {\n            DB::delete('t_request_baggage')->where('request_id', self::$REQUEST_ID)->execute();\n        }\n\t\tDB::start_transaction();\n        DB::delete('t_sales_details_baggage')->execute();\n\t\tforeach (self::$BAGGAGE_IDS as $baggage_id)\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[34,0],[34,0]],"newRange":[[34,0],[38,0]],"oldText":"","newText":"\t\t\t$baggage = Model_Datasource_Baggage::find_by_baggage_id($baggage_id);\n\t\t\t$expected_status = in_array($baggage_id, $input['baggage_ids'])\n\t\t\t\t? Constants::$BAGGAGE_STATUS_PREPARE_SHIP : Constants::$BAGGAGE_STATUS_STORED;\n\t\t\t$this->assertEquals($expected_status, $baggage['status']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[38,0],[40,0]],"newRange":[[38,0],[38,0]],"oldText":"            // t_baggage\n\t\t\tDB::delete('t_baggage')->where('baggage_id', $baggage_id)->execute();\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[39,0],[63,0]],"newRange":[[39,0],[39,0]],"oldText":"\t\tDB::commit_transaction();\n\n        // t_contract_log\n        DB::delete('t_contract_log')->execute();\n\t\tif (self::$CONTRACT_ID)\n\t\t{\n            // t_contract\n\t\t\tDB::delete('t_contract')->where('contract_id', self::$CONTRACT_ID)->execute();\n\t\t}\n\t\tif (self::$USER_ID)\n\t\t{\n            // t_request_log\n            DB::delete('t_request_log')->where('user_id', self::$USER_ID)->execute();\n            // t_request\n\t\t\tDB::delete('t_request')->where('user_id', self::$USER_ID)->execute();\n            // t_message\n            DB::delete('t_message')->where('user_id', self::$USER_ID)->execute();\n            // t_promotion\n            DB::delete('t_promotion')->where('user_id', self::$USER_ID)->execute();\n            // t_sales\n            DB::delete('t_sales')->where('user_id', self::$USER_ID)->execute();\n            // t_user\n            DB::delete('t_user')->where('user_id', self::$USER_ID)->execute();\n\t\t}\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[41,0],[41,0]],"newRange":[[41,0],[42,0]],"oldText":"","newText":"    public function test_post_index_他人の荷物は取り出せない()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[42,0],[43,0]],"newRange":[[42,0],[42,0]],"oldText":"    private function prepare_tables()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[43,0],[43,0]],"newRange":[[43,0],[56,0]],"oldText":"","newText":"        $curl = new MyCurl();\n        $login_params = MyCurl::get_login_params(self::get_url('api/user/v1/login'));\n        $curl->login($login_params);\n\n        // 取り出し依頼\n        $input = $this->mock_input();\n        $input['baggage_ids'] = array(52);\n        $params = array(\n            'url' => self::get_url('api/user/v1/picking_requests'),\n            'http' => $input,\n        );\n        $result = $curl->post_json($params);\n        $this->assertEquals(400, $result['http_status'], $result['output']['messages'][0]);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[56,0],[61,0]],"newRange":[[56,0],[56,0]],"oldText":"        for ($i = 0; $i < self::$BAGGAGE_LIST_COUNT; $i++)\n        {\n            $baggage_id = $this->set_baggage($i);\n            array_push(self::$BAGGAGE_IDS, $baggage_id);\n        }\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[58,0],[58,0]],"newRange":[[58,0],[59,0]],"oldText":"","newText":"    public function test_post_index_空文字で送ると失敗する()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[59,0],[60,0]],"newRange":[[59,0],[59,0]],"oldText":"    private function set_baggage($i)\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[60,0],[60,0]],"newRange":[[60,0],[69,0]],"oldText":"","newText":"        $curl = new MyCurl();\n        $login_params = MyCurl::get_login_params(self::get_url('api/user/v1/login'));\n        $login_params['http']['phonenumber'] = '09012345672'; // まだ依頼がない会員\n        $curl->login($login_params);\n\n        // 取り出し依頼\n        $params = array(\n            'url' => self::get_url('api/user/v1/picking_requests'),\n            'http' => $this->mock_input(),\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[69,0],[78,0]],"newRange":[[69,0],[69,0]],"oldText":"        $baggage_data = array(\n            'warehouse_id'    => Constants::$WAREHOUSE_DEFAULT, \n            'user_id'         => self::$USER_ID,\n            'baggage_type_id' => 10000030,\n            'photo_group_id'  => null,\n            'status'          => Constants::$BAGGAGE_STATUS_STORED,\n            'title'           => 'テスト荷物' . $i,\n            'description'     => 'テスト荷物説明' . $i,\n            'code'            => null,\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[70,0],[70,0]],"newRange":[[70,0],[73,0]],"oldText":"","newText":"        $params['http']['street'] = ''; // 番地を空文字にする\n        $result = $curl->post_json($params);\n        $this->assertEquals(400, $result['http_status'], $result['output']['messages'][0]);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[74,0],[74,0]],"newRange":[[74,0],[78,0]],"oldText":"","newText":"        // DBをのぞき見る\n        $status = Constants::$REQUEST_STATUS_COLLECT_REQ;\n        $requests = Model_Datasource_Request::find_by_user_id(161300002, $status);\n        $this->assertCount(0, $requests);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[78,0],[80,0]],"newRange":[[78,0],[78,0]],"oldText":"        list($baggage_id, $rows_affected) = Model_Datasource_Baggage::create($baggage_data);\n        return $baggage_id;\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[80,0],[80,0]],"newRange":[[80,0],[81,0]],"oldText":"","newText":"\tpublic function test_post_index_不正な時間帯IDを入力すると失敗して400を返す()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[81,0],[82,0]],"newRange":[[81,0],[81,0]],"oldText":"    private function contract()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[82,0],[82,0]],"newRange":[[82,0],[91,0]],"oldText":"","newText":"\t\t// 引数を作成\n\t\t$input = $this->mock_input();\n\t\t$input['timeperiod'] = 9999;\n\t\t// ログイン\n\t\t$curl = new MyCurl();\n\t\t$curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n\t\t$params = array(\n\t\t\t'url' => self::get_url('api/user/v1/picking_requests'),\n\t\t\t'http' => $input,\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[91,0],[96,0]],"newRange":[[91,0],[91,0]],"oldText":"\t\t$telephone = Util_Utility::get_random_number(11);\n\t\t$user_data       = array(\n\t\t\t'user_name' => 'test_baggage',\n\t\t\t'telephone' => $telephone,\n\t\t\t'password'  => 'password',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[92,0],[92,0]],"newRange":[[92,0],[114,0]],"oldText":"","newText":"\t\t$result = $curl->post_json($params);\n\n\t\t$expected_status = 400;\n\t\t$this->assertEquals($expected_status, $result['http_status'], 'statusが400でない');\n\n\t\t// DBを覗き見る\n        $status = Constants::$REQUEST_STATUS_COLLECT_REQ;\n        $requests = Model_Datasource_Request::find_by_user_id(161300002, $status);\n        $this->assertCount(0, $requests, '不正な時間帯を入力した場合にt_requestレコードが生成されてしまう');\n\t}\n\n\tpublic function test_post_index_不正な日付を入力すると失敗して400を返す()\n\t{\n\t\t// 引数を作成\n\t\t$input = $this->mock_input();\n\t\t$input['date'] = '0000-22-44';\n\t\t// ログイン\n\t\t$curl = new MyCurl();\n\t\t$curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n\t\t$params = array(\n\t\t\t'url' => self::get_url('api/user/v1/picking_requests'),\n\t\t\t'http' => $input,\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[114,0],[119,0]],"newRange":[[114,0],[114,0]],"oldText":"\t\t$payment_data    = array(\n\t\t\t'card_number'       => '1111222233334444',\n\t\t\t'card_expire_year'  => '2015',\n\t\t\t'card_expire_month' => '11',\n\t\t\t'coupon'            => '',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[115,0],[115,0]],"newRange":[[115,0],[124,0]],"oldText":"","newText":"\t\t$result = $curl->post_json($params);\n\n\t\t$expected_status = 400;\n\t\t$this->assertEquals($expected_status, $result['http_status'], 'statusが400でない');\n\n\t\t// DBを覗き見る\n        $status = Constants::$REQUEST_STATUS_COLLECT_REQ;\n        $requests = Model_Datasource_Request::find_by_user_id(161300002, $status);\n        $this->assertCount(0, $requests, '不正な日付を入力した場合にt_requestレコードが生成されてしまう');\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[124,0],[129,0]],"newRange":[[124,0],[124,0]],"oldText":"\t\t$space_id        = 4;\n\t\t$contract_data   = array('space_id' => $space_id);\n\t\t$result          = Model_Logic_Contract::contract($user_data, $payment_data, $contract_data);\n\t\tself::$USER_ID = $result['user_id'];\n        self::$CONTRACT_ID = $result['contract_id'];\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[125,0],[125,0]],"newRange":[[125,0],[164,0]],"oldText":"","newText":"\n\tpublic function test_post_index_過去の日付を入力すると失敗して400を返す()\n\t{\n\t\t// 引数を作成\n\t\t$input = $this->mock_input();\n\t\t$input['date'] = '2013-01-01';\n\t\t// ログイン\n\t\t$curl = new MyCurl();\n\t\t$curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n\t\t$params = array(\n\t\t\t'url' => self::get_url('api/user/v1/picking_requests'),\n\t\t\t'http' => $input,\n\t\t);\n\t\t$result = $curl->post_json($params);\n\n\t\t$expected_status = 400;\n\t\t$this->assertEquals($expected_status, $result['http_status'], 'statusが400でない');\n\n\t\t// DBを覗き見る\n        $status = Constants::$REQUEST_STATUS_COLLECT_REQ;\n        $requests = Model_Datasource_Request::find_by_user_id(161300002, $status);\n        $this->assertCount(0, $requests, '過去の日付を入力した場合にt_requestレコードが生成されてしまう');\n\t}\n\n    private function mock_input()\n    {\n        return array(\n            'baggage_ids' => array(1,11),\n            'date' => '2014-12-01',\n            'timeperiod' => 1,\n            'name'  => 'テストユーザ名前',\n            'name_furigana'  => 'テストユーザカナ',\n            'zipcode'    => '0600000',\n            'prefecture' => '北海道',\n            'city'       => '札幌市中央区',\n            'street'       => '1丁目',\n        );\n    }\n}\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[164,0],[164,1]],"newRange":[[164,0],[164,0]],"oldText":"}","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,0],[9,0]],"newRange":[[9,0],[21,0]],"oldText":"","newText":"    private static $USER_ID = null;\n    private static $CONTRACT_ID = null;\n    private static $REQUEST_ID = null;\n    private static $BAGGAGE_LIST_COUNT = 5;\n    private static $BAGGAGE_IDS = array();\n    \n    public function setup()\n    {\n        $this->cleanup_tables();\n        $this->contract();\n        $this->prepare_tables();\n    }\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[21,0],[23,0]],"newRange":[[21,0],[21,0]],"oldText":"    // override\n    protected $is_include_db_test = TRUE;\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[22,0],[22,0]],"newRange":[[22,0],[26,0]],"oldText":"","newText":"    public function tearDown()\n    {\n        $this->cleanup_tables();\n    }\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[26,0],[27,0]],"newRange":[[26,0],[26,0]],"oldText":"    private static $USER_ID = 161300000;\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[27,0],[27,0]],"newRange":[[27,0],[32,0]],"oldText":"","newText":"    /**\n     * post_index()\n     * 実質モデルのテスト\n     * Model_Logic_Baggage::request_ship() の正常系\n     */\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[34,0],[34,0]],"newRange":[[34,0],[44,0]],"oldText":"","newText":"        $data = $this->mock_make_request_data();\n        $args = array(self::$BAGGAGE_IDS, $data);\n        \n        // 呼び出しインスタンス作成\n        $request = Request::forge(self::get_url('api/user/v1/picking_requests'));\n        $target_instance = new Controller_Api_User_Picking($request);\n        // メソッドを生成して呼び出し\n        $method = self::getMethod('Controller_Api_User_Picking', 'request_picking');\n        $request_id = $method->invokeArgs($target_instance, $args);\n        self::$REQUEST_ID = $request_id;\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[44,0],[47,0]],"newRange":[[44,0],[44,0]],"oldText":"        $curl = new MyCurl();\n        $login_params = MyCurl::get_login_params(self::get_url('api/user/v1/login'));\n        $curl->login($login_params);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[45,0],[45,0]],"newRange":[[45,0],[71,0]],"oldText":"","newText":"        $request_baggages = Model_Datasource_RequestBaggage::find_by_request_id($request_id);\n        $this->assertNotNull($request_id, 'request_idがnullでない');\n        $this->assertNotNull($request_baggages, 'request_baggagesがnullでない');\n        $this->assertEquals(self::$BAGGAGE_LIST_COUNT, count($request_baggages));\n        foreach ($request_baggages as $request_baggage)\n        {\n            $baggage_id = $request_baggage['baggage_id'];\n            $user_id = $request_baggage['user_id'];\n            $baggage = Model_Logic_Baggage::find_by_baggage_id($baggage_id);\n            $this->assertTrue(in_array($baggage['baggage_id'], self::$BAGGAGE_IDS));\n            $this->assertEquals(Constants::$BAGGAGE_STATUS_PREPARE_SHIP, $baggage['status']);\n        }\n    }\n\n    private function mock_make_request_data()\n    {\n        return array(\n            'user_id'    => self::$USER_ID,\n            'user_name'  => 'テストユーザ名前',\n            'user_kana'  => 'テストユーザかな',\n            'zipcode'    => '0600000',\n            'prefecture' => '北海道',\n            'city'       => '札幌市中央区',\n            'town'       => '',\n            'visit_date' => '2014-12-01',\n            'visit_time' => 1,\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[71,0],[76,0]],"newRange":[[71,0],[71,0]],"oldText":"        // 取り出し依頼\n\t\t$input = $this->mock_input();\n        $params = array(\n            'url' => self::get_url('api/user/v1/picking_requests'),\n            'http' => $input,\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[72,0],[72,0]],"newRange":[[72,0],[73,0]],"oldText":"","newText":"    }\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[73,0],[76,0]],"newRange":[[73,0],[73,0]],"oldText":"        $result = $curl->post_json($params);\n        $this->assertEquals(200, $result['http_status'], $result['output']['messages'][0]);\n        $this->assertNull($result['output']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[74,0],[74,0]],"newRange":[[74,0],[88,0]],"oldText":"","newText":"    /**\n     * データの削除\n     *\n     */\n    private function cleanup_tables()\n    {\n        // t_request_baggage\n        if (self::$REQUEST_ID)\n        {\n            DB::delete('t_request_baggage')->where('request_id', self::$REQUEST_ID)->execute();\n        }\n\t\tDB::start_transaction();\n        DB::delete('t_sales_details_baggage')->execute();\n\t\tforeach (self::$BAGGAGE_IDS as $baggage_id)\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[88,0],[91,0]],"newRange":[[88,0],[88,0]],"oldText":"        // DBの中を確認する\n\t\t$baggage_ids = array(1, 2, 11);\n\t\tforeach ($baggage_ids as $baggage_id)\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[89,0],[89,0]],"newRange":[[89,0],[91,0]],"oldText":"","newText":"            // t_baggage\n\t\t\tDB::delete('t_baggage')->where('baggage_id', $baggage_id)->execute();\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[91,0],[95,0]],"newRange":[[91,0],[91,0]],"oldText":"\t\t\t$baggage = Model_Datasource_Baggage::find_by_baggage_id($baggage_id);\n\t\t\t$expected_status = in_array($baggage_id, $input['baggage_ids'])\n\t\t\t\t? Constants::$BAGGAGE_STATUS_PREPARE_SHIP : Constants::$BAGGAGE_STATUS_STORED;\n\t\t\t$this->assertEquals($expected_status, $baggage['status']);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[92,0],[92,0]],"newRange":[[92,0],[116,0]],"oldText":"","newText":"\t\tDB::commit_transaction();\n\n        // t_contract_log\n        DB::delete('t_contract_log')->execute();\n\t\tif (self::$CONTRACT_ID)\n\t\t{\n            // t_contract\n\t\t\tDB::delete('t_contract')->where('contract_id', self::$CONTRACT_ID)->execute();\n\t\t}\n\t\tif (self::$USER_ID)\n\t\t{\n            // t_request_log\n            DB::delete('t_request_log')->where('user_id', self::$USER_ID)->execute();\n            // t_request\n\t\t\tDB::delete('t_request')->where('user_id', self::$USER_ID)->execute();\n            // t_message\n            DB::delete('t_message')->where('user_id', self::$USER_ID)->execute();\n            // t_promotion\n            DB::delete('t_promotion')->where('user_id', self::$USER_ID)->execute();\n            // t_sales\n            DB::delete('t_sales')->where('user_id', self::$USER_ID)->execute();\n            // t_user\n            DB::delete('t_user')->where('user_id', self::$USER_ID)->execute();\n\t\t}\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[118,0],[118,0]],"newRange":[[118,0],[119,0]],"oldText":"","newText":"    private function prepare_tables()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[119,0],[120,0]],"newRange":[[119,0],[119,0]],"oldText":"    public function test_post_index_他人の荷物は取り出せない()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[120,0],[120,0]],"newRange":[[120,0],[125,0]],"oldText":"","newText":"        for ($i = 0; $i < self::$BAGGAGE_LIST_COUNT; $i++)\n        {\n            $baggage_id = $this->set_baggage($i);\n            array_push(self::$BAGGAGE_IDS, $baggage_id);\n        }\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[125,0],[138,0]],"newRange":[[125,0],[125,0]],"oldText":"        $curl = new MyCurl();\n        $login_params = MyCurl::get_login_params(self::get_url('api/user/v1/login'));\n        $curl->login($login_params);\n\n        // 取り出し依頼\n        $input = $this->mock_input();\n        $input['baggage_ids'] = array(52);\n        $params = array(\n            'url' => self::get_url('api/user/v1/picking_requests'),\n            'http' => $input,\n        );\n        $result = $curl->post_json($params);\n        $this->assertEquals(400, $result['http_status'], $result['output']['messages'][0]);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[127,0],[127,0]],"newRange":[[127,0],[128,0]],"oldText":"","newText":"    private function set_baggage($i)\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[128,0],[129,0]],"newRange":[[128,0],[128,0]],"oldText":"    public function test_post_index_空文字で送ると失敗する()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[129,0],[129,0]],"newRange":[[129,0],[138,0]],"oldText":"","newText":"        $baggage_data = array(\n            'warehouse_id'    => Constants::$WAREHOUSE_DEFAULT, \n            'user_id'         => self::$USER_ID,\n            'baggage_type_id' => 10000030,\n            'photo_group_id'  => null,\n            'status'          => Constants::$BAGGAGE_STATUS_STORED,\n            'title'           => 'テスト荷物' . $i,\n            'description'     => 'テスト荷物説明' . $i,\n            'code'            => null,\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[138,0],[147,0]],"newRange":[[138,0],[138,0]],"oldText":"        $curl = new MyCurl();\n        $login_params = MyCurl::get_login_params(self::get_url('api/user/v1/login'));\n        $login_params['http']['phonenumber'] = '09012345672'; // まだ依頼がない会員\n        $curl->login($login_params);\n\n        // 取り出し依頼\n        $params = array(\n            'url' => self::get_url('api/user/v1/picking_requests'),\n            'http' => $this->mock_input(),\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[139,0],[142,0]],"newRange":[[139,0],[139,0]],"oldText":"        $params['http']['street'] = ''; // 番地を空文字にする\n        $result = $curl->post_json($params);\n        $this->assertEquals(400, $result['http_status'], $result['output']['messages'][0]);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[140,0],[140,0]],"newRange":[[140,0],[142,0]],"oldText":"","newText":"        list($baggage_id, $rows_affected) = Model_Datasource_Baggage::create($baggage_data);\n        return $baggage_id;\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[142,0],[146,0]],"newRange":[[142,0],[142,0]],"oldText":"        // DBをのぞき見る\n        $status = Constants::$REQUEST_STATUS_COLLECT_REQ;\n        $requests = Model_Datasource_Request::find_by_user_id(161300002, $status);\n        $this->assertCount(0, $requests);\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[144,0],[144,0]],"newRange":[[144,0],[145,0]],"oldText":"","newText":"    private function contract()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[145,0],[146,0]],"newRange":[[145,0],[145,0]],"oldText":"\tpublic function test_post_index_不正な時間帯IDを入力すると失敗して400を返す()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[146,0],[146,0]],"newRange":[[146,0],[151,0]],"oldText":"","newText":"\t\t$telephone = Util_Utility::get_random_number(11);\n\t\t$user_data       = array(\n\t\t\t'user_name' => 'test_baggage',\n\t\t\t'telephone' => $telephone,\n\t\t\t'password'  => 'password',\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[151,0],[160,0]],"newRange":[[151,0],[151,0]],"oldText":"\t\t// 引数を作成\n\t\t$input = $this->mock_input();\n\t\t$input['timeperiod'] = 9999;\n\t\t// ログイン\n\t\t$curl = new MyCurl();\n\t\t$curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n\t\t$params = array(\n\t\t\t'url' => self::get_url('api/user/v1/picking_requests'),\n\t\t\t'http' => $input,\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[152,0],[152,0]],"newRange":[[152,0],[157,0]],"oldText":"","newText":"\t\t$payment_data    = array(\n\t\t\t'card_number'       => '1111222233334444',\n\t\t\t'card_expire_year'  => '2015',\n\t\t\t'card_expire_month' => '11',\n\t\t\t'coupon'            => '',\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[157,0],[179,0]],"newRange":[[157,0],[157,0]],"oldText":"\t\t$result = $curl->post_json($params);\n\n\t\t$expected_status = 400;\n\t\t$this->assertEquals($expected_status, $result['http_status'], 'statusが400でない');\n\n\t\t// DBを覗き見る\n        $status = Constants::$REQUEST_STATUS_COLLECT_REQ;\n        $requests = Model_Datasource_Request::find_by_user_id(161300002, $status);\n        $this->assertCount(0, $requests, '不正な時間帯を入力した場合にt_requestレコードが生成されてしまう');\n\t}\n\n\tpublic function test_post_index_不正な日付を入力すると失敗して400を返す()\n\t{\n\t\t// 引数を作成\n\t\t$input = $this->mock_input();\n\t\t$input['date'] = '0000-22-44';\n\t\t// ログイン\n\t\t$curl = new MyCurl();\n\t\t$curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n\t\t$params = array(\n\t\t\t'url' => self::get_url('api/user/v1/picking_requests'),\n\t\t\t'http' => $input,\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[158,0],[158,0]],"newRange":[[158,0],[163,0]],"oldText":"","newText":"\t\t$space_id        = 4;\n\t\t$contract_data   = array('space_id' => $space_id);\n\t\t$result          = Model_Logic_Contract::contract($user_data, $payment_data, $contract_data);\n\t\tself::$USER_ID = $result['user_id'];\n        self::$CONTRACT_ID = $result['contract_id'];\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[163,0],[172,0]],"newRange":[[163,0],[163,0]],"oldText":"\t\t$result = $curl->post_json($params);\n\n\t\t$expected_status = 400;\n\t\t$this->assertEquals($expected_status, $result['http_status'], 'statusが400でない');\n\n\t\t// DBを覗き見る\n        $status = Constants::$REQUEST_STATUS_COLLECT_REQ;\n        $requests = Model_Datasource_Request::find_by_user_id(161300002, $status);\n        $this->assertCount(0, $requests, '不正な日付を入力した場合にt_requestレコードが生成されてしまう');\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[164,0],[164,0]],"newRange":[[164,0],[164,1]],"oldText":"","newText":"}","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[164,1],[203,0]],"newRange":[[164,1],[164,1]],"oldText":"\n\tpublic function test_post_index_過去の日付を入力すると失敗して400を返す()\n\t{\n\t\t// 引数を作成\n\t\t$input = $this->mock_input();\n\t\t$input['date'] = '2013-01-01';\n\t\t// ログイン\n\t\t$curl = new MyCurl();\n\t\t$curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n\t\t$params = array(\n\t\t\t'url' => self::get_url('api/user/v1/picking_requests'),\n\t\t\t'http' => $input,\n\t\t);\n\t\t$result = $curl->post_json($params);\n\n\t\t$expected_status = 400;\n\t\t$this->assertEquals($expected_status, $result['http_status'], 'statusが400でない');\n\n\t\t// DBを覗き見る\n        $status = Constants::$REQUEST_STATUS_COLLECT_REQ;\n        $requests = Model_Datasource_Request::find_by_user_id(161300002, $status);\n        $this->assertCount(0, $requests, '過去の日付を入力した場合にt_requestレコードが生成されてしまう');\n\t}\n\n    private function mock_input()\n    {\n        return array(\n            'baggage_ids' => array(1,11),\n            'date' => '2014-12-01',\n            'timeperiod' => 1,\n            'name'  => 'テストユーザ名前',\n            'name_furigana'  => 'テストユーザカナ',\n            'zipcode'    => '0600000',\n            'prefecture' => '北海道',\n            'city'       => '札幌市中央区',\n            'street'       => '1丁目',\n        );\n    }\n}\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,0],[9,0]],"newRange":[[9,0],[11,0]],"oldText":"","newText":"    // override\n    protected $is_include_db_test = TRUE;\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[11,0],[23,0]],"newRange":[[11,0],[11,0]],"oldText":"    private static $USER_ID = null;\n    private static $CONTRACT_ID = null;\n    private static $REQUEST_ID = null;\n    private static $BAGGAGE_LIST_COUNT = 5;\n    private static $BAGGAGE_IDS = array();\n    \n    public function setup()\n    {\n        $this->cleanup_tables();\n        $this->contract();\n        $this->prepare_tables();\n    }\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[12,0],[12,0]],"newRange":[[12,0],[13,0]],"oldText":"","newText":"    private static $USER_ID = 161300000;\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[13,0],[17,0]],"newRange":[[13,0],[13,0]],"oldText":"    public function tearDown()\n    {\n        $this->cleanup_tables();\n    }\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[14,0],[19,0]],"newRange":[[14,0],[14,0]],"oldText":"    /**\n     * post_index()\n     * 実質モデルのテスト\n     * Model_Logic_Baggage::request_ship() の正常系\n     */\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[16,0],[16,0]],"newRange":[[16,0],[19,0]],"oldText":"","newText":"        $curl = new MyCurl();\n        $login_params = MyCurl::get_login_params(self::get_url('api/user/v1/login'));\n        $curl->login($login_params);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[19,0],[29,0]],"newRange":[[19,0],[19,0]],"oldText":"        $data = $this->mock_make_request_data();\n        $args = array(self::$BAGGAGE_IDS, $data);\n        \n        // 呼び出しインスタンス作成\n        $request = Request::forge(self::get_url('api/user/v1/picking_requests'));\n        $target_instance = new Controller_Api_User_Picking($request);\n        // メソッドを生成して呼び出し\n        $method = self::getMethod('Controller_Api_User_Picking', 'request_picking');\n        $request_id = $method->invokeArgs($target_instance, $args);\n        self::$REQUEST_ID = $request_id;\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[20,0],[20,0]],"newRange":[[20,0],[25,0]],"oldText":"","newText":"        // 取り出し依頼\n\t\t$input = $this->mock_input();\n        $params = array(\n            'url' => self::get_url('api/user/v1/picking_requests'),\n            'http' => $input,\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[25,0],[51,0]],"newRange":[[25,0],[25,0]],"oldText":"        $request_baggages = Model_Datasource_RequestBaggage::find_by_request_id($request_id);\n        $this->assertNotNull($request_id, 'request_idがnullでない');\n        $this->assertNotNull($request_baggages, 'request_baggagesがnullでない');\n        $this->assertEquals(self::$BAGGAGE_LIST_COUNT, count($request_baggages));\n        foreach ($request_baggages as $request_baggage)\n        {\n            $baggage_id = $request_baggage['baggage_id'];\n            $user_id = $request_baggage['user_id'];\n            $baggage = Model_Logic_Baggage::find_by_baggage_id($baggage_id);\n            $this->assertTrue(in_array($baggage['baggage_id'], self::$BAGGAGE_IDS));\n            $this->assertEquals(Constants::$BAGGAGE_STATUS_PREPARE_SHIP, $baggage['status']);\n        }\n    }\n\n    private function mock_make_request_data()\n    {\n        return array(\n            'user_id'    => self::$USER_ID,\n            'user_name'  => 'テストユーザ名前',\n            'user_kana'  => 'テストユーザかな',\n            'zipcode'    => '0600000',\n            'prefecture' => '北海道',\n            'city'       => '札幌市中央区',\n            'town'       => '',\n            'visit_date' => '2014-12-01',\n            'visit_time' => 1,\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[26,0],[26,0]],"newRange":[[26,0],[29,0]],"oldText":"","newText":"        $result = $curl->post_json($params);\n        $this->assertEquals(200, $result['http_status'], $result['output']['messages'][0]);\n        $this->assertNull($result['output']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[29,0],[30,0]],"newRange":[[29,0],[29,0]],"oldText":"    }\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[30,0],[30,0]],"newRange":[[30,0],[33,0]],"oldText":"","newText":"        // DBの中を確認する\n\t\t$baggage_ids = array(1, 2, 11);\n\t\tforeach ($baggage_ids as $baggage_id)\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[33,0],[47,0]],"newRange":[[33,0],[33,0]],"oldText":"    /**\n     * データの削除\n     *\n     */\n    private function cleanup_tables()\n    {\n        // t_request_baggage\n        if (self::$REQUEST_ID)\n        {\n            DB::delete('t_request_baggage')->where('request_id', self::$REQUEST_ID)->execute();\n        }\n\t\tDB::start_transaction();\n        DB::delete('t_sales_details_baggage')->execute();\n\t\tforeach (self::$BAGGAGE_IDS as $baggage_id)\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[34,0],[34,0]],"newRange":[[34,0],[38,0]],"oldText":"","newText":"\t\t\t$baggage = Model_Datasource_Baggage::find_by_baggage_id($baggage_id);\n\t\t\t$expected_status = in_array($baggage_id, $input['baggage_ids'])\n\t\t\t\t? Constants::$BAGGAGE_STATUS_PREPARE_SHIP : Constants::$BAGGAGE_STATUS_STORED;\n\t\t\t$this->assertEquals($expected_status, $baggage['status']);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[38,0],[40,0]],"newRange":[[38,0],[38,0]],"oldText":"            // t_baggage\n\t\t\tDB::delete('t_baggage')->where('baggage_id', $baggage_id)->execute();\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[39,0],[63,0]],"newRange":[[39,0],[39,0]],"oldText":"\t\tDB::commit_transaction();\n\n        // t_contract_log\n        DB::delete('t_contract_log')->execute();\n\t\tif (self::$CONTRACT_ID)\n\t\t{\n            // t_contract\n\t\t\tDB::delete('t_contract')->where('contract_id', self::$CONTRACT_ID)->execute();\n\t\t}\n\t\tif (self::$USER_ID)\n\t\t{\n            // t_request_log\n            DB::delete('t_request_log')->where('user_id', self::$USER_ID)->execute();\n            // t_request\n\t\t\tDB::delete('t_request')->where('user_id', self::$USER_ID)->execute();\n            // t_message\n            DB::delete('t_message')->where('user_id', self::$USER_ID)->execute();\n            // t_promotion\n            DB::delete('t_promotion')->where('user_id', self::$USER_ID)->execute();\n            // t_sales\n            DB::delete('t_sales')->where('user_id', self::$USER_ID)->execute();\n            // t_user\n            DB::delete('t_user')->where('user_id', self::$USER_ID)->execute();\n\t\t}\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[41,0],[41,0]],"newRange":[[41,0],[42,0]],"oldText":"","newText":"    public function test_post_index_他人の荷物は取り出せない()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[42,0],[43,0]],"newRange":[[42,0],[42,0]],"oldText":"    private function prepare_tables()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[43,0],[43,0]],"newRange":[[43,0],[56,0]],"oldText":"","newText":"        $curl = new MyCurl();\n        $login_params = MyCurl::get_login_params(self::get_url('api/user/v1/login'));\n        $curl->login($login_params);\n\n        // 取り出し依頼\n        $input = $this->mock_input();\n        $input['baggage_ids'] = array(52);\n        $params = array(\n            'url' => self::get_url('api/user/v1/picking_requests'),\n            'http' => $input,\n        );\n        $result = $curl->post_json($params);\n        $this->assertEquals(400, $result['http_status'], $result['output']['messages'][0]);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[56,0],[61,0]],"newRange":[[56,0],[56,0]],"oldText":"        for ($i = 0; $i < self::$BAGGAGE_LIST_COUNT; $i++)\n        {\n            $baggage_id = $this->set_baggage($i);\n            array_push(self::$BAGGAGE_IDS, $baggage_id);\n        }\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[58,0],[58,0]],"newRange":[[58,0],[59,0]],"oldText":"","newText":"    public function test_post_index_空文字で送ると失敗する()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[59,0],[60,0]],"newRange":[[59,0],[59,0]],"oldText":"    private function set_baggage($i)\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[60,0],[60,0]],"newRange":[[60,0],[69,0]],"oldText":"","newText":"        $curl = new MyCurl();\n        $login_params = MyCurl::get_login_params(self::get_url('api/user/v1/login'));\n        $login_params['http']['phonenumber'] = '09012345672'; // まだ依頼がない会員\n        $curl->login($login_params);\n\n        // 取り出し依頼\n        $params = array(\n            'url' => self::get_url('api/user/v1/picking_requests'),\n            'http' => $this->mock_input(),\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[69,0],[78,0]],"newRange":[[69,0],[69,0]],"oldText":"        $baggage_data = array(\n            'warehouse_id'    => Constants::$WAREHOUSE_DEFAULT, \n            'user_id'         => self::$USER_ID,\n            'baggage_type_id' => 10000030,\n            'photo_group_id'  => null,\n            'status'          => Constants::$BAGGAGE_STATUS_STORED,\n            'title'           => 'テスト荷物' . $i,\n            'description'     => 'テスト荷物説明' . $i,\n            'code'            => null,\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[70,0],[70,0]],"newRange":[[70,0],[73,0]],"oldText":"","newText":"        $params['http']['street'] = ''; // 番地を空文字にする\n        $result = $curl->post_json($params);\n        $this->assertEquals(400, $result['http_status'], $result['output']['messages'][0]);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[74,0],[74,0]],"newRange":[[74,0],[78,0]],"oldText":"","newText":"        // DBをのぞき見る\n        $status = Constants::$REQUEST_STATUS_COLLECT_REQ;\n        $requests = Model_Datasource_Request::find_by_user_id(161300002, $status);\n        $this->assertCount(0, $requests);\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[78,0],[80,0]],"newRange":[[78,0],[78,0]],"oldText":"        list($baggage_id, $rows_affected) = Model_Datasource_Baggage::create($baggage_data);\n        return $baggage_id;\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[80,0],[80,0]],"newRange":[[80,0],[81,0]],"oldText":"","newText":"\tpublic function test_post_index_不正な時間帯IDを入力すると失敗して400を返す()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[81,0],[82,0]],"newRange":[[81,0],[81,0]],"oldText":"    private function contract()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[82,0],[82,0]],"newRange":[[82,0],[91,0]],"oldText":"","newText":"\t\t// 引数を作成\n\t\t$input = $this->mock_input();\n\t\t$input['timeperiod'] = 9999;\n\t\t// ログイン\n\t\t$curl = new MyCurl();\n\t\t$curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n\t\t$params = array(\n\t\t\t'url' => self::get_url('api/user/v1/picking_requests'),\n\t\t\t'http' => $input,\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[91,0],[96,0]],"newRange":[[91,0],[91,0]],"oldText":"\t\t$telephone = Util_Utility::get_random_number(11);\n\t\t$user_data       = array(\n\t\t\t'user_name' => 'test_baggage',\n\t\t\t'telephone' => $telephone,\n\t\t\t'password'  => 'password',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[92,0],[92,0]],"newRange":[[92,0],[114,0]],"oldText":"","newText":"\t\t$result = $curl->post_json($params);\n\n\t\t$expected_status = 400;\n\t\t$this->assertEquals($expected_status, $result['http_status'], 'statusが400でない');\n\n\t\t// DBを覗き見る\n        $status = Constants::$REQUEST_STATUS_COLLECT_REQ;\n        $requests = Model_Datasource_Request::find_by_user_id(161300002, $status);\n        $this->assertCount(0, $requests, '不正な時間帯を入力した場合にt_requestレコードが生成されてしまう');\n\t}\n\n\tpublic function test_post_index_不正な日付を入力すると失敗して400を返す()\n\t{\n\t\t// 引数を作成\n\t\t$input = $this->mock_input();\n\t\t$input['date'] = '0000-22-44';\n\t\t// ログイン\n\t\t$curl = new MyCurl();\n\t\t$curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n\t\t$params = array(\n\t\t\t'url' => self::get_url('api/user/v1/picking_requests'),\n\t\t\t'http' => $input,\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[114,0],[119,0]],"newRange":[[114,0],[114,0]],"oldText":"\t\t$payment_data    = array(\n\t\t\t'card_number'       => '1111222233334444',\n\t\t\t'card_expire_year'  => '2015',\n\t\t\t'card_expire_month' => '11',\n\t\t\t'coupon'            => '',\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[115,0],[115,0]],"newRange":[[115,0],[124,0]],"oldText":"","newText":"\t\t$result = $curl->post_json($params);\n\n\t\t$expected_status = 400;\n\t\t$this->assertEquals($expected_status, $result['http_status'], 'statusが400でない');\n\n\t\t// DBを覗き見る\n        $status = Constants::$REQUEST_STATUS_COLLECT_REQ;\n        $requests = Model_Datasource_Request::find_by_user_id(161300002, $status);\n        $this->assertCount(0, $requests, '不正な日付を入力した場合にt_requestレコードが生成されてしまう');\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[124,0],[129,0]],"newRange":[[124,0],[124,0]],"oldText":"\t\t$space_id        = 4;\n\t\t$contract_data   = array('space_id' => $space_id);\n\t\t$result          = Model_Logic_Contract::contract($user_data, $payment_data, $contract_data);\n\t\tself::$USER_ID = $result['user_id'];\n        self::$CONTRACT_ID = $result['contract_id'];\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[125,0],[125,0]],"newRange":[[125,0],[164,0]],"oldText":"","newText":"\n\tpublic function test_post_index_過去の日付を入力すると失敗して400を返す()\n\t{\n\t\t// 引数を作成\n\t\t$input = $this->mock_input();\n\t\t$input['date'] = '2013-01-01';\n\t\t// ログイン\n\t\t$curl = new MyCurl();\n\t\t$curl->login(MyCurl::get_login_params(self::get_url('api/user/v1/login')));\n\t\t$params = array(\n\t\t\t'url' => self::get_url('api/user/v1/picking_requests'),\n\t\t\t'http' => $input,\n\t\t);\n\t\t$result = $curl->post_json($params);\n\n\t\t$expected_status = 400;\n\t\t$this->assertEquals($expected_status, $result['http_status'], 'statusが400でない');\n\n\t\t// DBを覗き見る\n        $status = Constants::$REQUEST_STATUS_COLLECT_REQ;\n        $requests = Model_Datasource_Request::find_by_user_id(161300002, $status);\n        $this->assertCount(0, $requests, '過去の日付を入力した場合にt_requestレコードが生成されてしまう');\n\t}\n\n    private function mock_input()\n    {\n        return array(\n            'baggage_ids' => array(1,11),\n            'date' => '2014-12-01',\n            'timeperiod' => 1,\n            'name'  => 'テストユーザ名前',\n            'name_furigana'  => 'テストユーザカナ',\n            'zipcode'    => '0600000',\n            'prefecture' => '北海道',\n            'city'       => '札幌市中央区',\n            'street'       => '1丁目',\n        );\n    }\n}\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[164,0],[164,1]],"newRange":[[164,0],[164,0]],"oldText":"}","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/tests/controller/api/user/picking.php","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"a4194440cd463220ccfea0532251b50db3f3ec5d","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":11983,"softTabs":true,"displayBuffer":{"id":11984,"softWrap":false,"editorWidthInChars":94,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/util/message.php","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":12512,"softTabs":true,"displayBuffer":{"id":12513,"softWrap":false,"editorWidthInChars":101,"scrollTop":402,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/tests/controller/api/user/registrations.php","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":12660,"softTabs":true,"displayBuffer":{"id":12661,"softWrap":false,"editorWidthInChars":101,"scrollTop":2093,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/tests/controller/api/user/detail.php","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":12664,"softTabs":true,"displayBuffer":{"id":12665,"softWrap":false,"editorWidthInChars":101,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/tests/controller/api/user/picking.php","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/tests/controller/api/user/detail.php","focused":false,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/util/message.php":1399426953677,"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/tests/controller/api/user/registrations.php":1399427085918,"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/tests/controller/api/user/detail.php":1399515443046,"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/tests/controller/api/user/picking.php":1399429236294},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":89599482},"tree-view":{"directoryExpansionStates":{"api.hiroie.jp":{"fuel":{"app":{"classes":{"controller":{"api":{}},"model":{"logic":{}},"view":{}},"config":{"production":{},"staging":{},"test":{}},"tasks":{},"tests":{"controller":{"api":{"user":{}}},"filter":{},"model":{"datasource":{},"logic":{}},"util":{}},"views":{"admin":{}}},"packages":{"apnsphp":{"ApnsPHP":{}},"oil":{"classes":{}}}}}},"selectedPath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/tests/controller/api/user/detail.php","hasFocus":false,"attached":true,"scrollLeft":108,"scrollTop":2037,"width":200},"find-and-replace":{"viewState":{"findHistory":["ssl"," is_valid_datetime","is_valid_datetime","prod","PRD","PR","PRO","PROD","register(","update(","update_user_data","$user_data","update_data","make_reque","total_count","schar","get_bagg","A003","login_by","setup","setup(","setup",">>>","get_res","before"],"replaceHistory":["$notifications","notifications","Constants::","    ","\\t","}","{","}","    ","        ","    ","opened: 1","      title: 収納完了\n      message: \"この度はHIROIEにお品物を\\nお送りいただきまして、\\n誠にありがとうございました\"\n      send_date: '2014-03-18'","      title: 収納完了\n      message: \"この度はHIROIEにお品物を\\\\nお送りいただきまして、\\\\n誠にありがとうございました\"\n      send_date: '2014-03-18'","    title","    message","    send_date","send_date: '2014-03-16'","baggage_1","baggage_memo_1","baggage_memo_01","baggage_01"],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}}},"script":{"scriptOptionsViewState":""}}}