{"mode":"editor","version":1,"windowDimensions":{"x":84,"y":23,"width":1632,"height":1024},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/kwatanabe/git/googlecalendarapi/src/jp/ne/hatena/hackugyo/thoughtscalendar/ui","buffers":[{"text":"package jp.ne.hatena.hackugyo.thoughtscalendar.ui;\n\nimport jp.ne.hatena.hackugyo.thoughtscalendar.CustomApplication;\nimport jp.ne.hatena.hackugyo.thoughtscalendar.R;\nimport jp.ne.hatena.hackugyo.thoughtscalendar.ui.activity.AbsWebViewActivity;\nimport jp.ne.hatena.hackugyo.thoughtscalendar.ui.activity.WebViewActivity;\nimport jp.ne.hatena.hackugyo.thoughtscalendar.ui.fragment.dialogfragment.ProgressCenteringDialogFragment;\nimport jp.ne.hatena.hackugyo.thoughtscalendar.ui.fragment.dialogfragment.ProgressDialogFragment;\nimport jp.ne.hatena.hackugyo.thoughtscalendar.util.AppUtils;\nimport jp.ne.hatena.hackugyo.thoughtscalendar.util.FragmentUtils;\nimport jp.ne.hatena.hackugyo.thoughtscalendar.util.LogUtils;\nimport android.app.Activity;\nimport android.app.Dialog;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.support.v4.app.DialogFragment;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentActivity;\nimport android.support.v4.app.FragmentTransaction;\nimport android.support.v7.app.ActionBarActivity;\n\npublic class AbsFragment extends Fragment {\n    private final AbsFragment self = this;\n    /**\n     * {@link #onAttach(Activity)}のタイミングで，親Activityへの参照を確保する．\n     * \n     * @see <a href=\"https://gist.github.com/nagakenjs/6098350\">参考ページ</a>\n     */\n    private AbsFragmentActivity mActivity;\n\n    /***********************************************\n     * Life Cycle *\n     **********************************************/\n    @Override\n    public void onAttach(Activity activity) {\n        if (!(activity instanceof ActionBarActivity)) {\n            throw new IllegalStateException(getClass().getSimpleName() + \" must be attached to a ActionBarActivity.\");\n        }\n        mActivity = (AbsFragmentActivity) activity;\n\n        super.onAttach(activity);\n    }\n\n    @Override\n    public void onDetach() {\n        mActivity = null;\n        super.onDetach();\n    }\n\n    /***********************************************\n     * Fragment Control *\n     **********************************************/\n    /**\n     * タグで指定されたフラグメントを消去します\n     * \n     * @param fragmentTag\n     */\n    protected boolean removeFragment(String fragmentTag) {\n        // DialogFragment.show() will take care of adding the fragment\n        // in a transaction.  We also want to remove any currently showing\n        // dialog, so make our own transaction and take care of that here.\n        if (getFragmentManager() == null) {\n            LogUtils.e(\"fragmentmanger not found\");\n            return false;\n        }\n        Fragment prev = getFragmentManager().findFragmentByTag(fragmentTag);\n\n        if (prev == null) return false;\n\n        if (prev instanceof DialogFragment) {\n            final Dialog dialog = ((DialogFragment) prev).getDialog();\n\n            if (dialog != null && dialog.isShowing()) {\n                // 最新のソースだと，dialogそのものをdismissする前にフラグを見て抜けてしまうので，\n                // dialog自体は別途dismiss()してやるのが確実．\n                dialog.dismiss(); // http://blog.zaq.ne.jp/oboe2uran/article/876/\n                // prev.dismiss()を呼んではだめ． http://memory.empressia.jp/article/44110106.html\n                ((DialogFragment) prev).onDismiss(dialog); // DialogFragmentの場合は閉じる処理も追加\n            }\n        }\n\n        FragmentTransaction ft = getFragmentManager().beginTransaction();\n        ft.remove(prev);\n        ft.commitAllowingStateLoss();\n        ft = null;\n        getFragmentManager().executePendingTransactions();\n        return true;\n    }\n\n    /**\n     * {@link #getActivity()}の代わりに，親Activityを安全に取得する．\n     * \n     * @return 親の{@link AbsFragmentActivity}\n     */\n    protected AbsFragmentActivity getActivitySafely() {\n        if (mActivity == null) {\n            FragmentActivity activity = getActivity();\n            if (activity instanceof AbsFragmentActivity) mActivity = (AbsFragmentActivity) activity;\n        }\n        return mActivity;\n    }\n\n    /**\n     * {@link AbsFragmentActivity#isShowingSameDialogFragment(String)}と同様\n     * \n     * @param fragmentTag\n     */\n    protected boolean isShowingSameDialogFragment(String fragmentTag) {\n        return FragmentUtils.isShowingSameDialogFragment(getFragmentManager(), fragmentTag);\n    }\n\n    protected void showDialogFragment(final DialogFragment fragment, final String tag) {\n        // onLoadFinished()で呼ぶ際，単にshowしてしまうとCan not perform this action inside of onLoadFinishedが出るので，\n        // Handlerを使う．\n        Handler h = new Handler(Looper.getMainLooper());\n        h.post(new Runnable() {\n            @Override\n            public void run() {\n                fragment.setTargetFragment(self, 0);\n                try {\n                    fragment.show(getFragmentManager(), tag);\n                } catch (NullPointerException e) {\n                    LogUtils.e(\"cannot get SupportFragmentManager.\" + tag);\n                } catch (IllegalStateException e) {\n                    LogUtils.e(tag + \": cannot show a dialog when this activity is in background.\");\n                    LogUtils.e(self.getClass().getSimpleName() + e.getMessage());\n                    // 表示のタイミングでバックグラウンドにいた場合など，\n                    // show()だとIllegalStateExceptionで落ちてしまう\n                    // http://stackoverflow.com/a/16206036/2338047\n                    // ただし，show()を使わないと内部的なフラグが動かないので，\n                    // まずshow()を使ってフラグを立て，\n                    // 失敗したときのみFragmet#commit()のかわりにFragment#commitAllowingStateLoss()を呼ぶ．\n                    removeFragment(tag);\n                    FragmentTransaction ft = getFragmentManager().beginTransaction();\n                    ft.add(fragment, tag);\n                    ft.commitAllowingStateLoss();\n                    getFragmentManager().executePendingTransactions();\n                }\n            }\n        });\n    }\n\n    /**\n     * フラグメントから進捗ダイアログを表示します．\n     * \n     * @param loaderId\n     * @param message\n     * @param isCancelable\n     */\n    protected boolean showProgressDialog(int loaderId, String message, boolean isCancelable) {\n        if (isShowingSameDialogFragment(ProgressCenteringDialogFragment.TAG)) return false; // すでに同じものが出ていた場合，何もしない\n\n        Bundle argsForProgressDialog = new Bundle();\n        argsForProgressDialog.putInt(ProgressDialogFragment.TARGET_LOADER_ID, loaderId);\n        argsForProgressDialog.putBoolean(ProgressDialogFragment.IS_CANCELABLE, isCancelable);\n        if (isCancelable) {\n            argsForProgressDialog.putString(ProgressDialogFragment.NEGATIVE_TEXT, CustomApplication.getStringById(R.string.Dialog_Button_Label_Negative));\n        } else {\n            argsForProgressDialog.putString(ProgressDialogFragment.NEGATIVE_TEXT, null); //キャンセル不可の場合，ボタンもなし\n        }\n        ProgressCenteringDialogFragment dialogFragment = ProgressCenteringDialogFragment.newInstance(argsForProgressDialog, null, null);\n        dialogFragment.setTargetFragment(self, 0);\n        dialogFragment.show(getFragmentManager(), ProgressCenteringDialogFragment.TAG);\n\n        return true;\n    }\n\n    /**\n     * このFragment専用のChildFragmentManagerを使って，内側のFragmentを置き換えます．\n     * \n     * @param fragment\n     * @param replacedId\n     * @param fragmentTag\n     */\n    protected void updateFragment(Fragment fragment, int replacedId, String fragmentTag) {\n        try {\n            FragmentTransaction fragmentTransaction = getChildFragmentManager().beginTransaction();\n            fragmentTransaction.replace(replacedId, fragment, fragmentTag)//\n                    .commitAllowingStateLoss();\n            getChildFragmentManager().executePendingTransactions();\n        } catch (IllegalStateException e) {\n            LogUtils.e(\"cannot replace.\");\n            if (AppUtils.isDebuggable()) e.printStackTrace();\n        }\n    }\n\n    /***********************************************\n     * intent handling *\n     **********************************************/\n\n    /**\n     * 外部ブラウザを選択させて表示します．<br>\n     * Andorid4.0以降，外部ブラウザが端末にインストールされていない場合があるため，<br>\n     * このメソッドを利用することを推奨します．<br>\n     * \n     * @param url\n     */\n    public void launchExternalBrowser(String url) {\n        getActivitySafely().launchExternalBrowser(url);\n    }\n\n    protected void launchWebView(String url) {\n        Intent i = new Intent(getActivitySafely(), WebViewActivity.class)//\n                .putExtra(AbsWebViewActivity.TARGET_URL_KEY, url)//\n                .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);\n        startActivity(i);\n        getActivitySafely().overridePendingTransition(R.anim.activity_open_enter, R.anim.activity_open_exit);\n    }\n\n    protected void launchWebView(String url, String title) {\n        Intent i = new Intent(getActivitySafely(), WebViewActivity.class)//\n                .putExtra(AbsWebViewActivity.TARGET_URL_KEY, url)//\n                .putExtra(WebViewActivity.FIXED_TITLE, title)//\n                .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);\n        startActivity(i);\n    }\n\n    protected void launchWebView(String url, Bundle extras) {\n        Intent i = new Intent(getActivitySafely(), WebViewActivity.class)//\n                .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);\n        if (extras == null) extras = new Bundle();\n        extras.putString(AbsWebViewActivity.TARGET_URL_KEY, url);\n\n        i.putExtras(extras);\n        startActivity(i);\n    }\n    \n    protected void launchMap(String query) {\n        Uri geoUri = Uri.parse(\"geo:0,0?q=\" + query);\n        Intent mapCall = new Intent(Intent.ACTION_VIEW, geoUri);\n        mapCall.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        mapCall.setData(geoUri);\n        startActivity(mapCall);\n    }\n\n    /***********************************************\n     * プログレスダイアログ *\n     **********************************************/\n    protected static final String TAG_PROGRESS_DIALOG_DEFAULT = \"TAG_PROGRESS_DIALOG_DEFAULT\";\n\n    protected void showProgressDialog() {\n        showProgressDialog(TAG_PROGRESS_DIALOG_DEFAULT, null);\n    }\n\n    protected void showProgressDialog(String message) {\n        showProgressDialog(TAG_PROGRESS_DIALOG_DEFAULT, message);\n    }\n\n    protected void showProgressDialog(String tag, String message) {\n        ProgressDialogFragment fragment = ProgressDialogFragment.createProgressDialog(null, null, message);\n        showDialogFragment(fragment, tag);\n    }\n\n    /***********************************************\n     * Toast *\n     **********************************************/\n    /**\n     * Activity内で消し忘れがないよう，単一のToastインスタンスを使い回します．\n     * \n     * @param text\n     * @param length\n     */\n    protected void showSingleToast(String text, int length) {\n        getActivitySafely().showSingleToast(text, length);\n    }\n\n    /**\n     * Activity内で消し忘れがないよう，単一のToastインスタンスを使い回します．\n     * \n     * @param resId\n     * @param length\n     */\n    protected void showSingleToast(int resId, int length) {\n        getActivitySafely().showSingleToast(resId, length);\n    }\n\n    /**\n     * 使い回している単一のToastインスタンスを破棄します．\n     * \n     */\n    protected void removeSingleToast() {\n        getActivitySafely().removeSingleToast();\n    }\n\n}\n","markers":{"markers":{"1":{"id":1,"range":[[23,0],[288,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":11,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/kwatanabe/git/googlecalendarapi/src/jp/ne/hatena/hackugyo/thoughtscalendar/ui/AbsFragment.java","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"15d4f0486b20922f608508901f011c6a22267336","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":11,"softTabs":true,"displayBuffer":{"id":12,"softWrap":false,"editorWidthInChars":null,"scrollTop":4559,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/kwatanabe/git/googlecalendarapi/src/jp/ne/hatena/hackugyo/thoughtscalendar/ui/AbsFragment.java","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/kwatanabe/git/googlecalendarapi/src/jp/ne/hatena/hackugyo/thoughtscalendar/ui/AbsFragment.java","focused":false,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-java"],"deserializer":"Workspace"},"packageStates":{"script":{"scriptOptionsViewState":""},"fuzzy-finder":{"/Users/kwatanabe/git/googlecalendarapi/src/jp/ne/hatena/hackugyo/thoughtscalendar/ui/AbsFragment.java":1406701160601},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":134867},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/kwatanabe/git/googlecalendarapi/src/jp/ne/hatena/hackugyo/thoughtscalendar/ui/AbsFragment.java","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}