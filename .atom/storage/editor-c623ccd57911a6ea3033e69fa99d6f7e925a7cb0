{"mode":"editor","version":1,"windowDimensions":{"x":1950,"y":170,"width":1023,"height":1024},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/kwatanabe/git/uds/libraries/GoogleCalendarView/src/com/example/calendarview","buffers":[{"text":"/*\n * Copyright (C) 2010 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.example.calendarview;\n\nimport android.app.Activity;\nimport android.app.ListFragment;\nimport android.content.Context;\nimport android.content.res.Resources;\nimport android.database.DataSetObserver;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.text.TextUtils;\nimport android.text.format.DateUtils;\nimport android.text.format.Time;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.ViewConfiguration;\nimport android.view.ViewGroup;\nimport android.view.accessibility.AccessibilityEvent;\nimport android.widget.AbsListView;\nimport android.widget.AbsListView.OnScrollListener;\nimport android.widget.ListView;\nimport android.widget.TextView;\n\nimport java.util.Calendar;\nimport java.util.Formatter;\nimport java.util.HashMap;\nimport java.util.Locale;\n\n/**\n * <p>\n * This displays a titled list of weeks with selectable days. It can be\n * configured to display the week number, start the week on a given day, show a\n * reduced number of days, or display an arbitrary number of weeks at a time. By\n * overriding methods and changing variables this fragment can be customized to\n * easily display a month selection component in a given style.\n * </p>\n */\npublic class SimpleDayPickerFragment extends ListFragment implements OnScrollListener {\n\n    private static final String TAG = \"MonthFragment\";\n    private static final String KEY_CURRENT_TIME = \"current_time\";\n    \n    private static StringBuilder mSB = new StringBuilder(50);\n    private static Formatter mF = new Formatter(mSB, Locale.getDefault());\n\n    // Affects when the month selection will change while scrolling up\n    protected static final int SCROLL_HYST_WEEKS = 2;\n    // How long the GoTo fling animation should last\n    protected static final int GOTO_SCROLL_DURATION = 500;\n    // How long to wait after receiving an onScrollStateChanged notification\n    // before acting on it\n    protected static final int SCROLL_CHANGE_DELAY = 40;\n    // The number of days to display in each week\n    public static final int DAYS_PER_WEEK = 7;\n    // The size of the month name displayed above the week list\n    protected static final int MINI_MONTH_NAME_TEXT_SIZE = 18;\n    public static int LIST_TOP_OFFSET = -1;  // so that the top line will be under the separator\n    protected int WEEK_MIN_VISIBLE_HEIGHT = 12;\n    protected int BOTTOM_BUFFER = 20;\n    protected int mSaturdayColor = 0;\n    protected int mSundayColor = 0;\n    protected int mDayNameColor = 0;\n\n    // You can override these numbers to get a different appearance\n    protected int mNumWeeks = 6;\n    protected boolean mShowWeekNumber = false;\n    protected int mDaysPerWeek = 7;\n\n    // These affect the scroll speed and feel\n    protected float mFriction = 1.0f;\n\n    protected Context mContext;\n    protected Handler mHandler;\n\n    protected float mMinimumFlingVelocity;\n\n    // highlighted time\n    protected Time mSelectedDay = new Time();\n    protected SimpleWeeksAdapter mAdapter;\n    protected ListView mListView;\n    protected ViewGroup mDayNamesHeader;\n    protected String[] mDayLabels;\n\n    // disposable variable used for time calculations\n    protected Time mTempTime = new Time();\n\n    private static float mScale = 0;\n    // When the week starts; numbered like Time.<WEEKDAY> (e.g. SUNDAY=0).\n    protected int mFirstDayOfWeek;\n    // The first day of the focus month\n    protected Time mFirstDayOfMonth = new Time();\n    // The first day that is visible in the view\n    protected Time mFirstVisibleDay = new Time();\n    // The name of the month to display\n    protected TextView mMonthName;\n    // The last name announced by accessibility\n    protected CharSequence mPrevMonthName;\n    // which month should be displayed/highlighted [0-11]\n    protected int mCurrentMonthDisplayed;\n    // used for tracking during a scroll\n    protected long mPreviousScrollPosition;\n    // used for tracking which direction the view is scrolling\n    protected boolean mIsScrollingUp = false;\n    // used for tracking what state listview is in\n    protected int mPreviousScrollState = OnScrollListener.SCROLL_STATE_IDLE;\n    // used for tracking what state listview is in\n    protected int mCurrentScrollState = OnScrollListener.SCROLL_STATE_IDLE;\n\n    // This causes an update of the view at midnight\n    protected Runnable mTodayUpdater = new Runnable() {\n        @Override\n        public void run() {\n            Time midnight = new Time(mFirstVisibleDay.timezone);\n            midnight.setToNow();\n            long currentMillis = midnight.toMillis(true);\n\n            midnight.hour = 0;\n            midnight.minute = 0;\n            midnight.second = 0;\n            midnight.monthDay++;\n            long millisToMidnight = midnight.normalize(true) - currentMillis;\n            mHandler.postDelayed(this, millisToMidnight);\n\n            if (mAdapter != null) {\n                mAdapter.notifyDataSetChanged();\n            }\n        }\n    };\n\n    // This allows us to update our position when a day is tapped\n    protected DataSetObserver mObserver = new DataSetObserver() {\n        @Override\n        public void onChanged() {\n            Time day = mAdapter.getSelectedDay();\n            if (day.year != mSelectedDay.year || day.yearDay != mSelectedDay.yearDay) {\n                goTo(day.toMillis(true), true, true, false);\n            }\n        }\n    };\n\n    public SimpleDayPickerFragment(long initialTime) {\n        goTo(initialTime, false, true, true);\n        mHandler = new Handler();\n    }\n\n    @Override\n    public void onAttach(Activity activity) {\n        super.onAttach(activity);\n        mContext = activity;\n        String tz = Time.getCurrentTimezone();\n        ViewConfiguration viewConfig = ViewConfiguration.get(activity);\n        mMinimumFlingVelocity = viewConfig.getScaledMinimumFlingVelocity();\n\n        // Ensure we're in the correct time zone\n        mSelectedDay.switchTimezone(tz);\n        mSelectedDay.normalize(true);\n        mFirstDayOfMonth.timezone = tz;\n        mFirstDayOfMonth.normalize(true);\n        mFirstVisibleDay.timezone = tz;\n        mFirstVisibleDay.normalize(true);\n        mTempTime.timezone = tz;\n\n        Resources res = activity.getResources();\n        mSaturdayColor = res.getColor(R.color.month_saturday);\n        mSundayColor = res.getColor(R.color.month_sunday);\n        mDayNameColor = res.getColor(R.color.month_day_names_color);\n\n        // Adjust sizes for screen density\n        if (mScale == 0) {\n            mScale = activity.getResources().getDisplayMetrics().density;\n            if (mScale != 1) {\n                WEEK_MIN_VISIBLE_HEIGHT *= mScale;\n                BOTTOM_BUFFER *= mScale;\n                LIST_TOP_OFFSET *= mScale;\n            }\n        }\n        setUpAdapter();\n        setListAdapter(mAdapter);\n    }\n\n    /**\n     * Creates a new adapter if necessary and sets up its parameters. Override\n     * this method to provide a custom adapter.\n     */\n    protected void setUpAdapter() {\n        HashMap<String, Integer> weekParams = new HashMap<String, Integer>();\n        weekParams.put(SimpleWeeksAdapter.WEEK_PARAMS_NUM_WEEKS, mNumWeeks);\n        weekParams.put(SimpleWeeksAdapter.WEEK_PARAMS_SHOW_WEEK, mShowWeekNumber ? 1 : 0);\n        weekParams.put(SimpleWeeksAdapter.WEEK_PARAMS_WEEK_START, mFirstDayOfWeek);\n        weekParams.put(SimpleWeeksAdapter.WEEK_PARAMS_JULIAN_DAY,\n                Time.getJulianDay(mSelectedDay.toMillis(false), mSelectedDay.gmtoff));\n        if (mAdapter == null) {\n            mAdapter = new SimpleWeeksAdapter(getActivity(), weekParams);\n            mAdapter.registerDataSetObserver(mObserver);\n        } else {\n            mAdapter.updateParams(weekParams);\n        }\n        // refresh the view with the new parameters\n        mAdapter.notifyDataSetChanged();\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        if (savedInstanceState != null && savedInstanceState.containsKey(KEY_CURRENT_TIME)) {\n            goTo(savedInstanceState.getLong(KEY_CURRENT_TIME), false, true, true);\n        }\n    }\n\n    @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n\n        setUpListView();\n        setUpHeader();\n\n        mMonthName = (TextView) getView().findViewById(R.id.month_name);\n        SimpleWeekView child = (SimpleWeekView) mListView.getChildAt(0);\n        if (child == null) {\n            return;\n        }\n        int julianDay = child.getFirstJulianDay();\n        mFirstVisibleDay.setJulianDay(julianDay);\n        // set the title to the month of the second week\n        mTempTime.setJulianDay(julianDay + DAYS_PER_WEEK);\n        setMonthDisplayed(mTempTime, true);\n    }\n\n    /**\n     * Sets up the strings to be used by the header. Override this method to use\n     * different strings or modify the view params.\n     */\n    @SuppressWarnings(\"deprecation\")\n\tprotected void setUpHeader() {\n        mDayLabels = new String[7];\n        for (int i = Calendar.SUNDAY; i <= Calendar.SATURDAY; i++) {\n            mDayLabels[i - Calendar.SUNDAY] = DateUtils.getDayOfWeekString(i,\n                    DateUtils.LENGTH_MEDIUM).toUpperCase();\n        }\n    }\n\n    /**\n     * Sets all the required fields for the list view. Override this method to\n     * set a different list view behavior.\n     */\n    protected void setUpListView() {\n        // Configure the listview\n        mListView = getListView();\n        // Transparent background on scroll\n        mListView.setCacheColorHint(0);\n        // No dividers\n        mListView.setDivider(null);\n        // Items are clickable\n        mListView.setItemsCanFocus(true);\n        // The thumb gets in the way, so disable it\n        mListView.setFastScrollEnabled(false);\n        mListView.setVerticalScrollBarEnabled(false);\n        mListView.setOnScrollListener(this);\n        mListView.setFadingEdgeLength(0);\n        // Make the scrolling behavior nicer\n        mListView.setFriction(ViewConfiguration.getScrollFriction() * mFriction);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        setUpAdapter();\n        doResumeUpdates();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n        mHandler.removeCallbacks(mTodayUpdater);\n    }\n\n    @Override\n    public void onSaveInstanceState(Bundle outState) {\n        outState.putLong(KEY_CURRENT_TIME, mSelectedDay.toMillis(true));\n    }\n\n    /**\n     * Updates the user preference fields. Override this to use a different\n     * preference space.\n     */\n    protected void doResumeUpdates() {\n        // Get default week start based on locale, subtracting one for use with android Time.\n        Calendar cal = Calendar.getInstance(Locale.getDefault());\n        mFirstDayOfWeek = cal.getFirstDayOfWeek() - 1;\n\n        mShowWeekNumber = false;\n\n        updateHeader();\n        goTo(mSelectedDay.toMillis(true), false, false, false);\n        mAdapter.setSelectedDay(mSelectedDay);\n        mTodayUpdater.run();\n    }\n\n    /**\n     * Fixes the day names header to provide correct spacing and updates the\n     * label text. Override this to set up a custom header.\n     */\n    protected void updateHeader() {\n        TextView label = (TextView) mDayNamesHeader.findViewById(R.id.wk_label);\n        if (mShowWeekNumber) {\n            label.setVisibility(View.VISIBLE);\n        } else {\n            label.setVisibility(View.GONE);\n        }\n        int offset = mFirstDayOfWeek - 1;\n        for (int i = 1; i < 8; i++) {\n            label = (TextView) mDayNamesHeader.getChildAt(i);\n            if (i < mDaysPerWeek + 1) {\n                int position = (offset + i) % 7;\n                label.setText(mDayLabels[position]);\n                label.setVisibility(View.VISIBLE);\n                if (position == Time.SATURDAY) {\n                    label.setTextColor(mSaturdayColor);\n                } else if (position == Time.SUNDAY) {\n                    label.setTextColor(mSundayColor);\n                } else {\n                    label.setTextColor(mDayNameColor);\n                }\n            } else {\n                label.setVisibility(View.GONE);\n            }\n        }\n        mDayNamesHeader.invalidate();\n    }\n\n//    @Override\n//    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n//        View v = inflater.inflate(R.layout.month_by_week,\n//                container, false);\n//        mDayNamesHeader = (ViewGroup) v.findViewById(R.id.day_names);\n//        return v;\n//    }\n\n    /**\n     * Returns the UTC millis since epoch representation of the currently\n     * selected time.\n     *\n     * @return\n     */\n    public long getSelectedTime() {\n        return mSelectedDay.toMillis(true);\n    }\n\n    /**\n     * This moves to the specified time in the view. If the time is not already\n     * in range it will move the list so that the first of the month containing\n     * the time is at the top of the view. If the new time is already in view\n     * the list will not be scrolled unless forceScroll is true. This time may\n     * optionally be highlighted as selected as well.\n     *\n     * @param time The time to move to\n     * @param animate Whether to scroll to the given time or just redraw at the\n     *            new location\n     * @param setSelected Whether to set the given time as selected\n     * @param forceScroll Whether to recenter even if the time is already\n     *            visible\n     * @return Whether or not the view animated to the new location\n     */\n    public boolean goTo(long time, boolean animate, boolean setSelected, boolean forceScroll) {\n        if (time == -1) {\n            Log.e(TAG, \"time is invalid\");\n            return false;\n        }\n\n        // Set the selected day\n        if (setSelected) {\n            mSelectedDay.set(time);\n            mSelectedDay.normalize(true);\n        }\n\n        // If this view isn't returned yet we won't be able to load the lists\n        // current position, so return after setting the selected day.\n        if (!isResumed()) {\n            if (Log.isLoggable(TAG, Log.DEBUG)) {\n                Log.d(TAG, \"We're not visible yet\");\n            }\n            return false;\n        }\n\n        mTempTime.set(time);\n        long millis = mTempTime.normalize(true);\n        // Get the week we're going to\n        // TODO push Util function into Calendar public api.\n        int position = getWeeksSinceEpochFromJulianDay(\n                Time.getJulianDay(millis, mTempTime.gmtoff), mFirstDayOfWeek);\n\n        View child;\n        int i = 0;\n        int top = 0;\n        // Find a child that's completely in the view\n        do {\n            child = mListView.getChildAt(i++);\n            if (child == null) {\n                break;\n            }\n            top = child.getTop();\n            if (Log.isLoggable(TAG, Log.DEBUG)) {\n                Log.d(TAG, \"child at \" + (i-1) + \" has top \" + top);\n            }\n        } while (top < 0);\n\n        // Compute the first and last position visible\n        int firstPosition;\n        if (child != null) {\n            firstPosition = mListView.getPositionForView(child);\n        } else {\n            firstPosition = 0;\n        }\n        int lastPosition = firstPosition + mNumWeeks - 1;\n        if (top > BOTTOM_BUFFER) {\n            lastPosition--;\n        }\n\n        if (setSelected) {\n            mAdapter.setSelectedDay(mSelectedDay);\n        }\n\n        if (Log.isLoggable(TAG, Log.DEBUG)) {\n            Log.d(TAG, \"GoTo position \" + position);\n        }\n        // Check if the selected day is now outside of our visible range\n        // and if so scroll to the month that contains it\n        if (position < firstPosition || position > lastPosition || forceScroll) {\n            mFirstDayOfMonth.set(mTempTime);\n            mFirstDayOfMonth.monthDay = 1;\n            millis = mFirstDayOfMonth.normalize(true);\n            setMonthDisplayed(mFirstDayOfMonth, true);\n            position = getWeeksSinceEpochFromJulianDay(\n                    Time.getJulianDay(millis, mFirstDayOfMonth.gmtoff), mFirstDayOfWeek);\n\n            mPreviousScrollState = OnScrollListener.SCROLL_STATE_FLING;\n            if (animate) {\n                mListView.smoothScrollToPositionFromTop(\n                        position, LIST_TOP_OFFSET, GOTO_SCROLL_DURATION);\n                return true;\n            } else {\n                mListView.setSelectionFromTop(position, LIST_TOP_OFFSET);\n                // Perform any after scroll operations that are needed\n                onScrollStateChanged(mListView, OnScrollListener.SCROLL_STATE_IDLE);\n            }\n        } else if (setSelected) {\n            // Otherwise just set the selection\n            setMonthDisplayed(mSelectedDay, true);\n        }\n        return false;\n    }\n\n     /**\n     * Updates the title and selected month if the view has moved to a new\n     * month.\n     */\n    @Override\n    public void onScroll(\n            AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {\n        SimpleWeekView child = (SimpleWeekView)view.getChildAt(0);\n        if (child == null) {\n            return;\n        }\n\n        // Figure out where we are\n        long currScroll = view.getFirstVisiblePosition() * child.getHeight() - child.getBottom();\n        mFirstVisibleDay.setJulianDay(child.getFirstJulianDay());\n\n        // If we have moved since our last call update the direction\n        if (currScroll < mPreviousScrollPosition) {\n            mIsScrollingUp = true;\n        } else if (currScroll > mPreviousScrollPosition) {\n            mIsScrollingUp = false;\n        } else {\n            return;\n        }\n\n        mPreviousScrollPosition = currScroll;\n        mPreviousScrollState = mCurrentScrollState;\n\n        updateMonthHighlight(mListView);\n    }\n\n    /**\n     * Figures out if the month being shown has changed and updates the\n     * highlight if needed\n     *\n     * @param view The ListView containing the weeks\n     */\n    private void updateMonthHighlight(AbsListView view) {\n        SimpleWeekView child = (SimpleWeekView) view.getChildAt(0);\n        if (child == null) {\n            return;\n        }\n\n        // Figure out where we are\n        int offset = child.getBottom() < WEEK_MIN_VISIBLE_HEIGHT ? 1 : 0;\n        // Use some hysteresis for checking which month to highlight. This\n        // causes the month to transition when two full weeks of a month are\n        // visible.\n        child = (SimpleWeekView) view.getChildAt(SCROLL_HYST_WEEKS + offset);\n\n        if (child == null) {\n            return;\n        }\n\n        // Find out which month we're moving into\n        int month;\n        if (mIsScrollingUp) {\n            month = child.getFirstMonth();\n        } else {\n            month = child.getLastMonth();\n        }\n\n        // And how it relates to our current highlighted month\n        int monthDiff;\n        if (mCurrentMonthDisplayed == 11 && month == 0) {\n            monthDiff = 1;\n        } else if (mCurrentMonthDisplayed == 0 && month == 11) {\n            monthDiff = -1;\n        } else {\n            monthDiff = month - mCurrentMonthDisplayed;\n        }\n\n        // Only switch months if we're scrolling away from the currently\n        // selected month\n        if (monthDiff != 0) {\n            int julianDay = child.getFirstJulianDay();\n            if (mIsScrollingUp) {\n                // Takes the start of the week\n            } else {\n                // Takes the start of the following week\n                julianDay += DAYS_PER_WEEK;\n            }\n            mTempTime.setJulianDay(julianDay);\n            setMonthDisplayed(mTempTime, false);\n        }\n    }\n\n    /**\n     * Sets the month displayed at the top of this view based on time. Override\n     * to add custom events when the title is changed.\n     *\n     * @param time A day in the new focus month.\n     * @param updateHighlight TODO(epastern):\n     */\n    protected void setMonthDisplayed(Time time, boolean updateHighlight) {\n        CharSequence oldMonth = mMonthName.getText();\n        int flags = DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_NO_MONTH_DAY\n                | DateUtils.FORMAT_SHOW_YEAR;\n        mMonthName.setText(formatDateRange(mContext, time.toMillis(true),time.toMillis(true),flags));\n        mMonthName.invalidate();\n        if (!TextUtils.equals(oldMonth, mMonthName.getText())) {\n            mMonthName.sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_FOCUSED);\n        }\n        mCurrentMonthDisplayed = time.month;\n        if (updateHighlight) {\n            mAdapter.updateFocusMonth(mCurrentMonthDisplayed);\n        }\n    }\n    \n    public static int getWeeksSinceEpochFromJulianDay(int julianDay, int firstDayOfWeek) {\n        int diff = Time.THURSDAY - firstDayOfWeek;\n        if (diff < 0) {\n            diff += 7;\n        }\n        int refDay = Time.EPOCH_JULIAN_DAY - diff;\n        return (julianDay - refDay) / 7;\n    }\n    \n    public String formatDateRange(Context context, long startMillis,\n            long endMillis, int flags) {\n        String date;\n        String tz;\n        if ((flags & DateUtils.FORMAT_UTC) != 0) {\n            tz = Time.TIMEZONE_UTC;\n        } else {\n            tz = Time.getCurrentTimezone();\n        }\n        synchronized (mSB) {\n            mSB.setLength(0);\n            date = DateUtils.formatDateRange(context, mF, startMillis, endMillis, flags,\n                    tz).toString();\n        }\n        return date;\n    }\n\n    @Override\n    public void onScrollStateChanged(AbsListView view, int scrollState) {\n        // use a post to prevent re-entering onScrollStateChanged before it\n        // exits\n        mScrollStateChangedRunnable.doScrollStateChange(view, scrollState);\n    }\n\n    protected ScrollStateRunnable mScrollStateChangedRunnable = new ScrollStateRunnable();\n\n    protected class ScrollStateRunnable implements Runnable {\n        private int mNewState;\n\n        /**\n         * Sets up the runnable with a short delay in case the scroll state\n         * immediately changes again.\n         *\n         * @param view The list view that changed state\n         * @param scrollState The new state it changed to\n         */\n        public void doScrollStateChange(AbsListView view, int scrollState) {\n            mHandler.removeCallbacks(this);\n            mNewState = scrollState;\n            mHandler.postDelayed(this, SCROLL_CHANGE_DELAY);\n        }\n\n        public void run() {\n            mCurrentScrollState = mNewState;\n            if (Log.isLoggable(TAG, Log.DEBUG)) {\n                Log.d(TAG,\n                        \"new scroll state: \" + mNewState + \" old state: \" + mPreviousScrollState);\n            }\n            // Fix the position after a scroll or a fling ends\n            if (mNewState == OnScrollListener.SCROLL_STATE_IDLE\n                    && mPreviousScrollState != OnScrollListener.SCROLL_STATE_IDLE) {\n                mPreviousScrollState = mNewState;\n                // Uncomment the below to add snap to week back\n//                int i = 0;\n//                View child = mView.getChildAt(i);\n//                while (child != null && child.getBottom() <= 0) {\n//                    child = mView.getChildAt(++i);\n//                }\n//                if (child == null) {\n//                    // The view is no longer visible, just return\n//                    return;\n//                }\n//                int dist = child.getTop();\n//                if (dist < LIST_TOP_OFFSET) {\n//                    if (Log.isLoggable(TAG, Log.DEBUG)) {\n//                        Log.d(TAG, \"scrolling by \" + dist + \" up? \" + mIsScrollingUp);\n//                    }\n//                    int firstPosition = mView.getFirstVisiblePosition();\n//                    int lastPosition = mView.getLastVisiblePosition();\n//                    boolean scroll = firstPosition != 0 && lastPosition != mView.getCount() - 1;\n//                    if (mIsScrollingUp && scroll) {\n//                        mView.smoothScrollBy(dist, 500);\n//                    } else if (!mIsScrollingUp && scroll) {\n//                        mView.smoothScrollBy(child.getHeight() + dist, 500);\n//                    }\n//                }\n                mAdapter.updateFocusMonth(mCurrentMonthDisplayed);\n            } else {\n                mPreviousScrollState = mNewState;\n            }\n        }\n    }\n}\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":24},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/kwatanabe/git/uds/libraries/GoogleCalendarView/src/com/example/calendarview/SimpleDayPickerFragment.java","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"ba23ea1e8d27d9a56c157ff66e77b42c72626057","deserializer":"TextBuffer"},{"text":"/*\n * Copyright (C) 2010 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.example.calendarview;\n\n// TODO Remove calendar imports when the required methods have been\n// refactored into the public api\n\nimport android.content.Context;\nimport android.text.format.Time;\nimport android.util.Log;\nimport android.view.GestureDetector;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.view.View.OnTouchListener;\nimport android.view.ViewGroup;\nimport android.widget.AbsListView.LayoutParams;\nimport android.widget.BaseAdapter;\nimport android.widget.ListView;\n\nimport java.util.Calendar;\nimport java.util.HashMap;\nimport java.util.Locale;\n\n/**\n * <p>\n * This is a specialized adapter for creating a list of weeks with selectable\n * days. It can be configured to display the week number, start the week on a\n * given day, show a reduced number of days, or display an arbitrary number of\n * weeks at a time. See {@link SimpleDayPickerFragment} for usage.\n * </p>\n */\npublic class SimpleWeeksAdapter extends BaseAdapter implements OnTouchListener {\n\n    private static final String TAG = \"MonthByWeek\";\n\n    /**\n     * The number of weeks to display at a time.\n     */\n    public static final String WEEK_PARAMS_NUM_WEEKS = \"num_weeks\";\n    /**\n     * Which month should be in focus currently.\n     */\n    public static final String WEEK_PARAMS_FOCUS_MONTH = \"focus_month\";\n    /**\n     * Whether the week number should be shown. Non-zero to show them.\n     */\n    public static final String WEEK_PARAMS_SHOW_WEEK = \"week_numbers\";\n    /**\n     * Which day the week should start on. {@link Time#SUNDAY} through\n     * {@link Time#SATURDAY}.\n     */\n    public static final String WEEK_PARAMS_WEEK_START = \"week_start\";\n    /**\n     * The Julian day to highlight as selected.\n     */\n    public static final String WEEK_PARAMS_JULIAN_DAY = \"selected_day\";\n    /**\n     * How many days of the week to display [1-7].\n     */\n    public static final String WEEK_PARAMS_DAYS_PER_WEEK = \"days_per_week\";\n\n    protected static final int WEEK_COUNT = 3497 - 0;\n    protected static int DEFAULT_NUM_WEEKS = 6;\n    protected static int DEFAULT_MONTH_FOCUS = 0;\n    protected static int DEFAULT_DAYS_PER_WEEK = 7;\n    protected static int DEFAULT_WEEK_HEIGHT = 32;\n    protected static int WEEK_7_OVERHANG_HEIGHT = 7;\n\n    protected static float mScale = 0;\n    protected Context mContext;\n    // The day to highlight as selected\n    protected Time mSelectedDay;\n    // The week since 1970 that the selected day is in\n    protected int mSelectedWeek;\n    // When the week starts; numbered like Time.<WEEKDAY> (e.g. SUNDAY=0).\n    protected int mFirstDayOfWeek;\n    protected boolean mShowWeekNumber = false;\n    protected GestureDetector mGestureDetector;\n    protected int mNumWeeks = DEFAULT_NUM_WEEKS;\n    protected int mDaysPerWeek = DEFAULT_DAYS_PER_WEEK;\n    protected int mFocusMonth = DEFAULT_MONTH_FOCUS;\n\n    public SimpleWeeksAdapter(Context context, HashMap<String, Integer> params) {\n        mContext = context;\n\n        // Get default week start based on locale, subtracting one for use with android Time.\n        Calendar cal = Calendar.getInstance(Locale.getDefault());\n        mFirstDayOfWeek = cal.getFirstDayOfWeek() - 1;\n\n        if (mScale == 0) {\n            mScale = context.getResources().getDisplayMetrics().density;\n            if (mScale != 1) {\n                WEEK_7_OVERHANG_HEIGHT *= mScale;\n            }\n        }\n        init();\n        updateParams(params);\n    }\n\n    /**\n     * Set up the gesture detector and selected time\n     */\n    protected void init() {\n        mGestureDetector = new GestureDetector(mContext, new CalendarGestureListener());\n        mSelectedDay = new Time();\n        mSelectedDay.setToNow();\n    }\n\n    /**\n     * Parse the parameters and set any necessary fields. See\n     * {@link #WEEK_PARAMS_NUM_WEEKS} for parameter details.\n     *\n     * @param params A list of parameters for this adapter\n     */\n    public void updateParams(HashMap<String, Integer> params) {\n        if (params == null) {\n            Log.e(TAG, \"WeekParameters are null! Cannot update adapter.\");\n            return;\n        }\n        if (params.containsKey(WEEK_PARAMS_FOCUS_MONTH)) {\n            mFocusMonth = params.get(WEEK_PARAMS_FOCUS_MONTH);\n        }\n        if (params.containsKey(WEEK_PARAMS_FOCUS_MONTH)) {\n            mNumWeeks = params.get(WEEK_PARAMS_NUM_WEEKS);\n        }\n        if (params.containsKey(WEEK_PARAMS_SHOW_WEEK)) {\n            mShowWeekNumber = params.get(WEEK_PARAMS_SHOW_WEEK) != 0;\n        }\n        if (params.containsKey(WEEK_PARAMS_WEEK_START)) {\n            mFirstDayOfWeek = params.get(WEEK_PARAMS_WEEK_START);\n        }\n        if (params.containsKey(WEEK_PARAMS_JULIAN_DAY)) {\n            int julianDay = params.get(WEEK_PARAMS_JULIAN_DAY);\n            mSelectedDay.setJulianDay(julianDay);\n            mSelectedWeek = getWeeksSinceEpochFromJulianDay(julianDay, mFirstDayOfWeek);\n        }\n        if (params.containsKey(WEEK_PARAMS_DAYS_PER_WEEK)) {\n            mDaysPerWeek = params.get(WEEK_PARAMS_DAYS_PER_WEEK);\n        }\n        refresh();\n    }\n\n    /**\n     * Updates the selected day and related parameters.\n     *\n     * @param selectedTime The time to highlight\n     */\n    public void setSelectedDay(Time selectedTime) {\n        mSelectedDay.set(selectedTime);\n        long millis = mSelectedDay.normalize(true);\n        mSelectedWeek = getWeeksSinceEpochFromJulianDay(\n                Time.getJulianDay(millis, mSelectedDay.gmtoff), mFirstDayOfWeek);\n        notifyDataSetChanged();\n    }\n    \n    public static int getWeeksSinceEpochFromJulianDay(int julianDay, int firstDayOfWeek) {\n        int diff = Time.THURSDAY - firstDayOfWeek;\n        if (diff < 0) {\n            diff += 7;\n        }\n        int refDay = Time.EPOCH_JULIAN_DAY - diff;\n        return (julianDay - refDay) / 7;\n    }\n\n    /**\n     * Returns the currently highlighted day\n     *\n     * @return\n     */\n    public Time getSelectedDay() {\n        return mSelectedDay;\n    }\n\n    /**\n     * updates any config options that may have changed and refreshes the view\n     */\n    protected void refresh() {\n        notifyDataSetChanged();\n    }\n\n    @Override\n    public int getCount() {\n        return WEEK_COUNT;\n    }\n\n    @Override\n    public Object getItem(int position) {\n        return null;\n    }\n\n    @Override\n    public long getItemId(int position) {\n        return position;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n        SimpleWeekView v;\n        HashMap<String, Integer> drawingParams = null;\n        if (convertView != null) {\n            v = (SimpleWeekView) convertView;\n            // We store the drawing parameters in the view so it can be recycled\n            drawingParams = (HashMap<String, Integer>) v.getTag();\n        } else {\n            v = new SimpleWeekView(mContext);\n            // Set up the new view\n            LayoutParams params = new LayoutParams(\n                    LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);\n            v.setLayoutParams(params);\n            v.setClickable(true);\n            v.setOnTouchListener(this);\n        }\n        if (drawingParams == null) {\n            drawingParams = new HashMap<String, Integer>();\n        }\n        drawingParams.clear();\n\n        int selectedDay = -1;\n        if (mSelectedWeek == position) {\n            selectedDay = mSelectedDay.weekDay;\n        }\n\n        // pass in all the view parameters\n        drawingParams.put(SimpleWeekView.VIEW_PARAMS_HEIGHT,\n                (parent.getHeight() - WEEK_7_OVERHANG_HEIGHT) / mNumWeeks);\n        drawingParams.put(SimpleWeekView.VIEW_PARAMS_SELECTED_DAY, selectedDay);\n        drawingParams.put(SimpleWeekView.VIEW_PARAMS_SHOW_WK_NUM, mShowWeekNumber ? 1 : 0);\n        drawingParams.put(SimpleWeekView.VIEW_PARAMS_WEEK_START, mFirstDayOfWeek);\n        drawingParams.put(SimpleWeekView.VIEW_PARAMS_NUM_DAYS, mDaysPerWeek);\n        drawingParams.put(SimpleWeekView.VIEW_PARAMS_WEEK, position);\n        drawingParams.put(SimpleWeekView.VIEW_PARAMS_FOCUS_MONTH, mFocusMonth);\n        v.setWeekParams(drawingParams, mSelectedDay.timezone);\n        v.invalidate();\n\n        return v;\n    }\n\n    /**\n     * Changes which month is in focus and updates the view.\n     *\n     * @param month The month to show as in focus [0-11]\n     */\n    public void updateFocusMonth(int month) {\n        mFocusMonth = month;\n        notifyDataSetChanged();\n    }\n\n    @Override\n    public boolean onTouch(View v, MotionEvent event) {\n        if (mGestureDetector.onTouchEvent(event)) {\n            SimpleWeekView view = (SimpleWeekView) v;\n            Time day = ((SimpleWeekView)v).getDayFromLocation(event.getX());\n            if (Log.isLoggable(TAG, Log.DEBUG)) {\n                Log.d(TAG, \"Touched day at Row=\" + view.mWeek + \" day=\" + day.toString());\n            }\n            if (day != null) {\n                onDayTapped(day);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Maintains the same hour/min/sec but moves the day to the tapped day.\n     *\n     * @param day The day that was tapped\n     */\n    protected void onDayTapped(Time day) {\n        day.hour = mSelectedDay.hour;\n        day.minute = mSelectedDay.minute;\n        day.second = mSelectedDay.second;\n        setSelectedDay(day);\n    }\n\n\n    /**\n     * This is here so we can identify single tap events and set the selected\n     * day correctly\n     */\n    protected class CalendarGestureListener extends GestureDetector.SimpleOnGestureListener {\n        @Override\n        public boolean onSingleTapUp(MotionEvent e) {\n            return true;\n        }\n    }\n\n    ListView mListView;\n\n    public void setListView(ListView lv) {\n        mListView = lv;\n    }\n}\n","markers":{"markers":{"1":{"id":1,"range":[[200,18],[200,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":28,"goalBufferRange":null,"autoscroll":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/kwatanabe/git/uds/libraries/GoogleCalendarView/src/com/example/calendarview/SimpleWeeksAdapter.java","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"d294be61e19f852108c6bdcb2faf237084173be9","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":24,"softTabs":true,"displayBuffer":{"id":25,"softWrap":false,"editorWidthInChars":101,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/kwatanabe/git/uds/libraries/GoogleCalendarView/src/com/example/calendarview/SimpleDayPickerFragment.java","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":28,"softTabs":true,"displayBuffer":{"id":29,"softWrap":false,"editorWidthInChars":101,"scrollTop":3781,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/kwatanabe/git/uds/libraries/GoogleCalendarView/src/com/example/calendarview/SimpleWeeksAdapter.java","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/kwatanabe/git/uds/libraries/GoogleCalendarView/src/com/example/calendarview/SimpleWeeksAdapter.java","focused":false,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"script":{"scriptOptionsViewState":""},"find-and-replace":{"viewState":{"findHistory":["getView","getCou","getItem"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}}},"fuzzy-finder":{"/Users/kwatanabe/git/uds/libraries/GoogleCalendarView/src/com/example/calendarview/SimpleDayPickerFragment.java":1399628410954,"/Users/kwatanabe/git/uds/libraries/GoogleCalendarView/src/com/example/calendarview/SimpleWeeksAdapter.java":1399628431641},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":1540321},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/kwatanabe/git/uds/libraries/GoogleCalendarView/src/com/example/calendarview/SimpleWeeksAdapter.java","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}