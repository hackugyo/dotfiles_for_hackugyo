{"mode":"editor","version":1,"windowDimensions":{"x":2015,"y":349,"width":1024,"height":1024},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app","buffers":[{"text":"<?php\n\nrequire_once APPPATH . 'classes/util/password.php';\n\n\n/**\n * Class Model_Logic_Account\n */\nclass Model_Logic_Account extends Model_Logic_Base\n{\n    /**\n     * プロモーションコード重複時の再生成回数上限\n     */\n    const PROMOTION_CODE_REGENERATE_LIMIT = 20;\n\n    /**\n     * ユーザ情報を登録する\n     *\n     * @param $user_data\n     *\n     * @return mixed\n     */\n    public static function create($user_data)\n    {\n        list($insert_id, $rows_affected) = Model_Datasource_User::create($user_data);\n\n        return $insert_id;\n    }\n\n    public static function find_by_user_id($user_id)\n    {\n        return Model_Datasource_User::find_by_user_id($user_id);\n    }\n\n    /**\n     * ユーザ情報を更新する\n     *\n     * @param      $user_id\n     * @param null $user_data\n     * @param null $payment_data\n     * @param null $contract_data\n     *\n     * @return null\n     * @throws HiroieException\n     */\n    public static function update($user_id, $user_data = null, $payment_data = null, $contract_data = null)\n    {\n        $update_user_data = array();\n\n        //更新前ユーザ情報取得\n        $user_before = Model_Datasource_User::find_by_user_id($user_id);\n        if (empty($user_before)) {\n            throw new HiroieException('A001-E', '$user_id:' . $user_before);\n        }\n\n        //クレジットカード情報更新\n        if (!is_null($payment_data)) {\n            //カードオーソリ\n            $card_number       = $payment_data['card_number'];\n            $card_expire_month = $payment_data['card_expire_month'];\n            $card_expire_year  = $payment_data['card_expire_year'];\n            $paygent           = Model_Logic_Paygent::create_paygent_id(\n                $card_number,\n                $card_expire_month . $card_expire_year\n            );\n\n            //FIXME カード情報を削除する場合はコメント解除\n            //Model_Logic_Paygent::delete_all_paygent_id($user_id);\n\n            //カード登録\n            Model_Logic_Paygent::regist(\n                $user_id, $card_number,\n                $card_expire_month . $card_expire_year);\n\n            $paygent_id                            = $paygent['paymentID'];\n            $card_last4                            = mb_substr($card_number, -4);\n            $update_user_data['paygent_id']        = $paygent_id;\n            $update_user_data['card_last4']        = $card_last4;\n            $update_user_data['card_expire_year']  = $card_expire_year;\n            $update_user_data['card_expire_month'] = $card_expire_month;\n\n        }\n\n        /* 契約更新\n         * 収納スペースを変更しても当月内の請求処理は行わず翌月1日に請求となる。\n         */\n        if (!is_null($contract_data)) {\n            $contracts = Model_Datasource_Contract::find_by_user_id($user_id);\n            if (empty($contracts)) {\n                //契約情報が存在しない。\n                throw new HiroieException('E001-E', '$user_id:' . $user_id);\n            }\n            if (count($contracts) > 1) {\n                //同一ユーザで複数の契約情報が存在する\n                throw new HiroieException('E002-E', 'count($constracs):' . count($contracts));\n            }\n\n            $contract    = $contracts[0];\n            $contract_id = $contract['contract_id'];\n            $space_id    = $contract_data['space_id'];\n\n            $update_contract_data = array('space_id' => $space_id);\n            Model_Datasource_Contract::update(\n                $contract_id,\n                $update_contract_data,\n                $user_id\n            );\n        }\n\n        // ユーザ情報更新\n        if (!is_null($user_data)) {\n            if (isset($user_data['telephone']) && !empty($user_data['telephone'])) {\n                //電話番号重複チェック\n                $telephone = $user_data['telephone'];\n                $users     = Model_Datasource_User::find_by_telephone($telephone);\n                foreach ($users as $user) {\n                    if ($user['user_id'] !== $user_id) {\n                        //異なるユーザで同じ電話番号が登録済み\n                        throw new HiroieException('A002-E', '$telephone:' . $telephone);\n                    }\n                }\n                $update_user_data['telephone'] = $telephone;\n            }\n\n            if (isset($user_data['user_name']) && !empty($user_data['user_name'])) {\n                $update_user_data['user_name'] = $user_data['user_name'];\n            }\n\n            if (isset($user_data['password']) && !empty($user_data['password'])) {\n                $password                     = $user_data['password'];\n                $hashed_password              = self::get_hashed_password($password);\n                $update_user_data['password'] = $hashed_password;\n            }\n        }\n\n        return Model_Datasource_User::update($user_id, $update_user_data, $user_id);\n    }\n\n    /**\n     * ログイン\n     *\n     * @param $mail\n     * @param $password\n     *\n     * @return null\n     */\n    public static function login_by_mail($mail, $password)\n    {\n        $user = Model_Datasource_User::find_by_email($mail);\n\n        return Model_Logic_Account::login($user, $password);\n    }\n\n    /**\n     * @param $telephone\n     * @param $password\n     *\n     * @return array\n     * @throws HiroieException\n     */\n    public static function login_by_telephone($telephone, $password)\n    {\n        //ユーザ情報取得\n        $users = Model_Datasource_User::find_by_telephone($telephone);\n        if (empty($users)) {\n            //電話番号が見つからない\n            throw new HiroieException('A003-E', '$telephone:' . $telephone);\n        }\n        if (count($users) > 1) {\n            //同じ電話番号のユーザが複数存在する\n            throw new HiroieException('A004-E',\n                                      '$telephone:' . $telephone . '/' . 'count($users):' . count($users));\n        }\n\n        $user = $users[0];\n        //パスワードチェック\n        $result = self::login($user, $password);\n        if (false && is_null($result)) {\n            //FIXME エラーは電話番号orパスワードが間違っていると表示する事\n            throw new HiroieException('A005-E',\n                                      '$telephone:' . $telephone . '/' . '$password:' . $password);\n        }\n\n        //荷物情報取得\n        $baggage_list = Model_Datasource_Baggage::find_by_user_id(\n            $user['user_id'],\n            array(\n                Constants::$BAGGAGE_STATUS_PREPARE_STORE,\n                Constants::$BAGGAGE_STATUS_STORED\n            )\n        );\n\n        //使用サイズ算出 サイズ合計、畳数ベース\n        $filled_space_size = 0;\n        $filled_area       = 0;\n        foreach ($baggage_list as $baggage) {\n            $filled_space_size += $baggage['space_size'];\n            $filled_area += $baggage['space_size'];\n        }\n\n        $response = array(\n            'user_id'           => $user['user_id'],\n            'user_name'         => $user['user_name'],\n            'telephone'         => $user['telephone'],\n            'filled_space_size' => $filled_space_size,\n            'filled_area'       => $filled_area,\n            'card_expire_year'  => $user['card_expire_year'],\n            'card_expire_month' => $user['card_expire_month']\n        );\n\n        return $response;\n    }\n\n    /**\n     * @param $system_user_id\n     * @param $password\n     *\n     * @return null\n     */\n    public static function login_by_system_user_id($system_user_id, $password)\n    {\n        $user = Model_Datasource_SystemUser::find_by_system_user_id($system_user_id);\n\n        return Model_Logic_Account::login($user, $password);\n    }\n\n    /**\n     * @param $user\n     * @param $password\n     *\n     * @return null\n     */\n    private static function login($user, $password)\n    {\n        if (password_verify($password, $user['password'])) {\n            return $user;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @param $user_id\n     *\n     * @return mixed\n     * @throws HiroieException\n     */\n    public static function withdraw($user_id)\n    {\n        // 荷物が全て引き出し済みである事を確認する\n        $baggages = Model_Datasource_Baggage::find_by_user_id(\n            $user_id,\n            array(\n                Constants::$BAGGAGE_STATUS_PREPARE_STORE,\n                Constants::$BAGGAGE_STATUS_STORED,\n                Constants::$BAGGAGE_STATUS_PREPARE_SHIP\n            )\n        );\n        if (count($baggages) > 0) {\n            //保管中の荷物が存在する\n            throw new HiroieException('E006-E', 'count($baggages) :' . count($baggages));\n        }\n\n        // 進行中の依頼がない事を確認する\n        $requests = Model_Datasource_Request::find_by_user_id(\n            $user_id,\n            array(\n                //入庫完了、お届け完了、依頼キャンセル以外のステータスがあるか\n                Constants::$REQUEST_STATUS_COLLECT_REQ,\n                Constants::$REQUEST_STATUS_COLLECT_PREPARE,\n                Constants::$REQUEST_STATUS_COLLECT_ABSENCE_ERROR,\n                Constants::$REQUEST_STATUS_COLLECT_CREDIT_ERROR,\n                Constants::$REQUEST_STATUS_COLLECT_PROCEED,\n                Constants::$REQUEST_STATUS_COLLECT_COMPLETE,\n                Constants::$REQUEST_STATUS_DELIVERY_REQ,\n                Constants::$REQUEST_STATUS_DELIVERY_CREDIT_ERROR,\n                Constants::$REQUEST_STATUS_DELIVERTY_PREPARE,\n                Constants::$REQUEST_STATUS_DELIVERY_ABSENCE_ERROR,\n            )\n        );\n        if (count($requests) > 0) {\n            //完了していない依頼が存在する\n            throw new HiroieException('E007-E', 'count($requests)' . count($requests));\n        }\n\n        // 当該ユーザのプロモーションコードを無効にする\n        Model_Datasource_Promotion::invalidate($user_id);\n\n        // 退会処理を行う\n        return Model_Datasource_User::withdraw($user_id);\n    }\n\n    /**\n     * @param $user_id\n     * @param $new_password\n     *\n     * @return bool|false|string\n     */\n    public static function reset_password($user_id, $new_password)\n    {\n        // 新しいパスワードからハッシュ生成\n\n        $hashed_password = self::get_hashed_password($new_password);\n\n        // ユーザテーブル更新\n        $args = array(\n            'password' => $hashed_password,\n        );\n\n        Model_Datasource_User::update($user_id, $args, $user_id);\n\n        return $hashed_password;\n    }\n\n    /**\n     * @param     $user_id\n     * @param int $retry_cnt\n     *\n     * @return string\n     * @throws HiroieException\n     */\n    public static function create_promotion_code($user_id, $retry_cnt = 0)\n    {\n        if ($retry_cnt > self::PROMOTION_CODE_REGENERATE_LIMIT) {\n            //パスワード再生成回数が規定回数オーバー\n            throw new HiroieException('E008-E', '$retry_cnt' . $retry_cnt);\n        }\n\n        $user = Model_Datasource_User::find_by_user_id($user_id);\n        if (empty($user)) {\n            //ユーザ情報が見つからない\n            throw new HiroieException('A001-E', '$user_id' . $user_id);\n        }\n\n        $length         = \\Config::get('hiroie.promotion_code_length');\n        $promotion_code = Util_Utility::create_random_string($length);\n        //FIXME 外部定義化\n        $description = 'プロモーションコード';\n        $message     = 'お友達に紹介しましょう';\n        $result      = Model_Datasource_Promotion::find_by_promotion_code($promotion_code);\n        if (empty($result)) {\n            $data = array(\n                'user_id'        => $user_id,\n                'promotion_code' => $promotion_code,\n                'description'    => $description,\n                'message'        => $message,\n            );\n            $data = array_merge($data);\n            Model_Datasource_Promotion::create($data);\n        } else {\n            self::create_promotion_code($user_id, $retry_cnt + 1);\n        }\n\n        return $promotion_code;\n    }\n\n    /**\n     * @param $user_id\n     *\n     * @return mixed\n     */\n    public static function find_promotion_code($user_id)\n    {\n        return Model_Datasource_Promotion::find_by_user_id($user_id);\n    }\n\n    /**\n     * @param $telephone\n     *\n     * @return array\n     * @throws HiroieException\n     */\n    public static function send_sms_auth_code($telephone)\n    {\n        //電話番号重複チェック\n        $user = Model_Datasource_User::find_by_telephone($telephone);\n        if (count($user) !== 0) {\n            //指定された電話番号は既に登録済み\n            throw new HiroieException('E002-E',\n                                      '$telephone:' . $telephone . '/' . 'count($user):' . count($user));\n        }\n\n        //当該電話番号で既に生成済みの認証コードを無効化\n        Model_Datasource_SmsAuth::invalidate($telephone);\n\n        //SMS認証コード生成\n        $auth_code_length = Config::get('hiroie.auth_code_length');\n        $auth_code        = Util_Utility::create_random_number($auth_code_length);\n\n        //SMS認証コード登録\n        $auth_code_alive_time = Config::get('hiroie.auth_code_alive_time');\n        $expired_at           = date(\"Y/m/d H:i:s\",\n                                     strtotime(\"+\" . $auth_code_alive_time . 'minutes'));\n\n        $sms_auth_data = array(\n            'auth_key'  => $telephone,\n            'auth_code' => $auth_code,\n            'expire_at' => $expired_at,\n        );\n        $sms_auth_data = array_merge($sms_auth_data);\n        Model_Datasource_SmsAuth::create($sms_auth_data);\n\n        //送信メッセージ編集\n        $message = '<HIROIE運営事務局>' . PHP_EOL;\n        $message .= '認証番号:' . $auth_code . PHP_EOL;\n        $message .= 'この番号をHIROIEアプリの認証画面で入力してください。有効期限:'\n            . $auth_code_alive_time . '分';\n\n        //SMS認証コード送信\n        $response = Util_Sms::send($telephone, $message);\n\n        //SMS送信ログ登録\n        $message_log                 = (array)$response;\n        $message_log['type']         = Constants::$SMS_MESSAGE_AUTH_CODE;\n        $date                        = strtotime($response->date_created);\n        $message_log['date_created'] = date('Y/m/d h:i:s', $date);\n        $message_log['date_updated'] = date('Y/m/d h:i:s', $date);\n        Model_Datasource_SmsMessageLog::create($message_log);\n\n        return $response;\n    }\n\n    /**\n     * @param $telephone\n     * @param $auth_code\n     *\n     * @return bool\n     * @throws HiroieException\n     */\n    public static function verify_sms_auth_code($telephone, $auth_code)\n    {\n        //SMS認証コード検証\n        $auth = Model_Datasource_SmsAuth::find_by_telephone($telephone);\n        if (count($auth) !== 1) {\n            //認証コード検証エラー\n            throw new HiroieException('A011-E', 'count($auth):' . count($auth));\n        }\n\n        //有効期限チェック\n        $auth_code_from_db = $auth[0]['auth_code'];\n\n        if ($auth_code_from_db) {\n            //該当キー有り\n            if ($auth_code === $auth_code_from_db) {\n                //認証成功\n                return true;\n            } else {\n                //認証失敗\n                return false;\n            }\n        } else {\n            //該当キー無し,有効期限切れ\n            throw new HiroieException('A012-E', '($auth):' . count($auth));\n        }\n    }\n\n    /**\n     * @param $user_id\n     *\n     * @return string\n     * @throws HiroieException\n     */\n    public static function send_temp_password($user_id)\n    {\n        //ユーザ存在確認\n        $user = Model_Datasource_User::find_by_user_id($user_id);\n        if (empty($user)) {\n            //ユーザ情報が見つからない\n            throw new HiroieException('A001-E', '$user_id' . $user_id);\n        }\n\n        //FIXME 仮パスワード発行回数に制限かける？\n\n        //仮パスワード生成\n        $regenerate_password_length = Config::get('hiroie.regenerate_password_length');\n        $password                   = Util_Utility::create_random_string($regenerate_password_length);\n\n        //ユーザのパスワードを更新\n        self::reset_password($user_id, $password);\n\n        //SMSで仮パスワード送信\n        $message = '<HIROIE運営事務局>' . PHP_EOL;\n        $message .= '仮パスワードは:' . $password . 'です。';\n\n        if(Config::get('send_sms')) {\n            //SMS認証コード送信\n            $telephone = $user['telephone'];\n            $response = Util_Sms::send($telephone, $message);\n            if(empty($response)) {\n                //送信失敗\n                throw new HiroieException('A013-E', '$telephone' . $telephone);\n            }\n\n            var_dump($response);\n\n            //SMS送信ログ登録\n            $response_array              = (array)$response;\n            $response_array['type']      = Constants::$SMS_MESSAGE_RESET_PASSWORD;\n            $date                        = strtotime($response->date_created);\n            $message_log['date_created'] = date('Y/m/d h:i:s', $date);\n            $message_log['date_updated'] = date('Y/m/d h:i:s', $date);\n\n            Model_Datasource_SmsMessageLog::create($response_array);\n        }\n\n        return $password;\n\n    }\n\n    /**\n     * @param $password\n     *\n     * @return bool|false|string\n     */\n    private static function get_hashed_password($password)\n    {\n        return password_hash($password, PASSWORD_BCRYPT);\n    }\n\n}\n","markers":{"markers":{"1":{"id":1,"range":[[238,9],[238,9]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":523,"goalBufferRange":null,"autoscroll":true,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/model/logic/account.php","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"18481427599e34e004c6df0d139e1bd29ceddf98","deserializer":"TextBuffer"},{"text":"<?php\n\nclass Model_Datasource_User extends Model_Datasource_Base\n{\n\n    protected static $table_name = 't_user';\n\n    public static function create($data)\n    {\n        $data = array_merge($data, parent::get_insert_common_columns());\n        return DB::insert(self::$table_name)->set($data)->execute();\n    }\n\n    public static function update($key, $data, $update_user_id)\n    {\n        return DB::update(self::$table_name)\n            ->set($data)\n            ->value('update_at', date('Y/m/d H:i:s'), time())\n            ->value('update_by', $update_user_id)\n            ->where('user_id', '=', $key)\n            ->execute();\n    }\n\n    public static function find_by_telephone_password($telephone, $password)\n    {\n        return DB::select()->from(self::$table_name)->where_open()\n            ->where('telephone', $telephone)\n            ->and_where('password', $password)\n            ->where_close()\n            ->execute();\n    }\n\n    public static function find_by_email_password($mail, $password)\n    {\n        return DB::select()->from(self::$table_name)->where_open()\n            ->where('mail', $mail)\n            ->and_where('password', $password)\n            ->where_close()\n            ->execute();\n    }\n\n    public static function find_by_user_id($user_id)\n    {\n        $result = DB::select()->from(self::$table_name)->where_open()\n            ->where('user_id', $user_id)\n            ->and_where('deleted', 0)\n            ->where_close()\n            ->execute()\n            ->as_array();\n\n        return empty($result) ? $result : $result[0];\n    }\n\n    public static function find_by_email($mail)\n    {\n        return DB::select()->from(self::$table_name)->where_open()\n            ->where('mail', $mail)\n            ->and_where('deleted', 0)\n            ->where_close()\n            ->execute()\n            ->as_array();\n    }\n\n    public static function find_by_telephone($telephone)\n    {\n        return DB::select(\n            't_user.*',\n            'm_space.space_id'\n        )->from(self::$table_name)\n            ->join('t_contract', 'LEFT')\n            ->on('t_user.user_id', '=', 't_contract.user_id')\n            //->on('t_contract.status', '=', DB::expr(CONTRACT_STATUS_CONTRACT))\n            ->on('t_contract.status', '=', DB::expr(Constants::$CONTRACT_STATUS_CONTRACT))\n            ->on('t_contract.deleted', '=', DB::expr(0))\n            ->join('m_space', 'LEFT')\n            ->on('m_space.space_id', '=', 't_contract.space_id')\n            ->on('m_space.deleted', '=', DB::expr(0))\n            ->where_open()\n            ->where('telephone', $telephone)\n            ->and_where('t_user.deleted', 0)\n            ->where_close()\n            ->limit(1)\n            ->execute()\n            ->as_array();\n    }\n\n    public static function withdraw($user_id)\n    {\n        $now = date('Y/m/d H:i:s', time());\n        return DB::update(self::$table_name)\n            ->value('withdraw_date', $now)\n            ->value('deleted', 1)\n            ->where('user_id', '=', $user_id)\n            ->execute();\n    }\n\n    public static function find_all($is_include_deleted = true)\n    {\n        $query = DB::select()->from(self::$table_name);\n        if (!$is_include_deleted) {\n            $query = $query->where(\"deleted\", 0);\n        }\n\n        return $query->execute()->as_array();\n    }\n\n    public static function delete_all()\n    {\n        return DB::delete(self::$table_name)->execute();\n    }\n\n}\n","markers":{"markers":{"1":{"id":1,"range":[[43,18],[43,18]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":559,"goalBufferRange":null,"autoscroll":true,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/model/datasource/user.php","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"3010257db1c3751b87909795fc17963037532401","deserializer":"TextBuffer"},{"text":"<?php\n\n// Load in the Autoloader\nrequire_once COREPATH . 'classes' . DIRECTORY_SEPARATOR . 'autoloader.php';\n// class_alias('Fuel\\\\Core\\\\Autoloader', 'Autoloader');\nif (!class_exists('Autoloader')) class_alias('Fuel\\\\Core\\\\Autoloader', 'Autoloader');\n\n// Bootstrap the framework DO NOT edit this\nrequire COREPATH . 'bootstrap.php';\n\nAutoloader::add_namespace('Aws', APPPATH . 'vendor/aws/aws-sdk-php/src/Aws', true);\n//Autoloader::add_namespace('Filter', APPPATH.'classes'.DS.'filter'.DS, true);\nAutoloader::add_classes(array(\n    // Add classes you want to override here\n    // Example: 'View' => APPPATH.'classes/view.php',\n//    'Filter\\\\Filter_Encoding' => APPPATH.'classes'.DS.'encoding.php',\n));\n\n// Register the autoloader\nAutoloader::register();\n\n\n/**\n * Your environment.  Can be set to any of the following:\n *\n * Fuel::DEVELOPMENT\n * Fuel::TEST\n * Fuel::STAGING\n * Fuel::PRODUCTION\n */\nFuel::$env = (isset($_SERVER['FUEL_ENV']) ? $_SERVER['FUEL_ENV'] : Fuel::DEVELOPMENT);\n\n// Initialize the framework with the config file.\nFuel::init('config.php');\n\nConfig::load('hiroie', 'hiroie');\nConfig::load('twilio', 'twilio');\n","markers":{"markers":{"1":{"id":1,"range":[[21,0],[21,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":674,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/bootstrap.php","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"3953e57127677b28778e4cf1d877c5d9c74ed718","deserializer":"TextBuffer"},{"text":"<?php\n\n/**\n * Class Model_Logic_Photo\n */\nclass Model_Logic_Photo\n{\n\n    /**\n     * @param $photo_data\n     *\n     * @return mixed\n     */\n    public static function create($photo_data)\n    {\n        $photo_name = $photo_data['file_name'];\n\n        $thumbnail_list = Model_Logic_Photo::make_thumbnail($photo_data);\n\n\n        $photo_path = $photo_data['photo_path'];\n\n\n        // S3へ画像データをアップロード\n        $s3 = new Util_Aws_S3client();\n        $s3->upload(\n            Config::get('hiroie.aws_bucket_name'),\n            $photo_name,\n            $photo_path);\n\n        foreach ($thumbnail_list as $file_name => $file_data) {\n            $s3->upload(\n                Config::get('hiroie.aws_bucket_name'),\n                $file_name,\n                $file_data);\n        }\n\n        // t_photoに画像データ情報をINSERT\n        list($insert_id, $rows_affected) = Model_Datasource_Photo::create($photo_data);\n        $photo_id = $insert_id;\n\n        return $photo_id;\n    }\n\n    /**\n     * @param $photo_data\n     *\n     * @return array\n     */\n    public static function make_thumbnail($photo_data)\n    {\n        //TODO サムネイル画像生成\n        //TODO アプリ側で縮小画像作成？\n        $thumbnail_file_list = array(\n            $photo_data['file_name'] . '_S' => $photo_data['photo_path'],\n            $photo_data['file_name'] . '_M' => $photo_data['photo_path'],\n            $photo_data['file_name'] . '_L' => $photo_data['photo_path'],\n        );\n\n        return $thumbnail_file_list;\n    }\n\n    /**\n     * @param $photo_group_id\n     *\n     * @return array\n     * @throws HiroieException\n     */\n    public static function get_photo_url($photo_group_id)\n    {\n        $photographs = Model_Datasource_Photo::find_by_photo_group_id($photo_group_id);\n        if (empty($photographs)) {\n            //写真情報が存在しない\n            //throw new HiroieException('G001-E', '$photo_group_id:' . $photo_group_id);\n\n            //何らかの理由で写真情報が存在しない場合、空のURLを返し、アプリのHOME画面に写真を表示しない仕様とする。\n            return null;\n        }\n\n        $s3             = new Util_Aws_S3client();\n        $bucket_name    = Config::get('hiroie.aws_bucket_name');\n        $photo_url_list = array();\n        foreach ($photographs as $photo) {\n            array_push($photo_url_list,\n                       $s3->get_onetime_url($bucket_name, $photo['file_name']));\n        }\n\n        return $photo_url_list;\n\n    }\n\n} ","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":709,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/model/logic/photo.php","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"0b9ee41700947181bfd6ced065a860e1e19c17b7","deserializer":"TextBuffer"},{"text":"<?php\n\nrequire_once APPPATH.'/../packages/apnsphp/ApnsPHP/Autoload.php';\n\nclass Util_Notification\n{\n    /**\n     * 指定したユーザにPush通知を即時送信します.\n     * 申込み完了など即時に送らないといけないpush通知を想定\n     *\n     * @param $user_id user_id\n     * @param $message 送信メッセージ\n     *\n     *\n     */\n    public static function send_notification_immediate($user_id, $message_content)\n    {\n        // キュー作成\n        $queue = self::get_notification_queue();\n        // メッセージをキューに入れる\n        $notification = self::add_notification_queue($queue, $user_id, $message_content);\n        // キュー経由で送出\n        self::send_queued_notifications($queue);\n    }\n\n    /**\n     * Push通知したいメッセージをQueueに追加します.\n     * クーポン情報など一度に多数のユーザに送信するPush通知を想定\n     *\n     * @param $user_id user_id\n     * @param $message 送信メッセージ\n     *\n     *\n     */\n    public static function add_notification_queue($queue, $user_id, $message_content)\n    {\n        // デバイストークン取得\n        $device_tokens = Model_Datasource_UserDeviceToken::find_by_user_id($user_id);\n        $device_token = '1e82db91c7ceddd72bf33d74ae052ac9c84a065b35148ac401388843106a7485';\n        if (empty($device_tokens))\n        {\n            // FAKEIT ほんとなら何か例外を投げる？　ログだけ投げて終了でいいかな？\n        }\n        else\n        {\n            $device_token = $device_tokens[0];\n        }\n        // メッセージ作成\n        $notification = new ApnsPHP_Message($devicetoken);\n        // $message->setCustomIdentifier(sprintf(\"Message-Badge-%03d\", $i));\n        // $message->setBadge(3);\n        $notification->setText($message_content);\n        // メッセージ追加\n        $queue->add($notification);\n        return $notification;\n    }\n\n    /**\n     * Queueに溜めたメッセージを送信します。\n     *\n     * @param queue\n     * @return errrors_in_queue\n     *\n     */\n    public static function send_queued_notifications($queue)\n    {\n        // pushオブジェクトを作成\n        $push = new ApnsPHP_Push(\n            ApnsPHP_Abstract::ENVIRONMENT_SANDBOX,\n            'server_certificates_bundle_sandbox.pem'\n        );\n        {\n            $push->connect();\n            // このpushオブジェクトに、少しずつ$queueの中身を流しこんでいく\n            {\n                $push->send();\n                // offset, limitを設定して送信していく\n                // 途中，レスポンスを正しく受け取って，\n                // t_user_devicetokenをupdateして腐ったものを削除\n            }\n            $push->disconnect();\n\n            // Examine the error message container\n            $an_error_queue = $push->getErrors(); // エラーをどう処理する？\n        } // エラーがなくなるまでpushする\n\n        return $an_error_queue;\n    }\n\n    private static function get_notification_queue($queue_id = null)\n    {\n        $queue = null;\n        if (is_null(queue_id))\n        {\n            $queue = Model_Datasource_NotificationQueue::create($now);\n        }\n        else\n        {\n            $queue = Model_Datasource_NotificationQueue::find_by_id($queue_id);\n        }\n        return $queue;\n\n    }\n}\n","markers":{"markers":{"1":{"id":1,"range":[[31,0],[31,0]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":720,"goalBufferRange":null,"autoscroll":false,"preserveFolds":true},"deserializer":"Marker"},"3":{"id":3,"range":[[23,0],[23,0]],"tailed":true,"reversed":false,"valid":false,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/util/notification.php","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"ecde81f28536bf45381fd029de4cefc817817791","deserializer":"TextBuffer"},{"text":"<?php\n\nclass Model_Datasource_UserDeviceToken extends Model_Datasource_Base\n{\n\n    protected static $table_name = 't_user_device_token';\n\n    public static function create($data)\n    {\n        $data = array_merge($data, parent::get_insert_common_columns());\n        return DB::insert(self::$table_name)->set($data)->execute();\n    }\n\n    public static function update($key, $data, $update_user_id)\n    {\n        return DB::update(self::$table_name)\n            ->set($data)\n            ->value('update_at', date('Y/m/d H:i:s'), time())\n            ->value('update_by', $update_user_id)\n            ->where('user_id', '=', $key)\n            ->execute();\n    }\n\n    public static function find_by_id($id)\n    {\n        return DB::select()->from(self::$table_name)\n            ->where_open()\n            ->where('id', $id)\n            ->and_where('deleted', 0)\n            ->where_close()\n            ->execute()\n            ->as_array();\n    }\n\n    public static function find_by_user_id($user_id)\n    {\n        return DB::select()->from(self::$table_name)\n            ->where_open()\n            ->where('user_id', $user_id)\n            ->and_where('deleted', 0)\n            ->where_close()\n            ->execute()\n            ->as_array();\n    }\n\n    public static function find_all($is_include_deleted = true)\n    {\n        $query = DB::select()->from(self::$table_name);\n        if (!$is_include_deleted) {\n            $query = $query->where(\"deleted\", 0);\n        }\n\n        return $query->execute()->as_array();\n    }\n\n    public static function delete_all()\n    {\n        return DB::delete(self::$table_name)->execute();\n    }\n}","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":773,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/model/datasource/userdevicetoken.php","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"6f4348f63d35bf38949f6313f67464d81991a41d","deserializer":"TextBuffer"},{"text":"<?php\n\n/**\n * Class Constants\n */\nclass Constants\n{\n    //荷物ステータス\n    public static $BAGGAGE_STATUS_NOTSTORE = 100;\n    public static $BAGGAGE_STATUS_PREPARE_STORE = 200;\n    public static $BAGGAGE_STATUS_STORED = 300;\n    public static $BAGGAGE_STATUS_PREPARE_SHIP = 400;\n    public static $BAGGAGE_STATUS_SHIPPED = 500;\n\n    //契約ステータス\n    public static $CONTRACT_STATUS_CONTRACT = 100;\n    public static $CONTRACT_STATUS_RENEW = 200; //ログ専用\n    public static $CONTRACT_STATUS_UPDATE = 300; //ログ専用\n    public static $CONTRACT_STATUS_ERROR = 400; //ログ専用\n    public static $CONTRACT_STATUS_WITHDREW = 500;\n\n    //依頼ステータス\n    public static $REQUEST_STATUS_COLLECT_REQ = 100;\n    public static $REQUEST_STATUS_COLLECT_PREPARE = 110;\n    public static $REQUEST_STATUS_COLLECT_PROCEED = 120;\n    public static $REQUEST_STATUS_COLLECT_COMPLETE = 150;\n    public static $REQUEST_STATUS_COLLECT_CANCEL = 160;\n    public static $REQUEST_STATUS_COLLECT_ABSENCE_ERROR = 170;\n    public static $REQUEST_STATUS_COLLECT_CREDIT_ERROR = 180;\n    public static $REQUEST_STATUS_DELIVERY_REQ = 200;\n    public static $REQUEST_STATUS_DELIVERTY_PREPARE = 210;\n    public static $REQUEST_STATUS_DELIVERY_COMPLETE = 250;\n    public static $REQUEST_STATUS_DELIVERY_CANCEL = 260;\n    public static $REQUEST_STATUS_DELIVERY_CREDIT_ERROR = 270;\n    public static $REQUEST_STATUS_DELIVERY_ABSENCE_ERROR = 280;\n\n    //依頼種別\n    public static $REQUEST_TYPE_COLLECT = 1;\n    public static $REQUEST_TYPE_DELIVERY = 2;\n\n    //売上種別\n    public static $SALES_SPACE_FEE = 10;\n    public static $SALES_GOODS = 20;\n    public static $SALES_TRANSPORT_STORE_FEE = 30;\n    public static $SALES_TRANSPORT_SHIP_FEE = 40;\n    public static $SALES_WORK_FEE = 50;\n    //原価種別\n    public static $COST_SPACE_FEE = 11;\n    public static $COST_GOODS = 21;\n    public static $COST_TRANSPORT_STORE_FEE = 31;\n    public static $COST_TRANSPORT_SHIP_FEE = 41;\n    public static $COST_WORK_FEE = 51;\n\n    //税種別\n    public static $TAX_INCLUSIVE = 1; //内税\n    public static $TAX_EXCLUSIVE = 2; //外税\n    public static $TAX_EXEMPT = 3; //非課税\n\n    //契約種別\n    public static $CONTRACT_TYPE_NORMAL = 1;\n    public static $CONTRACT_TYPE_TEST = 9;\n\n    //引き取り、お届け日時希望時間帯\n    public static $TIME_REQ_1 = 1;\n    public static $TIME_REQ_2 = 2;\n    public static $TIME_REQ_3 = 3;\n    public static $TIME_REQ_4 = 4;\n    public static $TIME_REQ_5 = 5;\n    public static $TIME_REQ_6 = 6;\n\n    //プロモーションコードステータス\n    public static $PROMOTION_STATUS_UNUSED = 0;\n    public static $PROMOTION_STATUS_USED = 1;\n\n    //メッセージタイプ\n    public static $MESSAGE_TYPE_CONTRACT_NEW = 10;\n    public static $MESSAGE_TYPE_CONTRACT_RENEWAL = 11;\n    public static $MESSAGE_TYPE_CONTRACT_CREDIT_ERROR = 12;\n    public static $MESSAGE_TYPE_CONTRACT_END = 13;\n    public static $MESSAGE_TYPE_CONTRACT_UPDATE = 14;\n    public static $MESSAGE_TYPE_COLLECT_ACCEPT = 20;\n    public static $MESSAGE_TYPE_COLLECT_CANCEL = 21;\n    public static $MESSAGE_TYPE_COLLECT_FIX = 22;\n    public static $MESSAGE_TYPE_COLLECT_ABSENCE = 23;\n    public static $MESSAGE_TYPE_COLLECT_CREDIT_ERROR = 24;\n    public static $MESSAGE_TYPE_COLLECT_COMPLETE = 25;\n    public static $MESSAGE_TYPE_DELIVERY_ACCEPT = 30;\n    public static $MESSAGE_TYPE_DELIVERY_CANCEL = 31;\n    public static $MESSAGE_TYPE_DELIVERY_FIX = 32;\n    public static $MESSAGE_TYPE_DELIVERY_ABSENCE = 33;\n    public static $MESSAGE_TYPE_DELIVERY_CREDIT_ERROR = 34;\n    public static $MESSAGE_TYPE_DELIVERY_COMPLETE = 35;\n    public static $MESSAGE_TYPE_CAMPAIGN = 40;\n    public static $MESSAGE_TYPE_INFORMATION = 50;\n    public static $MESSAGE_TYPE_WARNING = 60;\n\n    //SMSメッセージタイプ\n    public static $SMS_MESSAGE_AUTH_CODE = 1;\n    public static $SMS_MESSAGE_RESET_PASSWORD = 2;\n\n    //メッセージ既読ステータス\n    public static $MESSAGE_NOT_OPENED = 0;\n    public static $MESSAGE_OPENED = 1;\n\n    //システムでデータ操作する際のユーザID\n    public static $HIROIE_SYSTEM = 0;\n\n    //検索種別\n    public static $INCLUDE_DELETED = true;\n    public static $EXCLUDE_DELETED = false;\n\n    public static $WAREHOUSE_DEFAULT = 1;\n\n    // push通知 デバイスタイプ\n    public static $NOTIFICATION_TYPE_IOS = 1;\n    public static $NOTIFICATION_TYPE_ANDROID = 2;\n\n    // push通知 処理ステータス\n    public static $NOTIFICATION_STATUS_UNSEND = 0;\n    public static $NOTIFICATION_STATUS_SENT = 1;\n    public static $NOTIFICATION_STATUS_ERROR = 9;\n\n}\n\n/**\n * Path to the hiroie root directory.\n */\ndefine('HIROIEROOT', realpath(__DIR__ . '/../../../') . DIRECTORY_SEPARATOR);\n","markers":{"markers":{"1":{"id":1,"range":[[118,50],[118,50]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":800,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/constants.php","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"1c45e70475dce087591675f64ae4bc4b9cb257e6","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":523,"softTabs":true,"scrollTop":3759,"scrollLeft":0,"displayBuffer":{"id":524,"softWrap":false,"editorWidthInChars":98,"tokenizedBuffer":{"bufferPath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/model/logic/account.php","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":674,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":675,"softWrap":false,"editorWidthInChars":97,"tokenizedBuffer":{"bufferPath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/bootstrap.php","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":709,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":710,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/model/logic/photo.php","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":720,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":721,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/util/notification.php","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":800,"softTabs":true,"scrollTop":1518,"scrollLeft":0,"displayBuffer":{"id":801,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/constants.php","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":773,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":774,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/model/datasource/userdevicetoken.php","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":559,"softTabs":true,"scrollTop":321,"scrollLeft":0,"displayBuffer":{"id":560,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/model/datasource/user.php","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/bootstrap.php","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"find-and-replace":{"viewState":{"findHistory":["users","empty","empty_","nd_by_user_id","nd_by_user_","userid","find_","\\t","login"],"replaceHistory":["    "],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}}},"fuzzy-finder":{"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/model/logic/account.php":1396860731277,"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/bootstrap.php":1396860732199,"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/model/logic/photo.php":1396843158110,"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/util/notification.php":1396847414797,"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/constants.php":1396847381263,"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/model/datasource/userdevicetoken.php":1396843357952,"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/classes/model/datasource/user.php":1396605320477},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":1080795},"tree-view":{"directoryExpansionStates":{"classes":{"controller":{"api":{"user":{}}},"filter":{},"model":{"datasource":{},"logic":{}},"util":{}},"config":{"test":{}},"tests":{"controller":{}}},"selectedPath":"/Users/kwatanabe/git/whiteplus/hiroie/hiroie_api_develop/api.hiroie.jp/fuel/app/bootstrap.php","hasFocus":false,"attached":true,"scrollLeft":50,"scrollTop":2398,"width":200}}}