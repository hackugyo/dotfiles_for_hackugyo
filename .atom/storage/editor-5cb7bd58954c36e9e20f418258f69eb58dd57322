{"mode":"editor","version":1,"windowDimensions":{"x":1920,"y":118,"width":1023,"height":1024},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/kwatanabe/git/googlecalendarapi/src/jp/ne/hatena/hackugyo/thoughtscalendar/model","buffers":[{"text":"package jp.ne.hatena.hackugyo.thoughtscalendar.model;\n\nimport java.util.HashMap;\n\nimport jp.ne.hatena.hackugyo.thoughtscalendar.CustomApplication;\nimport jp.ne.hatena.hackugyo.thoughtscalendar.util.AppUtils;\nimport android.content.Context;\n\nimport com.snappydb.DB;\nimport com.snappydb.DBFactory;\nimport com.snappydb.SnappydbException;\n\npublic class AttendStatus {\n\n    private static final String SNAPPYDB_KEY_IS_LOGGED_IN = \"SNAPPYEDB_KEY_ALARM_IS_ENABLE_AttendStatus\";\n    /** LoginStatus cash. 0: logged out, 1: logged in, -1: undefined */\n    private static HashMap<String, Boolean> sAttendStatusCash = new HashMap<String, Boolean>();\n\n    public static boolean getAttendStatus(String eventId) {\n        if (sAttendStatusCash.get(eventId) != null) return sAttendStatusCash.get(eventId);\n        boolean result = false;\n        DB db = null;\n        Context context = CustomApplication.getAppContext();\n        try {\n            db = DBFactory.open(context, SNAPPYDB_KEY_IS_LOGGED_IN);\n            if (db.exists(eventId)) {\n                result = db.getBoolean(eventId);\n            }\n            db.close();\n        } catch (SnappydbException e) {\n            if (AppUtils.isDebuggable()) e.printStackTrace();\n        }\n        sAttendStatusCash.put(eventId, result);\n        return result;\n    }\n\n    @Deprecated\n    public static void setAttendStatus(String eventId, Boolean isAttend) {\n        if (sAttendStatusCash.containsKey(eventId) && sAttendStatusCash.get(eventId) == isAttend) return;\n        DB db = null;\n        Context context = CustomApplication.getAppContext();\n        try {\n            db = DBFactory.open(context, SNAPPYDB_KEY_IS_LOGGED_IN);\n            db.putBoolean(eventId, isAttend);\n            db.close();\n        } catch (SnappydbException e) {\n            if (AppUtils.isDebuggable()) e.printStackTrace();\n        }\n        sAttendStatusCash.put(eventId, isAttend);\n    }\n}\n","markers":{"markers":{"1":{"id":1,"range":[[21,21],[21,21]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":10,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/kwatanabe/git/googlecalendarapi/src/jp/ne/hatena/hackugyo/thoughtscalendar/model/AttendStatus.java","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"ff1baac53238f8f5cbcfae396d3b8b21f05b1b1a","deserializer":"TextBuffer"},{"text":"package jp.ne.hatena.hackugyo.thoughtscalendar.model;\n\nimport java.sql.SQLException;\nimport java.util.Calendar;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nimport jp.ne.hatena.hackugyo.thoughtscalendar.util.CalendarUtils;\nimport jp.ne.hatena.hackugyo.thoughtscalendar.util.LogUtils;\nimport jp.ne.hatena.hackugyo.thoughtscalendar.util.StringUtils;\nimport android.content.Context;\n\nimport com.google.common.base.Objects;\nimport com.j256.ormlite.dao.Dao;\nimport com.j256.ormlite.field.DataType;\nimport com.j256.ormlite.field.DatabaseField;\nimport com.j256.ormlite.stmt.QueryBuilder;\nimport com.j256.ormlite.stmt.Where;\nimport com.j256.ormlite.table.DatabaseTable;\n\n/**\n * 参加予定のイベント．<br>\n * \n * @author kwatanabe\n * \n */\n@DatabaseTable(tableName = \"t_event\")\npublic class AttendingEvent {\n\n    public static final String AUTHORITY_TOKYO_ART_BEAT = \"tokyoartbeat\";\n\n    public static final String COLUMN_NAME_PRIMARY_KEY = \"primaryKey\";\n    public static final String COLUMN_NAME_EVENTID = \"eventId\";\n    public static final String COLUMN_NAME_OWNERS_ACCOUNT = \"authority\";\n    public static final String COLUMN_NAME_TITLE = \"title\";\n    public static final String COLUMN_NAME_LOCATION = \"location\";\n    public static final String COLUMN_NAME_ADDRESS = \"address\";\n    public static final String COLUMN_NAME_IMAGE_URL = \"imageUrl\";\n    public static final String COLUMN_NAME_DESCRIPTION = \"description\";\n    public static final String COLUMN_NAME_DETAIL_URL = \"detailUrl\";\n    public static final String COLUMN_NAME_BEGIN = \"begin\";\n    public static final String COLUMN_NAME_END = \"end\";\n    public static final String COLUMN_NAME_ATTENDING = \"attending\";\n    public static final String COLUMN_NAME_HASHTAG = \"hashTag\";\n    public static final String COLUMN_NAME_CREATEDAT = \"createdAt\";\n\n    /** 参加予定イベントキー */\n    @DatabaseField(columnName = COLUMN_NAME_PRIMARY_KEY, generatedId = true)\n    public Long primaryKey;\n    /** イベントID */\n    @DatabaseField(columnName = COLUMN_NAME_EVENTID)\n    public String eventId;\n    /** カレンダ管理者ID */\n    @DatabaseField(columnName = COLUMN_NAME_OWNERS_ACCOUNT)\n    public String ownersAccount;\n    /** タイトル */\n    @DatabaseField(columnName = COLUMN_NAME_TITLE)\n    public String title;\n    /** 開始日時 */\n    @DatabaseField(columnName = COLUMN_NAME_BEGIN, dataType = DataType.DATE_LONG)\n    public java.util.Date begin;\n    /** 終了日時 */\n    @DatabaseField(columnName = COLUMN_NAME_END, dataType = DataType.DATE_LONG)\n    public java.util.Date end;\n    /** 場所名称 */\n    @DatabaseField(columnName = COLUMN_NAME_LOCATION)\n    public String location;\n    /** 場所住所 */\n    @DatabaseField(columnName = COLUMN_NAME_ADDRESS)\n    public String address;\n    /** 詳細説明 */\n    @DatabaseField(columnName = COLUMN_NAME_DESCRIPTION)\n    public String description;\n    /** 詳細URL */\n    @DatabaseField(columnName = COLUMN_NAME_DETAIL_URL)\n    public String detailUrl;\n    /** 画像URL */\n    @DatabaseField(columnName = COLUMN_NAME_IMAGE_URL)\n    public String imageUrl;\n    /** 参加有無 */\n    @DatabaseField(columnName = COLUMN_NAME_ATTENDING, dataType = DataType.BOOLEAN)\n    public boolean attending;\n    /** ハッシュタグ */\n    @DatabaseField(columnName = COLUMN_NAME_HASHTAG)\n    public String hashTag;\n    /** 作成日時 */\n    @DatabaseField(columnName = COLUMN_NAME_CREATEDAT, dataType = DataType.DATE_LONG)\n    private java.util.Date createdAt;\n\n    protected Calendar mCalendarFrom, mCalendarTo;\n\n\n    public AttendingEvent() {\n        // no-arg constructor for deserializing\n    }\n\n\n    @Override\n    public boolean equals(Object other) {\n        if (other == null) return false;\n        if (other instanceof AttendingEvent) {\n            AttendingEvent r = (AttendingEvent) other;\n            return (StringUtils.isSame(eventId, r.eventId)) //\n                    && (StringUtils.isSame(ownersAccount, r.ownersAccount));\n        } else {\n            return false;\n        }\n    }\n\n\n    @Override\n    public int hashCode() {\n        return super.hashCode();\n    }\n\n    @Override\n    public String toString() {\n        return Objects.toStringHelper(this)//\n                .add(COLUMN_NAME_PRIMARY_KEY, primaryKey)//\n                .add(COLUMN_NAME_EVENTID, eventId)//\n                .add(COLUMN_NAME_OWNERS_ACCOUNT, ownersAccount)//\n                .add(COLUMN_NAME_TITLE, title)//\n                .add(COLUMN_NAME_BEGIN, begin)//\n                .add(COLUMN_NAME_END, end)//\n                .add(COLUMN_NAME_LOCATION, location)//\n                .add(COLUMN_NAME_ADDRESS, address)//\n                .add(COLUMN_NAME_DESCRIPTION, description)//\n                .add(COLUMN_NAME_DETAIL_URL, detailUrl)//\n                .add(COLUMN_NAME_IMAGE_URL, imageUrl)//\n                .add(COLUMN_NAME_ATTENDING, attending)//\n                .add(COLUMN_NAME_HASHTAG, hashTag)//\n                .add(COLUMN_NAME_CREATEDAT, createdAt)//\n                .toString();\n    }\n\n    /***********************************************\n     * getter *\n     ***********************************************/\n    public String getTitle() {\n        return title;\n    }\n\n    public String getImageUrl() {\n        return imageUrl;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public String getEventId() {\n        return eventId;\n    }\n\n    public boolean getAttending() {\n        return attending;\n    }\n    public void setAttending(boolean attending) {\n        this.attending  = attending;\n    }\n\n    public String getDetailUrl() {\n        return detailUrl;\n    }\n\n    public CharSequence getLocation() {\n        return location;\n    }\n\n    public Calendar getDateFrom() {\n        if (mCalendarFrom == null) {\n            mCalendarFrom = CalendarUtils.getInstance(this.begin);\n        }\n        return mCalendarFrom;\n    }\n\n\n    public Calendar getDateTo() {\n        if (mCalendarTo == null) {\n            if (end == null)  end = begin;\n            mCalendarTo = CalendarUtils.getInstance(this.end);\n        }\n        return mCalendarTo;\n    }\n\n    /***********************************************\n     * DB *\n     ***********************************************/\n\n    public void save(Context context) {\n        DatabaseHelper helper = DatabaseHelper.getHelper(context);\n        try {\n            Dao<AttendingEvent, Integer> dao = helper.getDao(AttendingEvent.class);\n            // 同一のものを探す\n            QueryBuilder<AttendingEvent, Integer> queryBuilder = dao.queryBuilder();\n            queryBuilder.where().eq(COLUMN_NAME_EVENTID, eventId).and().eq(COLUMN_NAME_OWNERS_ACCOUNT, ownersAccount);\n            List<AttendingEvent> result = queryBuilder.query();\n            if (result != null && !result.isEmpty()) {\n                this.primaryKey = result.get(0).primaryKey;\n            }\n            dao.createOrUpdate(this);\n        } catch (SQLException e) {\n            LogUtils.e(\"cannot find.\", e);\n        } finally {\n            DatabaseHelper.releaseHelper();\n        }\n    }\n\n    public static AttendingEvent findEvent(Context context, String eventId, String ownersAccount) {\n        DatabaseHelper helper = DatabaseHelper.getHelper(context);\n        List<AttendingEvent> results;\n        try {\n            Dao<AttendingEvent, Integer> dao = helper.getDao(AttendingEvent.class);\n            QueryBuilder<AttendingEvent, Integer> queryBuilder = dao.queryBuilder();\n            Where<AttendingEvent, Integer> where = queryBuilder.where();\n            where.eq(COLUMN_NAME_EVENTID, eventId).and().eq(COLUMN_NAME_OWNERS_ACCOUNT, ownersAccount);\n            queryBuilder.orderBy(COLUMN_NAME_BEGIN, true);\n            results = queryBuilder.query();\n        } catch (SQLException e) {\n            LogUtils.e(\"cannot find.\", e);\n            return null;\n        } finally {\n            DatabaseHelper.releaseHelper();\n        }\n        if (results == null || results.isEmpty()) return null;\n        return results.get(0);\n    }\n\n    /**\n     * \n     * @param context\n     * @param ownersAccount\n     * @return 指定したカレンダの参加予定イベントの配列（0件の場合は空） or null\n     */\n    public static List<AttendingEvent> findEvents(Context context, String ownersAccount) {\n        DatabaseHelper helper = DatabaseHelper.getHelper(context);\n        List<AttendingEvent> results = null;\n        try {\n            Dao<AttendingEvent, Integer> dao = helper.getDao(AttendingEvent.class);\n            QueryBuilder<AttendingEvent, Integer> queryBuilder = dao.queryBuilder();\n            Where<AttendingEvent, Integer> where = queryBuilder.where();\n            where.eq(COLUMN_NAME_OWNERS_ACCOUNT, ownersAccount);\n            queryBuilder.orderBy(COLUMN_NAME_BEGIN, true);\n            results = queryBuilder.query();\n        } catch (SQLException e) {\n            LogUtils.e(\"cannot find.\", e);\n            return null;\n        } finally {\n            DatabaseHelper.releaseHelper();\n        }\n        return results;\n    }\n\n    public static List<AttendingEvent> findAll(Context context) {\n\n        DatabaseHelper helper = DatabaseHelper.getHelper(context);\n        List<AttendingEvent> results;\n        try {\n            Dao<AttendingEvent, Integer> dao = helper.getDao(AttendingEvent.class);\n            QueryBuilder<AttendingEvent, Integer> queryBuilder = dao.queryBuilder();\n            queryBuilder.orderBy(COLUMN_NAME_BEGIN, true);\n            results = queryBuilder.query();\n        } catch (SQLException e) {\n            LogUtils.e(\"cannot find.\", e);\n            return null;\n        } finally {\n            DatabaseHelper.releaseHelper();\n        }\n        if (results == null || results.isEmpty()) return null;\n        return results;\n    }\n\n\n    /***********************************************\n     * Comparable *\n     **********************************************/\n\n    public static Comparator<AttendingEvent> ascending() {\n        return new Comparator<AttendingEvent>() {\n            @Override\n            public int compare(AttendingEvent lhs, AttendingEvent rhs) {\n                if (lhs == null && rhs == null) {\n                    return 0;\n                } else if (lhs == null) {\n                    return 1;\n                } else if (rhs == null) {\n                    return -1;\n                } else if (lhs.getDateFrom() == null) {\n                    if (rhs.getDateFrom() == null) {\n                        return 0;\n                    } else {\n                        return 1;\n                    }\n                } else if (rhs.getDateFrom() == null) {\n                    return -1;\n                } else {\n                    return lhs.getDateFrom().compareTo(rhs.getDateFrom());\n                }\n            }\n        };\n    }\n\n    public static Comparator<AttendingEvent> descending() {\n        return Collections.reverseOrder(ascending());\n    }\n}\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":14},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/kwatanabe/git/googlecalendarapi/src/jp/ne/hatena/hackugyo/thoughtscalendar/model/AttendingEvent.java","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"ac1aec427af713f8061ae1aeee8fac316c915583","deserializer":"TextBuffer"},{"text":"package jp.ne.hatena.hackugyo.thoughtscalendar.model;\n\nimport java.io.File;\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport jp.ne.hatena.hackugyo.thoughtscalendar.util.LogUtils;\nimport android.content.Context;\nimport android.database.sqlite.SQLiteDatabase;\n\nimport com.j256.ormlite.android.apptools.OpenHelperManager;\nimport com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper;\nimport com.j256.ormlite.support.ConnectionSource;\nimport com.j256.ormlite.table.TableUtils;\n\n\npublic class DatabaseHelper extends OrmLiteSqliteOpenHelper {\n    private static final String DATABASE_NAME = \"philosocial.db\";\n    private static final int DATABASE_VERSION = 1;\n    private File mDatabasePath;\n    private static AtomicInteger sHelperReferenceCount = new AtomicInteger(0);\n    private static volatile DatabaseHelper sHelper;\n\n    public DatabaseHelper(Context context) {\n        super(context, DATABASE_NAME, null, DATABASE_VERSION);\n        mDatabasePath = context.getDatabasePath(DATABASE_NAME);\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase sqLiteDatabase, ConnectionSource myConnectionSource) {\n       \n        try {\n            // エンティティを指定してcreate tableします\n            TableUtils.createTable(myConnectionSource, AttendingEvent.class);\n        } catch (java.sql.SQLException e) {\n            LogUtils.e(\"データベースを作成できませんでした\", e);\n        }\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase sqLiteDatabase, ConnectionSource myConnectionSource, int oldVersion, int newVersion) {\n        // DBのアップグレード処理（今回は割愛）\n    }\n\n    /***********************************************\n     * get / release helper *\n     **********************************************/\n    /**\n     * {@link OpenHelperManager#getHelper(Context, Class)}のラッパです\n     * \n     * @param context\n     * @return DBヘルパ\n     */\n    public static synchronized DatabaseHelper getHelper(Context context) {\n        if (sHelperReferenceCount.getAndIncrement() == 0) {\n            sHelper = OpenHelperManager.getHelper(context, DatabaseHelper.class);\n        }\n        return sHelper;\n    }\n\n    /**\n     * DBヘルパを使い終わったら，{@link #close()}のかわりに呼んでください．\n     */\n    public static synchronized void releaseHelper() {\n        if (sHelperReferenceCount.decrementAndGet() <= 0) {\n            sHelperReferenceCount.set(0);\n            OpenHelperManager.releaseHelper();\n        }\n    }\n\n    public static synchronized void destroyHelper() {\n        OpenHelperManager.releaseHelper();\n        sHelperReferenceCount.set(0);\n    }\n\n    /**\n     * Close any open connections.\n     * \n     * @deprecated DB更新をAtomicにするため，直接closeせず，<br>\n     *             {@link #releaseHelper()}を呼んでください．\n     */\n    public void close() {\n        super.close();\n    }\n}\n","markers":{"markers":{"1":{"id":1,"range":[[22,26],[22,26]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":18,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/kwatanabe/git/googlecalendarapi/src/jp/ne/hatena/hackugyo/thoughtscalendar/model/DatabaseHelper.java","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"47bfce2aa98bdb0eee04714f48162554d109fbad","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":10,"softTabs":true,"displayBuffer":{"id":11,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/kwatanabe/git/googlecalendarapi/src/jp/ne/hatena/hackugyo/thoughtscalendar/model/AttendStatus.java","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":14,"softTabs":true,"displayBuffer":{"id":15,"softWrap":false,"editorWidthInChars":null,"scrollTop":163,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/kwatanabe/git/googlecalendarapi/src/jp/ne/hatena/hackugyo/thoughtscalendar/model/AttendingEvent.java","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":18,"softTabs":true,"displayBuffer":{"id":19,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/kwatanabe/git/googlecalendarapi/src/jp/ne/hatena/hackugyo/thoughtscalendar/model/DatabaseHelper.java","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/kwatanabe/git/googlecalendarapi/src/jp/ne/hatena/hackugyo/thoughtscalendar/model/DatabaseHelper.java","focused":true,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-java"],"deserializer":"Workspace"},"packageStates":{"script":{"scriptOptionsViewState":""},"fuzzy-finder":{"/Users/kwatanabe/git/googlecalendarapi/src/jp/ne/hatena/hackugyo/thoughtscalendar/model/AttendStatus.java":1406705682745,"/Users/kwatanabe/git/googlecalendarapi/src/jp/ne/hatena/hackugyo/thoughtscalendar/model/AttendingEvent.java":1406705687634,"/Users/kwatanabe/git/googlecalendarapi/src/jp/ne/hatena/hackugyo/thoughtscalendar/model/DatabaseHelper.java":1406705692714},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":3698646},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/kwatanabe/git/googlecalendarapi/src/jp/ne/hatena/hackugyo/thoughtscalendar/model/DatabaseHelper.java","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}